import { ISession } from '@microsoft/applicationinsights-common';
import { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';
export interface ISessionConfig {
    sessionRenewalMs?: () => number;
    sessionExpirationMs?: () => number;
    cookieDomain?: () => string;
    namePrefix?: () => string;
}
export declare class Session implements ISession {
    /**
     * The session ID.
     */
    id?: string;
    /**
     * The date at which this guid was genereated.
     * Per the spec the ID will be regenerated if more than acquisitionSpan milliseconds ellapse from this time.
     */
    acquisitionDate?: number;
    /**
     * The date at which this session ID was last reported.
     * This value should be updated whenever telemetry is sent using this ID.
     * Per the spec the ID will be regenerated if more than renewalSpan milliseconds elapse from this time with no activity.
     */
    renewalDate?: number;
}
export declare class _SessionManager {
    static acquisitionSpan: number;
    static renewalSpan: number;
    static cookieUpdateInterval: number;
    automaticSession: Session;
    config: ISessionConfig;
    private static cookieNameConst;
    private cookieUpdatedTimestamp;
    private _logger;
    private _storageNamePrefix;
    constructor(config: ISessionConfig, logger?: IDiagnosticLogger);
    update(): void;
    /**
     *  Record the current state of the automatic session and store it in our cookie string format
     *  into the browser's local storage. This is used to restore the session data when the cookie
     *  expires.
     */
    backup(): void;
    /**
     *  Use config.namePrefix + ai_session cookie data or local storage data (when the cookie is unavailable) to
     *  initialize the automatic session.
     */
    private initializeAutomaticSession();
    /**
     *  Extract id, aquisitionDate, and renewalDate from an ai_session payload string and
     *  use this data to initialize automaticSession.
     *
     *  @param {string} sessionData - The string stored in an ai_session cookie or local storage backup
     */
    private initializeAutomaticSessionWithData(sessionData);
    private renew();
    private setCookie(guid, acq, renewal);
    private setStorage(guid, acq, renewal);
}
