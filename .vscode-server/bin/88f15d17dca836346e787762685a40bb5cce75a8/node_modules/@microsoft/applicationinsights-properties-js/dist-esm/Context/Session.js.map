{"version":3,"file":"Session.js","sourceRoot":"","sources":["../../src/Context/Session.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { ISession } from '@microsoft/applicationinsights-common';\r\nimport {\r\n    Util, DateTimeUtils\r\n} from '@microsoft/applicationinsights-common';\r\nimport { IDiagnosticLogger, _InternalMessageId, LoggingSeverity, CoreUtils, DiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport interface ISessionConfig {\r\n    sessionRenewalMs?: () => number;\r\n    sessionExpirationMs?: () => number;\r\n    cookieDomain?: () => string;\r\n    namePrefix?: () => string;\r\n}\r\n\r\nexport class Session implements ISession {\r\n    /**\r\n     * The session ID.\r\n     */\r\n    public id?: string;\r\n\r\n    /**\r\n     * The date at which this guid was genereated.\r\n     * Per the spec the ID will be regenerated if more than acquisitionSpan milliseconds ellapse from this time.\r\n     */\r\n    public acquisitionDate?: number;\r\n\r\n    /**\r\n     * The date at which this session ID was last reported.\r\n     * This value should be updated whenever telemetry is sent using this ID.\r\n     * Per the spec the ID will be regenerated if more than renewalSpan milliseconds elapse from this time with no activity.\r\n     */\r\n    public renewalDate?: number;\r\n}\r\n\r\nexport class _SessionManager {\r\n\r\n    public static acquisitionSpan = 86400000; // 24 hours in ms\r\n    public static renewalSpan = 1800000; // 30 minutes in ms\r\n    public static cookieUpdateInterval = 60000 // 1 minute in ms\r\n    public automaticSession: Session;\r\n    public config: ISessionConfig;\r\n    private static cookieNameConst = 'ai_session';\r\n\r\n    private cookieUpdatedTimestamp: number;\r\n    private _logger: IDiagnosticLogger;\r\n    private _storageNamePrefix: () => string;\r\n\r\n    constructor(config: ISessionConfig, logger?: IDiagnosticLogger) {\r\n        if(CoreUtils.isNullOrUndefined(logger)) {\r\n            this._logger = new DiagnosticLogger();\r\n        } else {\r\n            this._logger = logger;\r\n        }\r\n\r\n        if (!config) {\r\n            config = <any>{};\r\n        }\r\n\r\n        if (!(typeof config.sessionExpirationMs === \"function\")) {\r\n            config.sessionExpirationMs = () => _SessionManager.acquisitionSpan;\r\n        }\r\n\r\n        if (!(typeof config.sessionRenewalMs === \"function\")) {\r\n            config.sessionRenewalMs = () => _SessionManager.renewalSpan;\r\n        }\r\n\r\n        this.config = config;\r\n        this._storageNamePrefix = () => this.config.namePrefix && this.config.namePrefix() ? _SessionManager.cookieNameConst + this.config.namePrefix() : _SessionManager.cookieNameConst;\r\n\r\n        this.automaticSession = new Session();\r\n    }\r\n\r\n    public update() {\r\n        if (!this.automaticSession.id) {\r\n            this.initializeAutomaticSession();\r\n        }\r\n\r\n        var now = DateTimeUtils.Now();\r\n\r\n        var acquisitionExpired = now - this.automaticSession.acquisitionDate > this.config.sessionExpirationMs();\r\n        var renewalExpired = now - this.automaticSession.renewalDate > this.config.sessionRenewalMs();\r\n\r\n        // renew if acquisitionSpan or renewalSpan has ellapsed\r\n        if (acquisitionExpired || renewalExpired) {\r\n            // update automaticSession so session state has correct id\r\n            this.renew();\r\n        } else {\r\n            // do not update the cookie more often than cookieUpdateInterval\r\n            if (!this.cookieUpdatedTimestamp || now - this.cookieUpdatedTimestamp > _SessionManager.cookieUpdateInterval) {\r\n                this.automaticSession.renewalDate = now;\r\n                this.setCookie(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Record the current state of the automatic session and store it in our cookie string format\r\n     *  into the browser's local storage. This is used to restore the session data when the cookie\r\n     *  expires.\r\n     */\r\n    public backup() {\r\n        this.setStorage(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n    }\r\n\r\n    /**\r\n     *  Use config.namePrefix + ai_session cookie data or local storage data (when the cookie is unavailable) to\r\n     *  initialize the automatic session.\r\n     */\r\n    private initializeAutomaticSession() {\r\n        var cookie = Util.getCookie(this._logger, this._storageNamePrefix());\r\n        if (cookie && typeof cookie.split === \"function\") {\r\n            this.initializeAutomaticSessionWithData(cookie);\r\n        } else {\r\n            // There's no cookie, but we might have session data in local storage\r\n            // This can happen if the session expired or the user actively deleted the cookie\r\n            // We only want to recover data if the cookie is missing from expiry. We should respect the user's wishes if the cookie was deleted actively.\r\n            // The User class handles this for us and deletes our local storage object if the persistent user cookie was removed.\r\n            var storage = Util.getStorage(this._logger, this._storageNamePrefix());\r\n            if (storage) {\r\n                this.initializeAutomaticSessionWithData(storage);\r\n            }\r\n        }\r\n\r\n        if (!this.automaticSession.id) {\r\n            this.renew();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Extract id, aquisitionDate, and renewalDate from an ai_session payload string and\r\n     *  use this data to initialize automaticSession.\r\n     *\r\n     *  @param {string} sessionData - The string stored in an ai_session cookie or local storage backup\r\n     */\r\n    private initializeAutomaticSessionWithData(sessionData: string) {\r\n        var params = sessionData.split(\"|\");\r\n\r\n        if (params.length > 0) {\r\n            this.automaticSession.id = params[0];\r\n        }\r\n\r\n        try {\r\n            if (params.length > 1) {\r\n                var acq = +params[1];\r\n                this.automaticSession.acquisitionDate = +new Date(acq);\r\n                this.automaticSession.acquisitionDate = this.automaticSession.acquisitionDate > 0 ? this.automaticSession.acquisitionDate : 0;\r\n            }\r\n\r\n            if (params.length > 2) {\r\n                var renewal = +params[2];\r\n                this.automaticSession.renewalDate = +new Date(renewal);\r\n                this.automaticSession.renewalDate = this.automaticSession.renewalDate > 0 ? this.automaticSession.renewalDate : 0;\r\n            }\r\n        } catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL,\r\n\r\n                _InternalMessageId.ErrorParsingAISessionCookie,\r\n                \"Error parsing ai_session cookie, session will be reset: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n\r\n        if (this.automaticSession.renewalDate == 0) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING,\r\n                _InternalMessageId.SessionRenewalDateIsZero,\r\n                \"AI session renewal date is 0, session will be reset.\");\r\n        }\r\n    }\r\n\r\n    private renew() {\r\n        var now = DateTimeUtils.Now();\r\n\r\n        this.automaticSession.id = Util.newId();\r\n        this.automaticSession.acquisitionDate = now;\r\n        this.automaticSession.renewalDate = now;\r\n\r\n        this.setCookie(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n\r\n        // If this browser does not support local storage, fire an internal log to keep track of it at this point\r\n        if (!Util.canUseLocalStorage()) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING,\r\n                _InternalMessageId.BrowserDoesNotSupportLocalStorage,\r\n                \"Browser does not support local storage. Session durations will be inaccurate.\");\r\n        }\r\n    }\r\n\r\n    private setCookie(guid: string, acq: number, renewal: number) {\r\n        // Set cookie to expire after the session expiry time passes or the session renewal deadline, whichever is sooner\r\n        // Expiring the cookie will cause the session to expire even if the user isn't on the page\r\n        var acquisitionExpiry = acq + this.config.sessionExpirationMs();\r\n        var renewalExpiry = renewal + this.config.sessionRenewalMs();\r\n        var cookieExpiry = new Date();\r\n        var cookie = [guid, acq, renewal];\r\n\r\n        if (acquisitionExpiry < renewalExpiry) {\r\n            cookieExpiry.setTime(acquisitionExpiry);\r\n        } else {\r\n            cookieExpiry.setTime(renewalExpiry);\r\n        }\r\n\r\n        var cookieDomnain = this.config.cookieDomain ? this.config.cookieDomain() : null;\r\n\r\n        Util.setCookie(this._logger, this._storageNamePrefix(), cookie.join('|') + ';expires=' + cookieExpiry.toUTCString(), cookieDomnain);\r\n\r\n        this.cookieUpdatedTimestamp = DateTimeUtils.Now();\r\n    }\r\n\r\n    private setStorage(guid: string, acq: number, renewal: number) {\r\n        // Keep data in local storage to retain the last session id, allowing us to cleanly end the session when it expires\r\n        // Browsers that don't support local storage won't be able to end sessions cleanly from the client\r\n        // The server will notice this and end the sessions itself, with loss of accurate session duration\r\n        Util.setStorage(this._logger, this._storageNamePrefix(), [guid, acq, renewal].join('|'));\r\n    }\r\n}"]}