import { StackFrame } from '../Interfaces/Contracts/Generated/StackFrame';
import { ExceptionData } from '../Interfaces/Contracts/Generated/ExceptionData';
import { ExceptionDetails } from '../Interfaces/Contracts/Generated/ExceptionDetails';
import { ISerializable } from '../Interfaces/Telemetry/ISerializable';
import { FieldType } from '../Enums';
import { SeverityLevel } from '../Interfaces/Contracts/Generated/SeverityLevel';
import { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';
import { IExceptionInternal, IExceptionDetailsInternal, IExceptionStackFrameInternal } from '../Interfaces/IExceptionTelemetry';
export declare class Exception extends ExceptionData implements ISerializable {
    static envelopeType: string;
    static dataType: string;
    id?: string;
    problemGroup?: string;
    isManual?: boolean;
    aiDataContract: {
        ver: FieldType;
        exceptions: FieldType;
        severityLevel: FieldType;
        properties: FieldType;
        measurements: FieldType;
    };
    /**
    * Constructs a new instance of the ExceptionTelemetry object
    */
    constructor(logger: IDiagnosticLogger, exception: Error | IExceptionInternal, properties?: {
        [key: string]: any;
    }, measurements?: {
        [key: string]: number;
    }, severityLevel?: SeverityLevel, id?: string);
    static CreateFromInterface(logger: IDiagnosticLogger, exception: IExceptionInternal): Exception;
    toInterface(): IExceptionInternal;
    /**
    * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.
    */
    static CreateSimpleException(message: string, typeName: string, assembly: string, fileName: string, details: string, line: number): Exception;
}
export declare class _ExceptionDetails extends ExceptionDetails implements ISerializable {
    aiDataContract: {
        id: FieldType;
        outerId: FieldType;
        typeName: FieldType;
        message: FieldType;
        hasFullStack: FieldType;
        stack: FieldType;
        parsedStack: FieldType;
    };
    constructor(logger: IDiagnosticLogger, exception: Error | IExceptionDetailsInternal);
    toInterface(): IExceptionDetailsInternal;
    static CreateFromInterface(logger: any, exception: IExceptionDetailsInternal): _ExceptionDetails;
    private static parseStack(stack);
}
export declare class _StackFrame extends StackFrame implements ISerializable {
    static regex: RegExp;
    static baseSize: number;
    sizeInBytes: number;
    aiDataContract: {
        level: FieldType;
        method: FieldType;
        assembly: FieldType;
        fileName: FieldType;
        line: FieldType;
    };
    constructor(sourceFrame: string | IExceptionStackFrameInternal, level: number);
    static CreateFromInterface(frame: IExceptionStackFrameInternal): _StackFrame;
    toInterface(): {
        level: number;
        method: string;
        assembly: string;
        fileName: string;
        line: number;
    };
}
