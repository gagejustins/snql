{"version":3,"file":"DataSanitizer.js","sourceRoot":"","sources":["../../../src/Telemetry/Common/DataSanitizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { IDiagnosticLogger, LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport class DataSanitizer {\r\n\r\n    /**\r\n    * Max length allowed for custom names.\r\n    */\r\n    public static MAX_NAME_LENGTH = 150;\r\n\r\n    /**\r\n     * Max length allowed for Id field in page views.\r\n     */\r\n    public static MAX_ID_LENGTH = 128;\r\n\r\n    /**\r\n     * Max length allowed for custom values.\r\n     */\r\n    public static MAX_PROPERTY_LENGTH = 8192;\r\n\r\n    /**\r\n     * Max length allowed for names\r\n     */\r\n    public static MAX_STRING_LENGTH = 1024;\r\n\r\n    /**\r\n     * Max length allowed for url.\r\n     */\r\n    public static MAX_URL_LENGTH = 2048;\r\n\r\n    /**\r\n     * Max length allowed for messages.\r\n     */\r\n    public static MAX_MESSAGE_LENGTH = 32768;\r\n\r\n    /**\r\n     * Max length allowed for exceptions.\r\n     */\r\n    public static MAX_EXCEPTION_LENGTH = 32768;\r\n\r\n    public static sanitizeKeyAndAddUniqueness(logger: IDiagnosticLogger, key, map) {\r\n        var origLength = key.length;\r\n        var field = DataSanitizer.sanitizeKey(logger, key);\r\n\r\n        // validation truncated the length.  We need to add uniqueness\r\n        if (field.length !== origLength) {\r\n            var i = 0;\r\n            var uniqueField = field;\r\n            while (map[uniqueField] !== undefined) {\r\n                i++;\r\n                uniqueField = field.substring(0, DataSanitizer.MAX_NAME_LENGTH - 3) + DataSanitizer.padNumber(i);\r\n            }\r\n            field = uniqueField;\r\n        }\r\n        return field;\r\n    }\r\n\r\n    public static sanitizeKey(logger: IDiagnosticLogger, name) {\r\n        let nameTrunc: String;\r\n        if (name) {\r\n            // Remove any leading or trailing whitepace\r\n            name = DataSanitizer.trim(name.toString());\r\n\r\n            // truncate the string to 150 chars\r\n            if (name.length > DataSanitizer.MAX_NAME_LENGTH) {\r\n                nameTrunc = name.substring(0, DataSanitizer.MAX_NAME_LENGTH);\r\n                logger.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.NameTooLong,\r\n                    \"name is too long.  It has been truncated to \" + DataSanitizer.MAX_NAME_LENGTH + \" characters.\",\r\n                    { name: name }, true);\r\n            }\r\n        }\r\n\r\n        return nameTrunc || name;\r\n    }\r\n\r\n    public static sanitizeString(logger: IDiagnosticLogger, value: any, maxLength: number = DataSanitizer.MAX_STRING_LENGTH) {\r\n        let valueTrunc : String;\r\n        if (value) {\r\n            maxLength = maxLength ? maxLength : DataSanitizer.MAX_STRING_LENGTH; // in case default parameters dont work\r\n            value = DataSanitizer.trim(value);\r\n            if (value.toString().length > maxLength) {\r\n                valueTrunc = value.toString().substring(0, maxLength);\r\n                logger.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.StringValueTooLong,\r\n                    \"string value is too long. It has been truncated to \" + maxLength + \" characters.\",\r\n                    { value: value }, true);\r\n            }\r\n        }\r\n\r\n        return valueTrunc || value;\r\n    }\r\n\r\n    public static sanitizeUrl(logger: IDiagnosticLogger, url) {\r\n        return DataSanitizer.sanitizeInput(logger, url, DataSanitizer.MAX_URL_LENGTH, _InternalMessageId.UrlTooLong);\r\n    }\r\n\r\n    public static sanitizeMessage(logger: IDiagnosticLogger, message) {\r\n        let messageTrunc : String;\r\n        if (message) {\r\n            if (message.length > DataSanitizer.MAX_MESSAGE_LENGTH) {\r\n                messageTrunc = message.substring(0, DataSanitizer.MAX_MESSAGE_LENGTH);\r\n                logger.throwInternal(\r\n                    LoggingSeverity.WARNING, _InternalMessageId.MessageTruncated,\r\n                    \"message is too long, it has been truncated to \" + DataSanitizer.MAX_MESSAGE_LENGTH + \" characters.\",\r\n                    { message: message },\r\n                    true);\r\n            }\r\n        }\r\n\r\n        return messageTrunc || message;\r\n    }\r\n\r\n    public static sanitizeException(logger: IDiagnosticLogger, exception) {\r\n        let exceptionTrunc : String;\r\n        if (exception) {\r\n            if (exception.length > DataSanitizer.MAX_EXCEPTION_LENGTH) {\r\n                exceptionTrunc = exception.substring(0, DataSanitizer.MAX_EXCEPTION_LENGTH);\r\n                logger.throwInternal(\r\n                    LoggingSeverity.WARNING, _InternalMessageId.ExceptionTruncated, \"exception is too long, it has been truncated to \" + DataSanitizer.MAX_EXCEPTION_LENGTH + \" characters.\",\r\n                    { exception: exception }, true);\r\n            }\r\n        }\r\n\r\n        return exceptionTrunc || exception;\r\n    }\r\n\r\n    public static sanitizeProperties(logger: IDiagnosticLogger, properties) {\r\n        if (properties) {\r\n            var tempProps = {};\r\n            for (var prop in properties) {\r\n                var value = properties[prop];\r\n                if (typeof value === \"object\" && typeof JSON !== \"undefined\") {\r\n                    // Stringify any part C properties\r\n                    try {\r\n                        value = JSON.stringify(value);\r\n                    } catch (e) {\r\n                        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, \"custom property is not valid\", { exception: e}, true);\r\n                    }\r\n                }\r\n                value = DataSanitizer.sanitizeString(logger, value, DataSanitizer.MAX_PROPERTY_LENGTH);\r\n                prop = DataSanitizer.sanitizeKeyAndAddUniqueness(logger, prop, tempProps);\r\n                tempProps[prop] = value;\r\n            }\r\n            properties = tempProps;\r\n        }\r\n\r\n        return properties;\r\n    }\r\n\r\n    public static sanitizeMeasurements(logger: IDiagnosticLogger, measurements) {\r\n        if (measurements) {\r\n            var tempMeasurements = {};\r\n            for (var measure in measurements) {\r\n                var value = measurements[measure];\r\n                measure = DataSanitizer.sanitizeKeyAndAddUniqueness(logger, measure, tempMeasurements);\r\n                tempMeasurements[measure] = value;\r\n            }\r\n            measurements = tempMeasurements;\r\n        }\r\n\r\n        return measurements;\r\n    }\r\n\r\n    public static sanitizeId(logger: IDiagnosticLogger, id: string): string {\r\n        return id ? DataSanitizer.sanitizeInput(logger, id, DataSanitizer.MAX_ID_LENGTH, _InternalMessageId.IdTooLong).toString() : id;\r\n    }\r\n\r\n    public static sanitizeInput(logger: IDiagnosticLogger, input: any, maxLength: number, _msgId: _InternalMessageId) {\r\n        let inputTrunc : String;\r\n        if (input) {\r\n            input = DataSanitizer.trim(input);\r\n            if (input.length > maxLength) {\r\n                inputTrunc = input.substring(0, maxLength);\r\n                logger.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _msgId,\r\n                    \"input is too long, it has been truncated to \" + maxLength + \" characters.\",\r\n                    { data: input },\r\n                    true);\r\n            }\r\n        }\r\n\r\n        return inputTrunc || input;\r\n    }\r\n\r\n    public static padNumber(num) {\r\n        var s = \"00\" + num;\r\n        return s.substr(s.length - 3);\r\n    }\r\n\r\n    /**\r\n     * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n     */\r\n    public static trim(str: any): string {\r\n        if (typeof str !== \"string\") return str;\r\n        return str.replace(/^\\s+|\\s+$/g, \"\");\r\n    }\r\n}"]}