// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import * as tslib_1 from "tslib";
import { DataSanitizer } from './Common/DataSanitizer';
import { FieldType } from '../Enums';
import { Util } from '../Util';
import { AjaxHelper } from '../Util';
import { RemoteDependencyData as GeneratedRemoteDependencyData } from '../Interfaces/Contracts/Generated/RemoteDependencyData';
var RemoteDependencyData = /** @class */ (function (_super) {
    tslib_1.__extends(RemoteDependencyData, _super);
    /**
     * Constructs a new instance of the RemoteDependencyData object
     */
    function RemoteDependencyData(logger, id, absoluteUrl, commandName, value, success, resultCode, method, requestAPI, properties, measurements) {
        if (requestAPI === void 0) { requestAPI = "Ajax"; }
        var _this = _super.call(this) || this;
        _this.aiDataContract = {
            id: FieldType.Required,
            ver: FieldType.Required,
            name: FieldType.Default,
            resultCode: FieldType.Default,
            duration: FieldType.Default,
            success: FieldType.Default,
            data: FieldType.Default,
            target: FieldType.Default,
            type: FieldType.Default,
            properties: FieldType.Default,
            measurements: FieldType.Default,
            kind: FieldType.Default,
            value: FieldType.Default,
            count: FieldType.Default,
            min: FieldType.Default,
            max: FieldType.Default,
            stdDev: FieldType.Default,
            dependencyKind: FieldType.Default,
            dependencySource: FieldType.Default,
            commandName: FieldType.Default,
            dependencyTypeName: FieldType.Default,
        };
        _this.id = id;
        _this.duration = Util.msToTimeSpan(value);
        _this.success = success;
        _this.resultCode = resultCode + "";
        _this.type = DataSanitizer.sanitizeString(logger, requestAPI);
        var dependencyFields = AjaxHelper.ParseDependencyPath(logger, absoluteUrl, method, commandName);
        _this.data = DataSanitizer.sanitizeUrl(logger, commandName) || dependencyFields.data; // get a value from hosturl if commandName not available
        _this.target = DataSanitizer.sanitizeString(logger, dependencyFields.target);
        _this.name = DataSanitizer.sanitizeString(logger, dependencyFields.name);
        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);
        _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);
        return _this;
    }
    RemoteDependencyData.envelopeType = "Microsoft.ApplicationInsights.{0}.RemoteDependency";
    RemoteDependencyData.dataType = "RemoteDependencyData";
    return RemoteDependencyData;
}(GeneratedRemoteDependencyData));
export { RemoteDependencyData };
//# sourceMappingURL=RemoteDependencyData.js.map