// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';
var DataSanitizer = /** @class */ (function () {
    function DataSanitizer() {
    }
    DataSanitizer.sanitizeKeyAndAddUniqueness = function (logger, key, map) {
        var origLength = key.length;
        var field = DataSanitizer.sanitizeKey(logger, key);
        // validation truncated the length.  We need to add uniqueness
        if (field.length !== origLength) {
            var i = 0;
            var uniqueField = field;
            while (map[uniqueField] !== undefined) {
                i++;
                uniqueField = field.substring(0, DataSanitizer.MAX_NAME_LENGTH - 3) + DataSanitizer.padNumber(i);
            }
            field = uniqueField;
        }
        return field;
    };
    DataSanitizer.sanitizeKey = function (logger, name) {
        var nameTrunc;
        if (name) {
            // Remove any leading or trailing whitepace
            name = DataSanitizer.trim(name.toString());
            // truncate the string to 150 chars
            if (name.length > DataSanitizer.MAX_NAME_LENGTH) {
                nameTrunc = name.substring(0, DataSanitizer.MAX_NAME_LENGTH);
                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.NameTooLong, "name is too long.  It has been truncated to " + DataSanitizer.MAX_NAME_LENGTH + " characters.", { name: name }, true);
            }
        }
        return nameTrunc || name;
    };
    DataSanitizer.sanitizeString = function (logger, value, maxLength) {
        if (maxLength === void 0) { maxLength = DataSanitizer.MAX_STRING_LENGTH; }
        var valueTrunc;
        if (value) {
            maxLength = maxLength ? maxLength : DataSanitizer.MAX_STRING_LENGTH; // in case default parameters dont work
            value = DataSanitizer.trim(value);
            if (value.toString().length > maxLength) {
                valueTrunc = value.toString().substring(0, maxLength);
                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.StringValueTooLong, "string value is too long. It has been truncated to " + maxLength + " characters.", { value: value }, true);
            }
        }
        return valueTrunc || value;
    };
    DataSanitizer.sanitizeUrl = function (logger, url) {
        return DataSanitizer.sanitizeInput(logger, url, DataSanitizer.MAX_URL_LENGTH, _InternalMessageId.UrlTooLong);
    };
    DataSanitizer.sanitizeMessage = function (logger, message) {
        var messageTrunc;
        if (message) {
            if (message.length > DataSanitizer.MAX_MESSAGE_LENGTH) {
                messageTrunc = message.substring(0, DataSanitizer.MAX_MESSAGE_LENGTH);
                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.MessageTruncated, "message is too long, it has been truncated to " + DataSanitizer.MAX_MESSAGE_LENGTH + " characters.", { message: message }, true);
            }
        }
        return messageTrunc || message;
    };
    DataSanitizer.sanitizeException = function (logger, exception) {
        var exceptionTrunc;
        if (exception) {
            if (exception.length > DataSanitizer.MAX_EXCEPTION_LENGTH) {
                exceptionTrunc = exception.substring(0, DataSanitizer.MAX_EXCEPTION_LENGTH);
                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ExceptionTruncated, "exception is too long, it has been truncated to " + DataSanitizer.MAX_EXCEPTION_LENGTH + " characters.", { exception: exception }, true);
            }
        }
        return exceptionTrunc || exception;
    };
    DataSanitizer.sanitizeProperties = function (logger, properties) {
        if (properties) {
            var tempProps = {};
            for (var prop in properties) {
                var value = properties[prop];
                if (typeof value === "object" && typeof JSON !== "undefined") {
                    // Stringify any part C properties
                    try {
                        value = JSON.stringify(value);
                    }
                    catch (e) {
                        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, "custom property is not valid", { exception: e }, true);
                    }
                }
                value = DataSanitizer.sanitizeString(logger, value, DataSanitizer.MAX_PROPERTY_LENGTH);
                prop = DataSanitizer.sanitizeKeyAndAddUniqueness(logger, prop, tempProps);
                tempProps[prop] = value;
            }
            properties = tempProps;
        }
        return properties;
    };
    DataSanitizer.sanitizeMeasurements = function (logger, measurements) {
        if (measurements) {
            var tempMeasurements = {};
            for (var measure in measurements) {
                var value = measurements[measure];
                measure = DataSanitizer.sanitizeKeyAndAddUniqueness(logger, measure, tempMeasurements);
                tempMeasurements[measure] = value;
            }
            measurements = tempMeasurements;
        }
        return measurements;
    };
    DataSanitizer.sanitizeId = function (logger, id) {
        return id ? DataSanitizer.sanitizeInput(logger, id, DataSanitizer.MAX_ID_LENGTH, _InternalMessageId.IdTooLong).toString() : id;
    };
    DataSanitizer.sanitizeInput = function (logger, input, maxLength, _msgId) {
        var inputTrunc;
        if (input) {
            input = DataSanitizer.trim(input);
            if (input.length > maxLength) {
                inputTrunc = input.substring(0, maxLength);
                logger.throwInternal(LoggingSeverity.WARNING, _msgId, "input is too long, it has been truncated to " + maxLength + " characters.", { data: input }, true);
            }
        }
        return inputTrunc || input;
    };
    DataSanitizer.padNumber = function (num) {
        var s = "00" + num;
        return s.substr(s.length - 3);
    };
    /**
     * helper method to trim strings (IE8 does not implement String.prototype.trim)
     */
    DataSanitizer.trim = function (str) {
        if (typeof str !== "string")
            return str;
        return str.replace(/^\s+|\s+$/g, "");
    };
    /**
    * Max length allowed for custom names.
    */
    DataSanitizer.MAX_NAME_LENGTH = 150;
    /**
     * Max length allowed for Id field in page views.
     */
    DataSanitizer.MAX_ID_LENGTH = 128;
    /**
     * Max length allowed for custom values.
     */
    DataSanitizer.MAX_PROPERTY_LENGTH = 8192;
    /**
     * Max length allowed for names
     */
    DataSanitizer.MAX_STRING_LENGTH = 1024;
    /**
     * Max length allowed for url.
     */
    DataSanitizer.MAX_URL_LENGTH = 2048;
    /**
     * Max length allowed for messages.
     */
    DataSanitizer.MAX_MESSAGE_LENGTH = 32768;
    /**
     * Max length allowed for exceptions.
     */
    DataSanitizer.MAX_EXCEPTION_LENGTH = 32768;
    return DataSanitizer;
}());
export { DataSanitizer };
//# sourceMappingURL=DataSanitizer.js.map