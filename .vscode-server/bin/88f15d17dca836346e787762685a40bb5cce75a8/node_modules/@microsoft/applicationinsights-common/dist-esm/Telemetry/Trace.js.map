{"version":3,"file":"Trace.js","sourceRoot":"","sources":["../../src/Telemetry/Trace.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,OAAO,EAAE,WAAW,EAAE,MAAM,+CAA+C,CAAC;AAE5E,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACvD,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAErC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAG/B;IAA2B,iCAAW;IAYlC;;OAEG;IACH,eAAY,MAAyB,EAAE,OAAe,EAAE,aAA6B,EAAE,UAAgB;QAAvG,YACI,iBAAO,SAQV;QAnBM,oBAAc,GAAG;YACpB,GAAG,EAAE,SAAS,CAAC,QAAQ;YACvB,OAAO,EAAE,SAAS,CAAC,QAAQ;YAC3B,aAAa,EAAE,SAAS,CAAC,OAAO;YAChC,UAAU,EAAE,SAAS,CAAC,OAAO;SAChC,CAAC;QAOE,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC;QACvC,KAAI,CAAC,OAAO,GAAG,aAAa,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC9D,KAAI,CAAC,UAAU,GAAG,aAAa,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAEvE,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YAChB,KAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACvC,CAAC;;IACL,CAAC;IAtBa,kBAAY,GAAG,2CAA2C,CAAC;IAC3D,cAAQ,GAAG,aAAa,CAAC;IAsB3C,YAAC;CAAA,AAzBD,CAA2B,WAAW,GAyBrC;SAzBY,KAAK","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { MessageData } from '../Interfaces/Contracts/Generated/MessageData';\r\nimport { ISerializable } from '../Interfaces/Telemetry/ISerializable';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { SeverityLevel } from '../Interfaces/Contracts/Generated/SeverityLevel';\r\nimport { Util } from '../Util';\r\nimport { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport class Trace extends MessageData implements ISerializable {\r\n\r\n    public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Message\";\r\n    public static dataType = \"MessageData\";\r\n\r\n    public aiDataContract = {\r\n        ver: FieldType.Required,\r\n        message: FieldType.Required,\r\n        severityLevel: FieldType.Default,\r\n        properties: FieldType.Default\r\n    };\r\n\r\n    /**\r\n     * Constructs a new instance of the TraceTelemetry object\r\n     */\r\n    constructor(logger: IDiagnosticLogger, message: string, severityLevel?: SeverityLevel, properties?: any) {\r\n        super();\r\n        message = message || Util.NotSpecified;\r\n        this.message = DataSanitizer.sanitizeMessage(logger, message);\r\n        this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n\r\n        if (severityLevel) {\r\n            this.severityLevel = severityLevel;\r\n        }\r\n    }\r\n}\r\n"]}