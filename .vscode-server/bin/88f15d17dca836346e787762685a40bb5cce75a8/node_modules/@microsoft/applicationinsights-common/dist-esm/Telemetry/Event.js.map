{"version":3,"file":"Event.js","sourceRoot":"","sources":["../../src/Telemetry/Event.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;AAGlC,OAAO,EAAE,SAAS,EAAE,MAAM,6CAA6C,CAAC;AAExE,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACvD,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AACrC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAE/B;IAA2B,iCAAS;IAYhC;;OAEG;IACH,eAAY,MAAyB,EAAE,IAAY,EAAE,UAAgB,EAAE,YAAkB;QAAzF,YAEI,iBAAO,SAKV;QAjBM,oBAAc,GAAG;YACpB,GAAG,EAAE,SAAS,CAAC,QAAQ;YACvB,IAAI,EAAE,SAAS,CAAC,QAAQ;YACxB,UAAU,EAAE,SAAS,CAAC,OAAO;YAC7B,YAAY,EAAE,SAAS,CAAC,OAAO;SAClC,CAAA;QASG,KAAI,CAAC,IAAI,GAAG,aAAa,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC;QAC5E,KAAI,CAAC,UAAU,GAAG,aAAa,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QACvE,KAAI,CAAC,YAAY,GAAG,aAAa,CAAC,oBAAoB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;;IACjF,CAAC;IApBa,kBAAY,GAAG,yCAAyC,CAAC;IACzD,cAAQ,GAAG,WAAW,CAAC;IAoBzC,YAAC;CAAA,AAvBD,CAA2B,SAAS,GAuBnC;SAvBY,KAAK","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\nimport { EventData } from '../Interfaces/Contracts/Generated/EventData';\r\nimport { ISerializable } from '../Interfaces/Telemetry/ISerializable';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\n\r\nexport class Event extends EventData implements ISerializable {\r\n\r\n    public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Event\";\r\n    public static dataType = \"EventData\";\r\n\r\n    public aiDataContract = {\r\n        ver: FieldType.Required,\r\n        name: FieldType.Required,\r\n        properties: FieldType.Default,\r\n        measurements: FieldType.Default\r\n    }\r\n\r\n    /**\r\n     * Constructs a new instance of the EventTelemetry object\r\n     */\r\n    constructor(logger: IDiagnosticLogger, name: string, properties?: any, measurements?: any) {\r\n\r\n        super();\r\n\r\n        this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n    }\r\n}\r\n"]}