// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import * as tslib_1 from "tslib";
import { MetricData } from '../Interfaces/Contracts/Generated/MetricData';
import { DataSanitizer } from './Common/DataSanitizer';
import { FieldType } from '../Enums';
import { DataPoint } from './Common/DataPoint';
import { Util } from '../Util';
var Metric = /** @class */ (function (_super) {
    tslib_1.__extends(Metric, _super);
    /**
     * Constructs a new instance of the MetricTelemetry object
     */
    function Metric(logger, name, value, count, min, max, properties) {
        var _this = _super.call(this) || this;
        _this.aiDataContract = {
            ver: FieldType.Required,
            metrics: FieldType.Required,
            properties: FieldType.Default
        };
        var dataPoint = new DataPoint();
        dataPoint.count = count > 0 ? count : undefined;
        dataPoint.max = isNaN(max) || max === null ? undefined : max;
        dataPoint.min = isNaN(min) || min === null ? undefined : min;
        dataPoint.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;
        dataPoint.value = value;
        _this.metrics = [dataPoint];
        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);
        return _this;
    }
    Metric.envelopeType = "Microsoft.ApplicationInsights.{0}.Metric";
    Metric.dataType = "MetricData";
    return Metric;
}(MetricData));
export { Metric };
//# sourceMappingURL=Metric.js.map