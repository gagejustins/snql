{"version":3,"file":"Exception.js","sourceRoot":"","sources":["../../src/Telemetry/Exception.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { StackFrame } from '../Interfaces/Contracts/Generated/StackFrame';\r\nimport { ExceptionData } from '../Interfaces/Contracts/Generated/ExceptionData';\r\nimport { ExceptionDetails } from '../Interfaces/Contracts/Generated/ExceptionDetails';\r\nimport { ISerializable } from '../Interfaces/Telemetry/ISerializable';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { SeverityLevel } from '../Interfaces/Contracts/Generated/SeverityLevel';\r\nimport { Util } from '../Util';\r\nimport { IDiagnosticLogger, CoreUtils } from '@microsoft/applicationinsights-core-js';\r\nimport { IExceptionInternal, IExceptionTelemetry, IExceptionDetailsInternal, IExceptionStackFrameInternal } from '../Interfaces/IExceptionTelemetry';\r\n\r\nexport class Exception extends ExceptionData implements ISerializable {\r\n\r\n    public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Exception\";\r\n    public static dataType = \"ExceptionData\";\r\n\r\n    public id?: string;\r\n    public problemGroup?: string;\r\n    public isManual?: boolean;\r\n\r\n\r\n    public aiDataContract = {\r\n        ver: FieldType.Required,\r\n        exceptions: FieldType.Required,\r\n        severityLevel: FieldType.Default,\r\n        properties: FieldType.Default,\r\n        measurements: FieldType.Default\r\n    }\r\n\r\n    /**\r\n    * Constructs a new instance of the ExceptionTelemetry object\r\n    */\r\n    constructor(logger: IDiagnosticLogger, exception: Error | IExceptionInternal, properties?: {[key: string]: any}, measurements?: {[key: string]: number}, severityLevel?: SeverityLevel, id?: string) {\r\n        super();\r\n\r\n        if (exception instanceof Error) {\r\n            this.exceptions = [new _ExceptionDetails(logger, exception)];\r\n            this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n            this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n            if (severityLevel) this.severityLevel = severityLevel;\r\n            if (id) this.id = id;\r\n        } else {\r\n            this.exceptions = exception.exceptions;\r\n            this.properties = exception.properties;\r\n            this.measurements = exception.measurements;\r\n            if (exception.severityLevel) this.severityLevel = exception.severityLevel;\r\n            if (exception.id) this.id = exception.id;\r\n            if (exception.problemGroup) this.problemGroup = exception.problemGroup;\r\n\r\n            // bool/int types, use isNullOrUndefined\r\n            if (!CoreUtils.isNullOrUndefined(exception.ver)) this.ver = exception.ver;\r\n            if (!CoreUtils.isNullOrUndefined(exception.isManual)) this.isManual = exception.isManual;\r\n        }\r\n\r\n    }\r\n\r\n    public static CreateFromInterface(logger: IDiagnosticLogger, exception: IExceptionInternal): Exception {\r\n        const exceptions: _ExceptionDetails[] = exception.exceptions\r\n            && exception.exceptions.map((ex: IExceptionDetailsInternal) => _ExceptionDetails.CreateFromInterface(logger, ex));\r\n        const exceptionData = new Exception(logger, {...exception, exceptions});\r\n        return exceptionData;\r\n    }\r\n\r\n    public toInterface(): IExceptionInternal {\r\n        const { exceptions, properties, measurements, severityLevel, ver, problemGroup, id, isManual } = this;\r\n\r\n        const exceptionDetailsInterface = exceptions instanceof Array\r\n            && exceptions.map((exception: _ExceptionDetails) => exception.toInterface())\r\n            || undefined;\r\n\r\n        return <IExceptionInternal>{\r\n            ver: ver,\r\n            exceptions: exceptionDetailsInterface,\r\n            severityLevel,\r\n            properties,\r\n            measurements,\r\n            problemGroup,\r\n            id,\r\n            isManual\r\n        };\r\n    }\r\n\r\n    /**\r\n    * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.\r\n    */\r\n    public static CreateSimpleException(message: string, typeName: string, assembly: string, fileName: string,\r\n        details: string, line: number): Exception {\r\n\r\n        return <Exception>{\r\n            exceptions: [\r\n                <ExceptionDetails>{\r\n                    hasFullStack: true,\r\n                    message: message,\r\n                    stack: details,\r\n                    typeName: typeName\r\n                }\r\n            ]\r\n        };\r\n    }\r\n}\r\n\r\nexport class _ExceptionDetails extends ExceptionDetails implements ISerializable {\r\n\r\n    public aiDataContract = {\r\n        id: FieldType.Default,\r\n        outerId: FieldType.Default,\r\n        typeName: FieldType.Required,\r\n        message: FieldType.Required,\r\n        hasFullStack: FieldType.Default,\r\n        stack: FieldType.Default,\r\n        parsedStack: FieldType.Array\r\n    };\r\n\r\n    constructor(logger: IDiagnosticLogger, exception: Error | IExceptionDetailsInternal) {\r\n        super();\r\n\r\n        if (exception instanceof Error) {\r\n            this.typeName = DataSanitizer.sanitizeString(logger, exception.name) || Util.NotSpecified;\r\n            this.message = DataSanitizer.sanitizeMessage(logger, exception.message) || Util.NotSpecified;\r\n            var stack = exception.stack;\r\n            this.parsedStack = _ExceptionDetails.parseStack(stack);\r\n            this.stack = DataSanitizer.sanitizeException(logger, stack);\r\n            this.hasFullStack = Util.isArray(this.parsedStack) && this.parsedStack.length > 0;\r\n        } else {\r\n            this.typeName = exception.typeName;\r\n            this.message = exception.message;\r\n            this.stack = exception.stack;\r\n            this.parsedStack = exception.parsedStack\r\n            this.hasFullStack = exception.hasFullStack\r\n        }\r\n    }\r\n\r\n    public toInterface(): IExceptionDetailsInternal {\r\n        const parsedStack = this.parsedStack instanceof Array\r\n            && this.parsedStack.map((frame: _StackFrame) => frame.toInterface());\r\n\r\n        const exceptionDetailsInterface: IExceptionDetailsInternal = {\r\n            id: this.id,\r\n            outerId: this.outerId,\r\n            typeName: this.typeName,\r\n            message: this.message,\r\n            hasFullStack: this.hasFullStack,\r\n            stack: this.stack,\r\n            parsedStack: parsedStack || undefined\r\n        };\r\n\r\n        return exceptionDetailsInterface;\r\n    }\r\n\r\n    public static CreateFromInterface(logger, exception: IExceptionDetailsInternal): _ExceptionDetails {\r\n        const parsedStack = (exception.parsedStack instanceof Array\r\n            && exception.parsedStack.map(frame => _StackFrame.CreateFromInterface(frame)))\r\n            || exception.parsedStack;\r\n\r\n        const exceptionDetails = new _ExceptionDetails(logger, {...exception, parsedStack: parsedStack});\r\n\r\n        return exceptionDetails;\r\n    }\r\n\r\n    private static parseStack(stack): _StackFrame[] {\r\n        var parsedStack: _StackFrame[] = undefined;\r\n        if (typeof stack === \"string\") {\r\n            var frames = stack.split('\\n');\r\n            parsedStack = [];\r\n            var level = 0;\r\n\r\n            var totalSizeInBytes = 0;\r\n            for (var i = 0; i <= frames.length; i++) {\r\n                var frame = frames[i];\r\n                if (_StackFrame.regex.test(frame)) {\r\n                    var parsedFrame = new _StackFrame(frames[i], level++);\r\n                    totalSizeInBytes += parsedFrame.sizeInBytes;\r\n                    parsedStack.push(parsedFrame);\r\n                }\r\n            }\r\n\r\n            // DP Constraint - exception parsed stack must be < 32KB\r\n            // remove frames from the middle to meet the threshold\r\n            var exceptionParsedStackThreshold = 32 * 1024;\r\n            if (totalSizeInBytes > exceptionParsedStackThreshold) {\r\n                var left = 0;\r\n                var right = parsedStack.length - 1;\r\n                var size = 0;\r\n                var acceptedLeft = left;\r\n                var acceptedRight = right;\r\n\r\n                while (left < right) {\r\n                    // check size\r\n                    var lSize = parsedStack[left].sizeInBytes;\r\n                    var rSize = parsedStack[right].sizeInBytes;\r\n                    size += lSize + rSize;\r\n\r\n                    if (size > exceptionParsedStackThreshold) {\r\n\r\n                        // remove extra frames from the middle\r\n                        var howMany = acceptedRight - acceptedLeft + 1;\r\n                        parsedStack.splice(acceptedLeft, howMany);\r\n                        break;\r\n                    }\r\n\r\n                    // update pointers\r\n                    acceptedLeft = left;\r\n                    acceptedRight = right;\r\n\r\n                    left++;\r\n                    right--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return parsedStack;\r\n    }\r\n}\r\n\r\nexport class _StackFrame extends StackFrame implements ISerializable {\r\n\r\n    // regex to match stack frames from ie/chrome/ff\r\n    // methodName=$2, fileName=$4, lineNo=$5, column=$6\r\n    public static regex = /^([\\s]+at)?(.*?)(\\@|\\s\\(|\\s)([^\\(\\@\\n]+):([0-9]+):([0-9]+)(\\)?)$/;\r\n    public static baseSize = 58; //'{\"method\":\"\",\"level\":,\"assembly\":\"\",\"fileName\":\"\",\"line\":}'.length\r\n    public sizeInBytes = 0;\r\n\r\n    public aiDataContract = {\r\n        level: FieldType.Required,\r\n        method: FieldType.Required,\r\n        assembly: FieldType.Default,\r\n        fileName: FieldType.Default,\r\n        line: FieldType.Default,\r\n    };\r\n\r\n    constructor(sourceFrame: string | IExceptionStackFrameInternal, level: number) {\r\n        super();\r\n\r\n        if (typeof sourceFrame === \"string\") {\r\n            const frame: string = sourceFrame;\r\n            this.level = level;\r\n            this.method = \"<no_method>\";\r\n            this.assembly = Util.trim(frame);\r\n            this.fileName = \"\";\r\n            this.line = 0;\r\n            var matches = frame.match(_StackFrame.regex);\r\n            if (matches && matches.length >= 5) {\r\n                this.method = Util.trim(matches[2]) || this.method;\r\n                this.fileName = Util.trim(matches[4]);\r\n                this.line = parseInt(matches[5]) || 0;\r\n            }\r\n        } else {\r\n            this.level = sourceFrame.level;\r\n            this.method = sourceFrame.method;\r\n            this.assembly = sourceFrame.assembly;\r\n            this.fileName = sourceFrame.fileName;\r\n            this.line = sourceFrame.line;\r\n            this.sizeInBytes = 0;\r\n        }\r\n\r\n        this.sizeInBytes += this.method.length;\r\n        this.sizeInBytes += this.fileName.length;\r\n        this.sizeInBytes += this.assembly.length;\r\n\r\n        // todo: these might need to be removed depending on how the back-end settles on their size calculation\r\n        this.sizeInBytes += _StackFrame.baseSize;\r\n        this.sizeInBytes += this.level.toString().length;\r\n        this.sizeInBytes += this.line.toString().length;\r\n    }\r\n\r\n    public static CreateFromInterface(frame: IExceptionStackFrameInternal) {\r\n        return new _StackFrame(frame, null /* level is available in frame interface */);\r\n    }\r\n\r\n    public toInterface() {\r\n        return {\r\n            level: this.level,\r\n            method: this.method,\r\n            assembly: this.assembly,\r\n            fileName: this.fileName,\r\n            line: this.line\r\n        };\r\n    }\r\n}\r\n"]}