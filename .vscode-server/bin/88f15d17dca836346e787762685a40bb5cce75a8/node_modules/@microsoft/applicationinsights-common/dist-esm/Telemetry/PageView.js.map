{"version":3,"file":"PageView.js","sourceRoot":"","sources":["../../src/Telemetry/PageView.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,OAAO,EAAE,YAAY,EAAE,MAAM,gDAAgD,CAAC;AAC9E,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AAEvD,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AACrC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAG/B;IAA8B,oCAAY;IAetC;;OAEG;IACH,kBAAY,MAAyB,EAAE,IAAa,EAAE,GAAY,EAAE,UAAmB,EAAE,UAAoC,EAAE,YAAsC,EAAE,EAAW;QAAlL,YACI,iBAAO,SAUV;QAxBM,oBAAc,GAAG;YACpB,GAAG,EAAE,SAAS,CAAC,QAAQ;YACvB,IAAI,EAAE,SAAS,CAAC,OAAO;YACvB,GAAG,EAAE,SAAS,CAAC,OAAO;YACtB,QAAQ,EAAE,SAAS,CAAC,OAAO;YAC3B,UAAU,EAAE,SAAS,CAAC,OAAO;YAC7B,YAAY,EAAE,SAAS,CAAC,OAAO;YAC/B,EAAE,EAAE,SAAS,CAAC,OAAO;SACxB,CAAA;QAQG,KAAI,CAAC,EAAE,GAAG,aAAa,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC/C,KAAI,CAAC,GAAG,GAAG,aAAa,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAClD,KAAI,CAAC,IAAI,GAAG,aAAa,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC;QAC5E,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACrB,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAClD,CAAC;QACD,KAAI,CAAC,UAAU,GAAG,aAAa,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QACvE,KAAI,CAAC,YAAY,GAAG,aAAa,CAAC,oBAAoB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;;IACjF,CAAC;IA3Ba,qBAAY,GAAG,4CAA4C,CAAC;IAC5D,iBAAQ,GAAG,cAAc,CAAC;IA2B5C,eAAC;CAAA,AA9BD,CAA8B,YAAY,GA8BzC;SA9BY,QAAQ","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { PageViewData } from '../Interfaces/Contracts/Generated/PageViewData';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { ISerializable } from '../Interfaces/Telemetry/ISerializable';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nimport { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport class PageView extends PageViewData implements ISerializable {\r\n\r\n    public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Pageview\";\r\n    public static dataType = \"PageviewData\";\r\n\r\n    public aiDataContract = {\r\n        ver: FieldType.Required,\r\n        name: FieldType.Default,\r\n        url: FieldType.Default,\r\n        duration: FieldType.Default,\r\n        properties: FieldType.Default,\r\n        measurements: FieldType.Default,\r\n        id: FieldType.Default\r\n    }\r\n\r\n    /**\r\n     * Constructs a new instance of the PageEventTelemetry object\r\n     */\r\n    constructor(logger: IDiagnosticLogger, name?: string, url?: string, durationMs?: number, properties?: {[key: string]: string}, measurements?: {[key: string]: number}, id?: string) {\r\n        super();\r\n\r\n        this.id = DataSanitizer.sanitizeId(logger, id);\r\n        this.url = DataSanitizer.sanitizeUrl(logger, url);\r\n        this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        if (!isNaN(durationMs)) {\r\n            this.duration = Util.msToTimeSpan(durationMs);\r\n        }\r\n        this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n    }\r\n}\r\n"]}