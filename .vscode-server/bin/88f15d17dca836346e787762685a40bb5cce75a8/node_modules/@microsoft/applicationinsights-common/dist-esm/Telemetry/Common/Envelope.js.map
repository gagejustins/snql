{"version":3,"file":"Envelope.js","sourceRoot":"","sources":["../../../src/Telemetry/Common/Envelope.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,OAAO,EAAE,QAAQ,IAAI,UAAU,EAAE,MAAM,+CAA+C,CAAC;AAGvF,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAGlC;IAA8B,oCAAU;IAOpC;;OAEG;IACH,kBAAY,MAAyB,EAAE,IAAU,EAAE,IAAY;QAA/D,YACI,iBAAO,SAgBV;QAdG,KAAI,CAAC,IAAI,GAAG,aAAa,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC;QAC5E,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;QAE/C,KAAI,CAAC,cAAc,GAAG;YAClB,IAAI,EAAE,SAAS,CAAC,QAAQ;YACxB,IAAI,EAAE,SAAS,CAAC,QAAQ;YACxB,IAAI,EAAE,SAAS,CAAC,QAAQ;YACxB,UAAU,EAAE;gBACR,MAAM,CAAC,CAAC,KAAI,CAAC,UAAU,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC;YAC5E,CAAC;YACD,IAAI,EAAE,SAAS,CAAC,QAAQ;YACxB,IAAI,EAAE,SAAS,CAAC,QAAQ;SAC3B,CAAC;;IACN,CAAC;IACL,eAAC;AAAD,CAAC,AA5BD,CAA8B,UAAU,GA4BvC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Envelope as AIEnvelope } from '../../Interfaces/Contracts/Generated/Envelope';\r\nimport { Base } from '../../Interfaces/Contracts/Generated/Base';\r\nimport { IEnvelope } from '../../Interfaces/Telemetry/IEnvelope';\r\nimport { DataSanitizer } from './DataSanitizer';\r\nimport { FieldType } from '../../Enums';\r\nimport { Util } from '../../Util';\r\nimport { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport class Envelope extends AIEnvelope implements IEnvelope {\r\n\r\n    /**\r\n     * The data contract for serializing this object.\r\n     */\r\n    public aiDataContract;\r\n\r\n    /**\r\n     * Constructs a new instance of telemetry data.\r\n     */\r\n    constructor(logger: IDiagnosticLogger, data: Base, name: string) {\r\n        super();\r\n\r\n        this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        this.data = data;\r\n        this.time = Util.toISOStringForIE8(new Date());\r\n\r\n        this.aiDataContract = {\r\n            time: FieldType.Required,\r\n            iKey: FieldType.Required,\r\n            name: FieldType.Required,\r\n            sampleRate: () => {\r\n                return (this.sampleRate == 100) ? FieldType.Hidden : FieldType.Required;\r\n            },\r\n            tags: FieldType.Required,\r\n            data: FieldType.Required\r\n        };\r\n    }\r\n}"]}