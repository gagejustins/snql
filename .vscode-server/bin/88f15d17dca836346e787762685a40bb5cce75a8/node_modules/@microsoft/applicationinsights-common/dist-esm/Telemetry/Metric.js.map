{"version":3,"file":"Metric.js","sourceRoot":"","sources":["../../src/Telemetry/Metric.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;AAElC,OAAO,EAAE,UAAU,EAAE,MAAM,8CAA8C,CAAC;AAE1E,OAAO,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACvD,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AACrC,OAAO,EAAE,SAAS,EAAE,MAAM,oBAAoB,CAAC;AAE/C,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAG/B;IAA4B,kCAAU;IAWlC;;OAEG;IACH,gBAAY,MAAyB,EAAE,IAAY,EAAE,KAAa,EAAE,KAAc,EAAE,GAAY,EAAE,GAAY,EAAE,UAAgB;QAAhI,YACI,iBAAO,SAWV;QArBM,oBAAc,GAAG;YACpB,GAAG,EAAE,SAAS,CAAC,QAAQ;YACvB,OAAO,EAAE,SAAS,CAAC,QAAQ;YAC3B,UAAU,EAAE,SAAS,CAAC,OAAO;SAChC,CAAA;QAQG,IAAI,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;QAChC,SAAS,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;QAChD,SAAS,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;QAC7D,SAAS,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC;QAC7D,SAAS,CAAC,IAAI,GAAG,aAAa,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC;QACjF,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;QAExB,KAAI,CAAC,OAAO,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3B,KAAI,CAAC,UAAU,GAAG,aAAa,CAAC,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;;IAC3E,CAAC;IAxBa,mBAAY,GAAG,0CAA0C,CAAC;IAC1D,eAAQ,GAAG,YAAY,CAAC;IAwB1C,aAAC;CAAA,AA3BD,CAA4B,UAAU,GA2BrC;SA3BY,MAAM","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { MetricData } from '../Interfaces/Contracts/Generated/MetricData';\r\nimport { ISerializable } from '../Interfaces/Telemetry/ISerializable';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { DataPoint } from './Common/DataPoint';\r\nimport { SeverityLevel } from '../Interfaces/Contracts/Generated/SeverityLevel';\r\nimport { Util } from '../Util';\r\nimport { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport class Metric extends MetricData implements ISerializable {\r\n\r\n    public static envelopeType = \"Microsoft.ApplicationInsights.{0}.Metric\";\r\n    public static dataType = \"MetricData\";\r\n\r\n    public aiDataContract = {\r\n        ver: FieldType.Required,\r\n        metrics: FieldType.Required,\r\n        properties: FieldType.Default\r\n    }\r\n\r\n    /**\r\n     * Constructs a new instance of the MetricTelemetry object\r\n     */\r\n    constructor(logger: IDiagnosticLogger, name: string, value: number, count?: number, min?: number, max?: number, properties?: any) {\r\n        super();\r\n\r\n        var dataPoint = new DataPoint();\r\n        dataPoint.count = count > 0 ? count : undefined;\r\n        dataPoint.max = isNaN(max) || max === null ? undefined : max;\r\n        dataPoint.min = isNaN(min) || min === null ? undefined : min;\r\n        dataPoint.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        dataPoint.value = value;\r\n\r\n        this.metrics = [dataPoint];\r\n        this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n    }\r\n}\r\n"]}