{"version":3,"file":"IConfig.js","sourceRoot":"","sources":["../../src/Interfaces/IConfig.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAClC,OAAO,EAAkB,SAAS,EAAE,MAAM,wCAAwC,CAAC;AAgRnF;IAAA;IAWA,CAAC;IAViB,8BAAS,GAAvB,UAAwB,MAAgC,EAAE,KAAa,EAAE,UAAmB,EAAE,YAA+C;QAA/C,6BAAA,EAAA,oBAA+C;QACzI,IAAI,WAAW,CAAC;QAChB,EAAE,CAAC,CAAC,UAAU,IAAI,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACxJ,WAAW,GAAG,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC;QAC5D,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC;IAClF,CAAC;IACL,2BAAC;AAAD,CAAC,AAXD,IAWC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { IConfiguration, CoreUtils } from '@microsoft/applicationinsights-core-js';\r\n\r\n/**\r\n * @description Configuration settings for how telemetry is sent\r\n * @export\r\n * @interface IConfig\r\n */\r\nexport interface IConfig {\r\n\r\n    /**\r\n     * @description\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     */\r\n    emitLineDelimitedJson?: boolean;\r\n\r\n    /**\r\n     * @description An optional account id, if your app groups users into accounts. No spaces, commas, semicolons, equals, or vertical bars.\r\n     * @type {string}\r\n     * @memberof IConfig\r\n     */\r\n    accountId?: string;\r\n\r\n    /**\r\n     * @description A session is logged if the user is inactive for this amount of time in milliseconds. Default 30 mins.\r\n     * @type {number}\r\n     * @memberof IConfig\r\n     * @default 30*60*1000\r\n     */\r\n    sessionRenewalMs?: number;\r\n\r\n    /**\r\n     * @description A session is logged if it has continued for this amount of time in milliseconds. Default 24h.\r\n     * @type {number}\r\n     * @memberof IConfig\r\n     * @default 24*60*60*1000\r\n     */\r\n    sessionExpirationMs?: number;\r\n\r\n    /**\r\n     * @description Max size of telemetry batch. If batch exceeds limit, it is sent and a new batch is started\r\n     * @type {number}\r\n     * @memberof IConfig\r\n     * @default 100000\r\n     */\r\n    maxBatchSizeInBytes?: number;\r\n\r\n    /**\r\n     * @description How long to batch telemetry for before sending (milliseconds)\r\n     * @type {number}\r\n     * @memberof IConfig\r\n     * @default 15 seconds\r\n     */\r\n    maxBatchInterval?: number;\r\n\r\n    /**\r\n     * @description If true, debugging data is thrown as an exception by the logger. Default false\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    enableDebug?: boolean;\r\n\r\n    /**\r\n     * @description If true, exceptions are not autocollected. Default is false\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    disableExceptionTracking?: boolean;\r\n\r\n    /**\r\n     * @description If true, telemetry is not collected or sent. Default is false\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    disableTelemetry?: boolean;\r\n\r\n    /**\r\n     * @description Percentage of events that will be sent. Default is 100, meaning all events are sent.\r\n     * @type {number}\r\n     * @memberof IConfig\r\n     * @defaultValue 100\r\n     */\r\n    samplingPercentage?: number;\r\n\r\n    /**\r\n     * @description\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     */\r\n    autoTrackPageVisitTime?: boolean;\r\n\r\n    /**\r\n     * @description Automatically track route changes in Single Page Applications (SPA). If true, each route change will send a new Pageview to Application Insights.\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     */\r\n    enableAutoRouteTracking?: boolean;\r\n\r\n    /**\r\n     * @description If true, Ajax calls are not autocollected. Default is false\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    disableAjaxTracking?: boolean;\r\n\r\n    /**\r\n     * @description If true, Fetch requests are not autocollected. Default is true.\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue true\r\n     */\r\n    disableFetchTracking?: boolean;\r\n\r\n    /**\r\n     * @description If true, default behavior of trackPageView is changed to record end of page view duration interval when trackPageView is called. If false and no custom duration is provided to trackPageView, the page view performance is calculated using the navigation timing API. Default is false\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    overridePageViewDuration?: boolean;\r\n\r\n    /**\r\n     * @description Default 500 - controls how many ajax calls will be monitored per page view. Set to -1 to monitor all (unlimited) ajax calls on the page.\r\n     * @type {number}\r\n     * @memberof IConfig\r\n     */\r\n    maxAjaxCallsPerView?: number;\r\n\r\n    /**\r\n     * @ignore\r\n     * @description If false, internal telemetry sender buffers will be checked at startup for items not yet sent. Default is true\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue true\r\n     */\r\n    disableDataLossAnalysis?: boolean;\r\n\r\n    /**\r\n     * @description If false, the SDK will add two headers ('Request-Id' and 'Request-Context') to all dependency requests to correlate them with corresponding requests on the server side. Default is false.\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    disableCorrelationHeaders?: boolean;\r\n\r\n    /**\r\n     * @description Disable correlation headers for specific domain\r\n     * @type {string[]}\r\n     * @memberof IConfig\r\n     */\r\n    correlationHeaderExcludedDomains?: string[];\r\n\r\n    /**\r\n     * @description Default false. If true, flush method will not be called when onBeforeUnload event triggers.\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     */\r\n    disableFlushOnBeforeUnload?: boolean;\r\n\r\n    /**\r\n     * @description If true, the buffer with all unsent telemetry is stored in session storage. The buffer is restored on page load. Default is true.\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue true\r\n     */\r\n    enableSessionStorageBuffer?: boolean;\r\n\r\n    /**\r\n     * @description If true, the SDK will not store or read any data from cookies. Default is false.\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    isCookieUseDisabled?: boolean;\r\n\r\n    /**\r\n     * @description Custom cookie domain. This is helpful if you want to share Application Insights cookies across subdomains.\r\n     * @type {string}\r\n     * @memberof IConfig\r\n     * @defaultValue \"\"\r\n     */\r\n    cookieDomain?: string;\r\n\r\n    /** Default false. If false, retry on 206 (partial success), 408 (timeout), 429 (too many requests), 500 (internal server error), 503 (service unavailable), and 0 (offline, only if detected)\r\n     * @description\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    isRetryDisabled?: boolean;\r\n\r\n    /**\r\n     * @deprecated Used when initizialing from snippet only.\r\n     * @description  The url from where the JS SDK will be downloaded. Default 'https://az416426.vo.msecnd.net/scripts/beta/ai.1.js'\r\n     * @type {string}\r\n     * @memberof IConfig\r\n     * @defaultValue \"https://az416426.vo.msecnd.net/scripts/beta/ai.1.js\"\r\n     */\r\n    url?: string;\r\n\r\n    /**\r\n     * @description If true, the SDK will not store or read any data from local and session storage. Default is false.\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    isStorageUseDisabled?: boolean;\r\n\r\n    /**\r\n     * @description If false, the SDK will send all telemetry using the [Beacon API](https://www.w3.org/TR/beacon)\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue true\r\n     */\r\n    isBeaconApiDisabled?: boolean;\r\n\r\n    /**\r\n     * @description Sets the sdk extension name. Only alphabetic characters are allowed. The extension name is added as a prefix to the 'ai.internal.sdkVersion' tag (e.g. 'ext_javascript:2.0.0'). Default is null.\r\n     * @type {string}\r\n     * @memberof IConfig\r\n     * @defaultValue null\r\n     */\r\n    sdkExtension?: string;\r\n\r\n    /**\r\n     * @description Default is false. If true, the SDK will track all [Browser Link](https://docs.microsoft.com/en-us/aspnet/core/client-side/using-browserlink) requests.\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    isBrowserLinkTrackingEnabled?: boolean;\r\n\r\n    /**\r\n     * @description AppId is used for the correlation between AJAX dependencies happening on the client-side with the server-side requets. When Beacon API is enabled, it cannot be used automatically, but can be set manually in the configuration. Default is null\r\n     * @type {string}\r\n     * @memberof IConfig\r\n     * @defaultValue null\r\n     */\r\n    appId?: string;\r\n\r\n    /**\r\n     * @description If true, the SDK will add two headers ('Request-Id' and 'Request-Context') to all CORS requests tocorrelate outgoing AJAX dependencies with corresponding requests on the server side. Default is false\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     * @defaultValue false\r\n     */\r\n    enableCorsCorrelation?: boolean;\r\n\r\n    /**\r\n     * @description An optional value that will be used as name postfix for localStorage and cookie name.\r\n     * @type {string}\r\n     * @memberof IConfig\r\n     * @defaultValue null\r\n     */\r\n    namePrefix?: string;\r\n\r\n    // Internal\r\n\r\n    /**\r\n     * @ignore\r\n     * @description Internal only\r\n     * @type {boolean}\r\n     * @memberof IConfig\r\n     */\r\n    autoExceptionInstrumented?: boolean;\r\n    correlationHeaderDomains?: string[]\r\n}\r\n\r\nexport class ConfigurationManager {\r\n    public static getConfig(config: IConfiguration & IConfig, field: string, identifier?: string, defaultValue: number | string | boolean = false): number | string | boolean {\r\n        let configValue;\r\n        if (identifier && config.extensionConfig && config.extensionConfig[identifier] && !CoreUtils.isNullOrUndefined(config.extensionConfig[identifier][field])) {\r\n            configValue = config.extensionConfig[identifier][field];\r\n        } else {\r\n            configValue = config[field];\r\n        }\r\n\r\n        return !CoreUtils.isNullOrUndefined(configValue) ? configValue : defaultValue;\r\n    }\r\n}\r\n"]}