{"version":3,"file":"TelemetryItemCreator.js","sourceRoot":"","sources":["../src/TelemetryItemCreator.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAkB,SAAS,EAAqB,MAAM,wCAAwC,CAAC;AAEtG;IAAA;IAkDA,CAAC;IAhDG;;;;;;;;OAQG;IAEW,2BAAM,GAApB,UAAwB,IAAO,EAC3B,QAAgB,EAChB,YAAoB,EACpB,MAAyB,EACzB,gBAAyC,EACzC,gBAAyC;QAEzC,YAAY,GAAG,aAAa,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC;QAEvF,EAAE,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC;YACjC,SAAS,CAAC,iBAAiB,CAAC,QAAQ,CAAC;YACrC,SAAS,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,KAAK,CAAC,2CAA2C,CAAC,CAAC;QACjE,CAAC;QAED,IAAI,aAAa,GAAmB;YAChC,IAAI,EAAE,YAAY;YAClB,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YAC9B,IAAI,EAAE,EAAE;YACR,GAAG,EAAE,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;YAC7C,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,EACL;YACD,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,IAAI,CAAC,SAAS;SAC3B,CAAC;QAEF,SAAS;QACT,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACjD,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,gBAAgB,CAAC,CAAC,CAAC;gBAChC,EAAE,CAAC,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACxC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACtD,CAAC;YACL,CAAC;QACL,CAAC;QAED,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IACL,2BAAC;AAAD,CAAC,AAlDD,IAkDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Util } from \"./Util\";\r\nimport { DataSanitizer } from \"./Telemetry/Common/DataSanitizer\";\r\nimport { ITelemetryItem, CoreUtils, IDiagnosticLogger } from \"@microsoft/applicationinsights-core-js\";\r\n\r\nexport class TelemetryItemCreator {\r\n\r\n    /**\r\n     * Create a telemetry item that the 1DS channel understands\r\n     * @param item domain specific properties; part B\r\n     * @param baseType telemetry item type. ie PageViewData\r\n     * @param envelopeName name of the envelope. ie Microsoft.ApplicationInsights.<instrumentation key>.PageView\r\n     * @param customProperties user defined custom properties; part C\r\n     * @param systemProperties system properties that are added to the context; part A\r\n     * @returns ITelemetryItem that is sent to channel\r\n     */\r\n\r\n    public static create<T>(item: T,\r\n        baseType: string,\r\n        envelopeName: string,\r\n        logger: IDiagnosticLogger,\r\n        customProperties?: { [key: string]: any },\r\n        systemProperties?: { [key: string]: any }): ITelemetryItem {\r\n\r\n        envelopeName = DataSanitizer.sanitizeString(logger, envelopeName) || Util.NotSpecified;\r\n\r\n        if (CoreUtils.isNullOrUndefined(item) ||\r\n            CoreUtils.isNullOrUndefined(baseType) ||\r\n            CoreUtils.isNullOrUndefined(envelopeName)) {\r\n                throw Error(\"Input doesn't contain all required fields\");\r\n        }\r\n\r\n        let telemetryItem: ITelemetryItem = {\r\n            name: envelopeName,\r\n            time: new Date().toISOString(),\r\n            iKey: \"\", // this will be set in TelemetryContext\r\n            ext: systemProperties ? systemProperties : {}, // part A\r\n            tags: [],\r\n            data: {\r\n            },\r\n            baseType: baseType,\r\n            baseData: item // Part B\r\n        };\r\n\r\n        // Part C\r\n        if (!CoreUtils.isNullOrUndefined(customProperties)) {\r\n            for (var prop in customProperties) {\r\n                if (customProperties.hasOwnProperty(prop)) {\r\n                    telemetryItem.data[prop] = customProperties[prop];\r\n                }\r\n            }\r\n        }\r\n\r\n        return telemetryItem;\r\n    }\r\n}\r\n"]}