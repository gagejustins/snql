{"version":3,"file":"ai.2.min.js","sources":["../../shared/AppInsightsCommon/dist-esm/Enums.js","../../shared/AppInsightsCore/dist-esm/JavaScriptSDK.Enums/EventsDiscardedReason.js","../../shared/AppInsightsCore/dist-esm/JavaScriptSDK/CoreUtils.js","../../shared/AppInsightsCore/dist-esm/JavaScriptSDK.Enums/LoggingEnums.js","../../shared/AppInsightsCore/dist-esm/JavaScriptSDK/NotificationManager.js","../../shared/AppInsightsCore/dist-esm/JavaScriptSDK/DiagnosticLogger.js","../../shared/AppInsightsCore/dist-esm/JavaScriptSDK/ChannelController.js","../../shared/AppInsightsCore/dist-esm/JavaScriptSDK/AppInsightsCore.js","../../shared/AppInsightsCommon/dist-esm/RequestResponseHeaders.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/Common/DataSanitizer.js","../../shared/AppInsightsCommon/dist-esm/Util.js","../../shared/AppInsightsCommon/dist-esm/Constants.js","../../common/temp/node_modules/tslib/tslib.es6.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/Data.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/Base.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/Envelope.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/Common/Envelope.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/Domain.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/EventData.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/Event.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/StackFrame.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/ExceptionData.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/ExceptionDetails.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/Exception.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/MetricData.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/DataPointType.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/DataPoint.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/Common/DataPoint.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/Metric.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/PageViewData.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/PageView.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/RemoteDependencyData.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/RemoteDependencyData.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/MessageData.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/Trace.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/PageViewPerfData.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/PageViewPerformance.js","../../shared/AppInsightsCommon/dist-esm/Telemetry/Common/Data.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/SeverityLevel.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/IConfig.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/Contracts/Generated/ContextTagKeys.js","../../shared/AppInsightsCommon/dist-esm/TelemetryItemCreator.js","../../shared/AppInsightsCommon/dist-esm/Interfaces/PartAExtensions.js","../../shared/AppInsightsCommon/dist-esm/applicationinsights-common.js","../dist-esm/ApplicationInsightsDeprecated.js","../../extensions/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewManager.js","../../extensions/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageVisitTimeManager.js","../../extensions/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/Telemetry/PageViewPerformanceManager.js","../../extensions/applicationinsights-analytics-js/dist-esm/JavaScriptSDK/ApplicationInsights.js","../../channels/applicationinsights-channel-js/dist-esm/SendBuffer.js","../../channels/applicationinsights-channel-js/dist-esm/EnvelopeCreator.js","../../channels/applicationinsights-channel-js/dist-esm/Serializer.js","../../channels/applicationinsights-channel-js/dist-esm/Offline.js","../../channels/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.js","../../channels/applicationinsights-channel-js/dist-esm/TelemetryProcessors/SamplingScoreGenerators/SamplingScoreGenerator.js","../../channels/applicationinsights-channel-js/dist-esm/TelemetryProcessors/Sample.js","../../channels/applicationinsights-channel-js/dist-esm/Sender.js","../../extensions/applicationinsights-properties-js/dist-esm/Context/Session.js","../../extensions/applicationinsights-properties-js/dist-esm/Context/Application.js","../../extensions/applicationinsights-properties-js/dist-esm/Context/Device.js","../../extensions/applicationinsights-properties-js/dist-esm/Context/Internal.js","../../extensions/applicationinsights-properties-js/dist-esm/Context/User.js","../../extensions/applicationinsights-properties-js/dist-esm/Context/Location.js","../../extensions/applicationinsights-properties-js/dist-esm/Context/TelemetryTrace.js","../../extensions/applicationinsights-properties-js/dist-esm/TelemetryContext.js","../../extensions/applicationinsights-properties-js/dist-esm/PropertiesPlugin.js","../../extensions/applicationinsights-dependencies-js/dist-esm/ajaxRecord.js","../../extensions/applicationinsights-dependencies-js/dist-esm/ajaxUtils.js","../../extensions/applicationinsights-dependencies-js/dist-esm/ajax.js","../dist-esm/Initialization.js","../dist-esm/ApplicationInsightsContainer.js","../dist-esm/Init.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n* Type of storage to differentiate between local storage and session storage\r\n*/\r\nexport var StorageType;\r\n(function (StorageType) {\r\n    StorageType[StorageType[\"LocalStorage\"] = 0] = \"LocalStorage\";\r\n    StorageType[StorageType[\"SessionStorage\"] = 1] = \"SessionStorage\";\r\n})(StorageType || (StorageType = {}));\r\n/**\r\n * Enum is used in aiDataContract to describe how fields are serialized.\r\n * For instance: (Fieldtype.Required | FieldType.Array) will mark the field as required and indicate it's an array\r\n */\r\nexport var FieldType;\r\n(function (FieldType) {\r\n    FieldType[FieldType[\"Default\"] = 0] = \"Default\";\r\n    FieldType[FieldType[\"Required\"] = 1] = \"Required\";\r\n    FieldType[FieldType[\"Array\"] = 2] = \"Array\";\r\n    FieldType[FieldType[\"Hidden\"] = 4] = \"Hidden\";\r\n})(FieldType || (FieldType = {}));\r\n;\r\n//# sourceMappingURL=Enums.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * The EventsDiscardedReason enumeration contains a set of values that specify the reason for discarding an event.\r\n */\r\nexport var EventsDiscardedReason = {\r\n    /**\r\n     * Unknown.\r\n     */\r\n    Unknown: 0,\r\n    /**\r\n     * Status set to non-retryable.\r\n     */\r\n    NonRetryableStatus: 1,\r\n    /**\r\n     * The event is invalid.\r\n     */\r\n    InvalidEvent: 2,\r\n    /**\r\n     * The size of the event is too large.\r\n     */\r\n    SizeLimitExceeded: 3,\r\n    /**\r\n     * The server is not accepting events from this instrumentation key.\r\n     */\r\n    KillSwitch: 4,\r\n    /**\r\n     * The event queue is full.\r\n     */\r\n    QueueFull: 5,\r\n};\r\n//# sourceMappingURL=EventsDiscardedReason.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar CoreUtils = /** @class */ (function () {\r\n    function CoreUtils() {\r\n    }\r\n    CoreUtils.isNullOrUndefined = function (input) {\r\n        return input === null || input === undefined;\r\n    };\r\n    /**\r\n* Creates a new GUID.\r\n* @return {string} A GUID.\r\n*/\r\n    CoreUtils.disableCookies = function () {\r\n        CoreUtils._canUseCookies = false;\r\n    };\r\n    CoreUtils.newGuid = function () {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n            // tslint:disable-next-line:insecure-random\r\n            var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    return CoreUtils;\r\n}());\r\nexport { CoreUtils };\r\nvar GuidRegex = /[xy]/g;\r\n//# sourceMappingURL=CoreUtils.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport var LoggingSeverity;\r\n(function (LoggingSeverity) {\r\n    /**\r\n     * Error will be sent as internal telemetry\r\n     */\r\n    LoggingSeverity[LoggingSeverity[\"CRITICAL\"] = 1] = \"CRITICAL\";\r\n    /**\r\n     * Error will NOT be sent as internal telemetry, and will only be shown in browser console\r\n     */\r\n    LoggingSeverity[LoggingSeverity[\"WARNING\"] = 2] = \"WARNING\";\r\n})(LoggingSeverity || (LoggingSeverity = {}));\r\n/**\r\n * Internal message ID. Please create a new one for every conceptually different message. Please keep alphabetically ordered\r\n */\r\nexport var _InternalMessageId = {\r\n    // Non user actionable\r\n    BrowserDoesNotSupportLocalStorage: 0,\r\n    BrowserCannotReadLocalStorage: 1,\r\n    BrowserCannotReadSessionStorage: 2,\r\n    BrowserCannotWriteLocalStorage: 3,\r\n    BrowserCannotWriteSessionStorage: 4,\r\n    BrowserFailedRemovalFromLocalStorage: 5,\r\n    BrowserFailedRemovalFromSessionStorage: 6,\r\n    CannotSendEmptyTelemetry: 7,\r\n    ClientPerformanceMathError: 8,\r\n    ErrorParsingAISessionCookie: 9,\r\n    ErrorPVCalc: 10,\r\n    ExceptionWhileLoggingError: 11,\r\n    FailedAddingTelemetryToBuffer: 12,\r\n    FailedMonitorAjaxAbort: 13,\r\n    FailedMonitorAjaxDur: 14,\r\n    FailedMonitorAjaxOpen: 15,\r\n    FailedMonitorAjaxRSC: 16,\r\n    FailedMonitorAjaxSend: 17,\r\n    FailedMonitorAjaxGetCorrelationHeader: 18,\r\n    FailedToAddHandlerForOnBeforeUnload: 19,\r\n    FailedToSendQueuedTelemetry: 20,\r\n    FailedToReportDataLoss: 21,\r\n    FlushFailed: 22,\r\n    MessageLimitPerPVExceeded: 23,\r\n    MissingRequiredFieldSpecification: 24,\r\n    NavigationTimingNotSupported: 25,\r\n    OnError: 26,\r\n    SessionRenewalDateIsZero: 27,\r\n    SenderNotInitialized: 28,\r\n    StartTrackEventFailed: 29,\r\n    StopTrackEventFailed: 30,\r\n    StartTrackFailed: 31,\r\n    StopTrackFailed: 32,\r\n    TelemetrySampledAndNotSent: 33,\r\n    TrackEventFailed: 34,\r\n    TrackExceptionFailed: 35,\r\n    TrackMetricFailed: 36,\r\n    TrackPVFailed: 37,\r\n    TrackPVFailedCalc: 38,\r\n    TrackTraceFailed: 39,\r\n    TransmissionFailed: 40,\r\n    FailedToSetStorageBuffer: 41,\r\n    FailedToRestoreStorageBuffer: 42,\r\n    InvalidBackendResponse: 43,\r\n    FailedToFixDepricatedValues: 44,\r\n    InvalidDurationValue: 45,\r\n    TelemetryEnvelopeInvalid: 46,\r\n    CreateEnvelopeError: 47,\r\n    // User actionable\r\n    CannotSerializeObject: 48,\r\n    CannotSerializeObjectNonSerializable: 49,\r\n    CircularReferenceDetected: 50,\r\n    ClearAuthContextFailed: 51,\r\n    ExceptionTruncated: 52,\r\n    IllegalCharsInName: 53,\r\n    ItemNotInArray: 54,\r\n    MaxAjaxPerPVExceeded: 55,\r\n    MessageTruncated: 56,\r\n    NameTooLong: 57,\r\n    SampleRateOutOfRange: 58,\r\n    SetAuthContextFailed: 59,\r\n    SetAuthContextFailedAccountName: 60,\r\n    StringValueTooLong: 61,\r\n    StartCalledMoreThanOnce: 62,\r\n    StopCalledWithoutStart: 63,\r\n    TelemetryInitializerFailed: 64,\r\n    TrackArgumentsNotSpecified: 65,\r\n    UrlTooLong: 66,\r\n    SessionStorageBufferFull: 67,\r\n    CannotAccessCookie: 68,\r\n    IdTooLong: 69,\r\n    InvalidEvent: 70,\r\n};\r\n//# sourceMappingURL=LoggingEnums.js.map","/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar NotificationManager = /** @class */ (function () {\r\n    function NotificationManager() {\r\n        this.listeners = [];\r\n    }\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {INotificationListener} listener - The notification listener to be added.\r\n     */\r\n    NotificationManager.prototype.addNotificationListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n     */\r\n    NotificationManager.prototype.removeNotificationListener = function (listener) {\r\n        var index = this.listeners.indexOf(listener);\r\n        while (index > -1) {\r\n            this.listeners.splice(index, 1);\r\n            index = this.listeners.indexOf(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n     */\r\n    NotificationManager.prototype.eventsSent = function (events) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            if (this_1.listeners[i].eventsSent) {\r\n                setTimeout(function () { return _this.listeners[i].eventsSent(events); }, 0);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being discarded.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n     * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n     * constant should be used to check the different values.\r\n     */\r\n    NotificationManager.prototype.eventsDiscarded = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_2 = function (i) {\r\n            if (this_2.listeners[i].eventsDiscarded) {\r\n                setTimeout(function () { return _this.listeners[i].eventsDiscarded(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_2(i);\r\n        }\r\n    };\r\n    return NotificationManager;\r\n}());\r\nexport { NotificationManager };\r\n//# sourceMappingURL=NotificationManager.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { _InternalMessageId, LoggingSeverity } from \"../JavaScriptSDK.Enums/LoggingEnums\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nvar _InternalLogMessage = /** @class */ (function () {\r\n    function _InternalLogMessage(msgId, msg, isUserAct, properties) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        this.messageId = msgId;\r\n        this.message =\r\n            (isUserAct ? _InternalLogMessage.AiUserActionablePrefix : _InternalLogMessage.AiNonUserActionablePrefix) +\r\n                msgId;\r\n        var diagnosticText = (msg ? \" message:\" + _InternalLogMessage.sanitizeDiagnosticText(msg) : \"\") +\r\n            (properties ? \" props:\" + _InternalLogMessage.sanitizeDiagnosticText(JSON.stringify(properties)) : \"\");\r\n        this.message += diagnosticText;\r\n    }\r\n    _InternalLogMessage.sanitizeDiagnosticText = function (text) {\r\n        return \"\\\"\" + text.replace(/\\\"/g, \"\") + \"\\\"\";\r\n    };\r\n    _InternalLogMessage.dataType = \"MessageData\";\r\n    /**\r\n     * For user non actionable traces use AI Internal prefix.\r\n     */\r\n    _InternalLogMessage.AiNonUserActionablePrefix = \"AI (Internal): \";\r\n    /**\r\n     * Prefix of the traces in portal.\r\n     */\r\n    _InternalLogMessage.AiUserActionablePrefix = \"AI: \";\r\n    return _InternalLogMessage;\r\n}());\r\nexport { _InternalLogMessage };\r\nvar DiagnosticLogger = /** @class */ (function () {\r\n    function DiagnosticLogger(config) {\r\n        /**\r\n        *  Session storage key for the prefix for the key indicating message type already logged\r\n        */\r\n        this.AIInternalMessagePrefix = \"AITR_\";\r\n        /**\r\n         * When this is true the SDK will throw exceptions to aid in debugging.\r\n         */\r\n        this.enableDebugExceptions = function () { return false; };\r\n        /**\r\n         * 0: OFF\r\n         * 1: CRITICAL (default)\r\n         * 2: >= WARNING\r\n         */\r\n        this.consoleLoggingLevel = function () { return 1; };\r\n        /**\r\n         * 0: OFF (default)\r\n         * 1: CRITICAL\r\n         * 2: >= WARNING\r\n         */\r\n        this.telemetryLoggingLevel = function () { return 0; };\r\n        /**\r\n         * The maximum number of internal messages allowed to be sent per page view\r\n         */\r\n        this.maxInternalMessageLimit = function () { return 25; };\r\n        /**\r\n         * The internal logging queue\r\n         */\r\n        this.queue = [];\r\n        /**\r\n         * Count of internal messages sent\r\n         */\r\n        this._messageCount = 0;\r\n        /**\r\n         * Holds information about what message types were already logged to console or sent to server.\r\n         */\r\n        this._messageLogged = {};\r\n        if (CoreUtils.isNullOrUndefined(config)) {\r\n            // TODO: Use default config\r\n            // config = AppInsightsCore.defaultConfig;\r\n            // For now, use defaults specified in DiagnosticLogger members;\r\n            return;\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelConsole)) {\r\n            this.consoleLoggingLevel = function () { return config.loggingLevelConsole; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelTelemetry)) {\r\n            this.telemetryLoggingLevel = function () { return config.loggingLevelTelemetry; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.maxMessageLimit)) {\r\n            this.maxInternalMessageLimit = function () { return config.maxMessageLimit; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.enableDebugExceptions)) {\r\n            this.enableDebugExceptions = function () { return config.enableDebugExceptions; };\r\n        }\r\n    }\r\n    /**\r\n     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The log message.\r\n     */\r\n    DiagnosticLogger.prototype.throwInternal = function (severity, msgId, msg, properties, isUserAct) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n        if (this.enableDebugExceptions()) {\r\n            throw message;\r\n        }\r\n        else {\r\n            if (typeof (message) !== \"undefined\" && !!message) {\r\n                if (typeof (message.message) !== \"undefined\") {\r\n                    if (isUserAct) {\r\n                        // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                        var messageKey = +message.messageId;\r\n                        if (!this._messageLogged[messageKey] || this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                            this._messageLogged[messageKey] = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // don't log internal AI traces in the console, unless the verbose logging is enabled\r\n                        if (this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                        }\r\n                    }\r\n                    this.logInternalMessage(severity, message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This will write a warning to the console if possible\r\n     * @param message {string} - The warning message\r\n     */\r\n    DiagnosticLogger.prototype.warnToConsole = function (message) {\r\n        if (typeof console !== \"undefined\" && !!console) {\r\n            if (typeof console.warn === \"function\") {\r\n                console.warn(message);\r\n            }\r\n            else if (typeof console.log === \"function\") {\r\n                console.log(message);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Resets the internal message count\r\n     */\r\n    DiagnosticLogger.prototype.resetInternalMessageCount = function () {\r\n        this._messageCount = 0;\r\n        this._messageLogged = {};\r\n    };\r\n    /**\r\n     * Logs a message to the internal queue.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The message to log.\r\n     */\r\n    DiagnosticLogger.prototype.logInternalMessage = function (severity, message) {\r\n        if (this._areInternalMessagesThrottled()) {\r\n            return;\r\n        }\r\n        // check if this message type was already logged for this session and if so, don't log it again\r\n        var logMessage = true;\r\n        var messageKey = this.AIInternalMessagePrefix + message.messageId;\r\n        // if the session storage is not available, limit to only one message type per page view\r\n        if (this._messageLogged[messageKey]) {\r\n            logMessage = false;\r\n        }\r\n        else {\r\n            this._messageLogged[messageKey] = true;\r\n        }\r\n        if (logMessage) {\r\n            // Push the event in the internal queue\r\n            if (severity <= this.telemetryLoggingLevel()) {\r\n                this.queue.push(message);\r\n                this._messageCount++;\r\n            }\r\n            // When throttle limit reached, send a special event\r\n            if (this._messageCount == this.maxInternalMessageLimit()) {\r\n                var throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                var throttleMessage = new _InternalLogMessage(_InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, false);\r\n                this.queue.push(throttleMessage);\r\n                this.warnToConsole(throttleLimitMessage);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Indicates whether the internal events are throttled\r\n     */\r\n    DiagnosticLogger.prototype._areInternalMessagesThrottled = function () {\r\n        return this._messageCount >= this.maxInternalMessageLimit();\r\n    };\r\n    return DiagnosticLogger;\r\n}());\r\nexport { DiagnosticLogger };\r\n//# sourceMappingURL=DiagnosticLogger.js.map","import { CoreUtils } from \"./CoreUtils\";\r\n\"use strict\";\r\nvar ChannelControllerPriority = 500;\r\nvar ChannelValidationMessage = \"Channel has invalid priority\";\r\nvar ChannelController = /** @class */ (function () {\r\n    function ChannelController() {\r\n        this.identifier = \"ChannelControllerPlugin\";\r\n        this.priority = ChannelControllerPriority; // in reserved range 100 to 200\r\n    }\r\n    ChannelController.prototype.processTelemetry = function (item) {\r\n        this.channelQueue.forEach(function (queues) {\r\n            // pass on to first item in queue\r\n            if (queues.length > 0) {\r\n                queues[0].processTelemetry(item);\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(ChannelController.prototype, \"ChannelControls\", {\r\n        get: function () {\r\n            return this.channelQueue;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ChannelController.prototype.initialize = function (config, core, extensions) {\r\n        var _this = this;\r\n        if (config.isCookieUseDisabled) {\r\n            CoreUtils.disableCookies();\r\n        }\r\n        this.channelQueue = new Array();\r\n        if (config.channels) {\r\n            var invalidChannelIdentifier_1 = undefined;\r\n            config.channels.forEach(function (queue) {\r\n                if (queue && queue.length > 0) {\r\n                    queue = queue.sort(function (a, b) {\r\n                        return a.priority - b.priority;\r\n                    });\r\n                    // Initialize each plugin\r\n                    queue.forEach(function (queueItem) {\r\n                        if (queueItem.priority < ChannelControllerPriority) {\r\n                            invalidChannelIdentifier_1 = queueItem.identifier;\r\n                        }\r\n                        queueItem.initialize(config, core, extensions);\r\n                    });\r\n                    if (invalidChannelIdentifier_1) {\r\n                        throw Error(ChannelValidationMessage + invalidChannelIdentifier_1);\r\n                    }\r\n                    for (var i = 1; i < queue.length; i++) {\r\n                        queue[i - 1].setNextPlugin(queue[i]); // setup processing chain\r\n                    }\r\n                    _this.channelQueue.push(queue);\r\n                }\r\n            });\r\n        }\r\n        var arr = new Array();\r\n        for (var i = 0; i < extensions.length; i++) {\r\n            var plugin = extensions[i];\r\n            if (plugin.priority > ChannelControllerPriority) {\r\n                arr.push(plugin);\r\n            }\r\n        }\r\n        if (arr.length > 0) {\r\n            // sort if not sorted\r\n            arr = arr.sort(function (a, b) {\r\n                return a.priority - b.priority;\r\n            });\r\n            // Initialize each plugin\r\n            arr.forEach(function (queueItem) { return queueItem.initialize(config, core, extensions); });\r\n            // setup next plugin\r\n            for (var i = 1; i < arr.length; i++) {\r\n                arr[i - 1].setNextPlugin(arr[i]);\r\n            }\r\n            this.channelQueue.push(arr);\r\n        }\r\n    };\r\n    return ChannelController;\r\n}());\r\nexport { ChannelController };\r\n//# sourceMappingURL=ChannelController.js.map","import { EventsDiscardedReason } from \"../JavaScriptSDK.Enums/EventsDiscardedReason\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { NotificationManager } from \"./NotificationManager\";\r\nimport { _InternalLogMessage, DiagnosticLogger } from \"./DiagnosticLogger\";\r\nimport { ChannelController } from './ChannelController';\r\n\"use strict\";\r\nvar validationError = \"Extensions must provide callback to initialize\";\r\nvar AppInsightsCore = /** @class */ (function () {\r\n    function AppInsightsCore() {\r\n        this._isInitialized = false;\r\n        this._extensions = new Array();\r\n        this._channelController = new ChannelController();\r\n    }\r\n    AppInsightsCore.prototype.initialize = function (config, extensions) {\r\n        var _this = this;\r\n        // Make sure core is only initialized once\r\n        if (this._isInitialized) {\r\n            throw Error(\"Core should not be initialized more than once\");\r\n        }\r\n        if (!config || CoreUtils.isNullOrUndefined(config.instrumentationKey)) {\r\n            throw Error(\"Please provide instrumentation key\");\r\n        }\r\n        this.config = config;\r\n        this._notificationManager = new NotificationManager();\r\n        this.config.extensions = CoreUtils.isNullOrUndefined(this.config.extensions) ? [] : this.config.extensions;\r\n        // add notification to the extensions in the config so other plugins can access it\r\n        this.config.extensionConfig = CoreUtils.isNullOrUndefined(this.config.extensionConfig) ? {} : this.config.extensionConfig;\r\n        this.config.extensionConfig.NotificationManager = this._notificationManager;\r\n        this.logger = new DiagnosticLogger(config);\r\n        // Concat all available extensions \r\n        (_a = this._extensions).push.apply(_a, extensions.concat(this.config.extensions));\r\n        // Initial validation \r\n        this._extensions.forEach(function (extension) {\r\n            var isValid = true;\r\n            if (CoreUtils.isNullOrUndefined(extension) || CoreUtils.isNullOrUndefined(extension.initialize)) {\r\n                isValid = false;\r\n            }\r\n            if (!isValid) {\r\n                throw Error(validationError);\r\n            }\r\n        });\r\n        // Initial validation complete\r\n        this._extensions.push(this._channelController);\r\n        // Sort by priority\r\n        this._extensions = this._extensions.sort(function (a, b) {\r\n            var extA = a;\r\n            var extB = b;\r\n            var typeExtA = typeof extA.processTelemetry;\r\n            var typeExtB = typeof extB.processTelemetry;\r\n            if (typeExtA === 'function' && typeExtB === 'function') {\r\n                return extA.priority - extB.priority;\r\n            }\r\n            if (typeExtA === 'function' && typeExtB !== 'function') {\r\n                // keep non telemetryplugin specific extensions at start\r\n                return 1;\r\n            }\r\n            if (typeExtA !== 'function' && typeExtB === 'function') {\r\n                return -1;\r\n            }\r\n        });\r\n        // sort complete\r\n        // Check if any two extensions have the same priority, then warn to console\r\n        var priority = {};\r\n        this._extensions.forEach(function (ext) {\r\n            var t = ext;\r\n            if (t && t.priority) {\r\n                if (!CoreUtils.isNullOrUndefined(priority[t.priority])) {\r\n                    _this.logger.warnToConsole(\"Two extensions have same priority\" + priority[t.priority] + \", \" + t.identifier);\r\n                }\r\n                else {\r\n                    priority[t.priority] = t.identifier; // set a value\r\n                }\r\n            }\r\n        });\r\n        var c = -1;\r\n        // Set next plugin for all until channel controller\r\n        for (var idx = 0; idx < this._extensions.length - 1; idx++) {\r\n            var curr = (this._extensions[idx]);\r\n            if (curr && typeof curr.processTelemetry !== 'function') {\r\n                // these are initialized only, allowing an entry point for extensions to be initialized when SDK initializes\r\n                continue;\r\n            }\r\n            if (curr.priority === this._channelController.priority) {\r\n                c = idx + 1;\r\n                break; // channel controller will set remaining pipeline\r\n            }\r\n            this._extensions[idx].setNextPlugin(this._extensions[idx + 1]); // set next plugin\r\n        }\r\n        // initialize channel controller first, this will initialize all channel plugins\r\n        this._channelController.initialize(this.config, this, this._extensions);\r\n        // initialize remaining regular plugins\r\n        this._extensions.forEach(function (ext) {\r\n            var e = ext;\r\n            if (e && e.priority < _this._channelController.priority) {\r\n                ext.initialize(_this.config, _this, _this._extensions); // initialize\r\n            }\r\n        });\r\n        // Remove sender channels from main list\r\n        if (c < this._extensions.length) {\r\n            this._extensions.splice(c);\r\n        }\r\n        if (this.getTransmissionControls().length === 0) {\r\n            throw new Error(\"No channels available\");\r\n        }\r\n        this._isInitialized = true;\r\n        var _a;\r\n    };\r\n    AppInsightsCore.prototype.getTransmissionControls = function () {\r\n        return this._channelController.ChannelControls;\r\n    };\r\n    AppInsightsCore.prototype.track = function (telemetryItem) {\r\n        if (telemetryItem === null) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            // throw error\r\n            throw Error(\"Invalid telemetry item\");\r\n        }\r\n        if (!telemetryItem.iKey) {\r\n            // setup default iKey if not passed in\r\n            telemetryItem.iKey = this.config.instrumentationKey;\r\n        }\r\n        if (!telemetryItem.time) {\r\n            // add default timestamp if not passed in\r\n            telemetryItem.time = new Date().toISOString();\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.ver)) {\r\n            // CommonSchema 4.0\r\n            telemetryItem.ver = \"4.0\";\r\n        }\r\n        // do basic validation before sending it through the pipeline\r\n        this._validateTelmetryItem(telemetryItem);\r\n        // invoke any common telemetry processors before sending through pipeline\r\n        if (this._extensions.length == 0) {\r\n            this._channelController.processTelemetry(telemetryItem); // Pass to Channel controller so data is sent to correct channel queues\r\n        }\r\n        var i = 0;\r\n        while (i < this._extensions.length) {\r\n            if (this._extensions[i].processTelemetry) {\r\n                this._extensions[i].processTelemetry(telemetryItem); // pass on to first extension that can support processing\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n    };\r\n    /**\r\n     * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.\r\n     * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be\r\n     * called.\r\n     * @param {INotificationListener} listener - An INotificationListener object.\r\n     */\r\n    AppInsightsCore.prototype.addNotificationListener = function (listener) {\r\n        this._notificationManager.addNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - INotificationListener to remove.\r\n     */\r\n    AppInsightsCore.prototype.removeNotificationListener = function (listener) {\r\n        this._notificationManager.removeNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Periodically check logger.queue for\r\n     */\r\n    AppInsightsCore.prototype.pollInternalLogs = function () {\r\n        var _this = this;\r\n        var interval = this.config.diagnosticLogInterval;\r\n        if (!(interval > 0)) {\r\n            interval = 10000;\r\n        }\r\n        return setInterval(function () {\r\n            var queue = _this.logger.queue;\r\n            queue.forEach(function (logMessage) {\r\n                var item = {\r\n                    name: \"InternalMessageId: \" + logMessage.messageId,\r\n                    iKey: _this.config.instrumentationKey,\r\n                    time: new Date().toISOString(),\r\n                    baseType: _InternalLogMessage.dataType,\r\n                    baseData: { message: logMessage.message }\r\n                };\r\n                _this.track(item);\r\n            });\r\n            queue.length = 0;\r\n        }, interval);\r\n    };\r\n    AppInsightsCore.prototype._validateTelmetryItem = function (telemetryItem) {\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.name)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry name required\");\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.time)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry timestamp required\");\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.iKey)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry instrumentationKey required\");\r\n        }\r\n    };\r\n    AppInsightsCore.prototype._notifyInvalidEvent = function (telemetryItem) {\r\n        this._notificationManager.eventsDiscarded([telemetryItem], EventsDiscardedReason.InvalidEvent);\r\n    };\r\n    return AppInsightsCore;\r\n}());\r\nexport { AppInsightsCore };\r\n//# sourceMappingURL=AppInsightsCore.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar RequestHeaders = /** @class */ (function () {\r\n    function RequestHeaders() {\r\n    }\r\n    /**\r\n     * Request-Context header\r\n     */\r\n    RequestHeaders.requestContextHeader = \"Request-Context\";\r\n    /**\r\n     * Target instrumentation header that is added to the response and retrieved by the\r\n     * calling application when processing incoming responses.\r\n     */\r\n    RequestHeaders.requestContextTargetKey = \"appId\";\r\n    /**\r\n     * Request-Context appId format\r\n     */\r\n    RequestHeaders.requestContextAppIdFormat = \"appId=cid-v1:\";\r\n    /**\r\n     * Request-Id header\r\n     */\r\n    RequestHeaders.requestIdHeader = \"Request-Id\";\r\n    /**\r\n     * Sdk-Context header\r\n     * If this header passed with appId in content then appId will be returned back by the backend.\r\n     */\r\n    RequestHeaders.sdkContextHeader = \"Sdk-Context\";\r\n    /**\r\n     * String to pass in header for requesting appId back from the backend.\r\n     */\r\n    RequestHeaders.sdkContextHeaderAppIdRequest = \"appId\";\r\n    RequestHeaders.requestContextHeaderLowerCase = \"request-context\";\r\n    return RequestHeaders;\r\n}());\r\nexport { RequestHeaders };\r\n//# sourceMappingURL=RequestResponseHeaders.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\r\nvar DataSanitizer = /** @class */ (function () {\r\n    function DataSanitizer() {\r\n    }\r\n    DataSanitizer.sanitizeKeyAndAddUniqueness = function (logger, key, map) {\r\n        var origLength = key.length;\r\n        var field = DataSanitizer.sanitizeKey(logger, key);\r\n        // validation truncated the length.  We need to add uniqueness\r\n        if (field.length !== origLength) {\r\n            var i = 0;\r\n            var uniqueField = field;\r\n            while (map[uniqueField] !== undefined) {\r\n                i++;\r\n                uniqueField = field.substring(0, DataSanitizer.MAX_NAME_LENGTH - 3) + DataSanitizer.padNumber(i);\r\n            }\r\n            field = uniqueField;\r\n        }\r\n        return field;\r\n    };\r\n    DataSanitizer.sanitizeKey = function (logger, name) {\r\n        var nameTrunc;\r\n        if (name) {\r\n            // Remove any leading or trailing whitepace\r\n            name = DataSanitizer.trim(name.toString());\r\n            // truncate the string to 150 chars\r\n            if (name.length > DataSanitizer.MAX_NAME_LENGTH) {\r\n                nameTrunc = name.substring(0, DataSanitizer.MAX_NAME_LENGTH);\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.NameTooLong, \"name is too long.  It has been truncated to \" + DataSanitizer.MAX_NAME_LENGTH + \" characters.\", { name: name }, true);\r\n            }\r\n        }\r\n        return nameTrunc || name;\r\n    };\r\n    DataSanitizer.sanitizeString = function (logger, value, maxLength) {\r\n        if (maxLength === void 0) { maxLength = DataSanitizer.MAX_STRING_LENGTH; }\r\n        var valueTrunc;\r\n        if (value) {\r\n            maxLength = maxLength ? maxLength : DataSanitizer.MAX_STRING_LENGTH; // in case default parameters dont work\r\n            value = DataSanitizer.trim(value);\r\n            if (value.toString().length > maxLength) {\r\n                valueTrunc = value.toString().substring(0, maxLength);\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.StringValueTooLong, \"string value is too long. It has been truncated to \" + maxLength + \" characters.\", { value: value }, true);\r\n            }\r\n        }\r\n        return valueTrunc || value;\r\n    };\r\n    DataSanitizer.sanitizeUrl = function (logger, url) {\r\n        return DataSanitizer.sanitizeInput(logger, url, DataSanitizer.MAX_URL_LENGTH, _InternalMessageId.UrlTooLong);\r\n    };\r\n    DataSanitizer.sanitizeMessage = function (logger, message) {\r\n        var messageTrunc;\r\n        if (message) {\r\n            if (message.length > DataSanitizer.MAX_MESSAGE_LENGTH) {\r\n                messageTrunc = message.substring(0, DataSanitizer.MAX_MESSAGE_LENGTH);\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.MessageTruncated, \"message is too long, it has been truncated to \" + DataSanitizer.MAX_MESSAGE_LENGTH + \" characters.\", { message: message }, true);\r\n            }\r\n        }\r\n        return messageTrunc || message;\r\n    };\r\n    DataSanitizer.sanitizeException = function (logger, exception) {\r\n        var exceptionTrunc;\r\n        if (exception) {\r\n            if (exception.length > DataSanitizer.MAX_EXCEPTION_LENGTH) {\r\n                exceptionTrunc = exception.substring(0, DataSanitizer.MAX_EXCEPTION_LENGTH);\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ExceptionTruncated, \"exception is too long, it has been truncated to \" + DataSanitizer.MAX_EXCEPTION_LENGTH + \" characters.\", { exception: exception }, true);\r\n            }\r\n        }\r\n        return exceptionTrunc || exception;\r\n    };\r\n    DataSanitizer.sanitizeProperties = function (logger, properties) {\r\n        if (properties) {\r\n            var tempProps = {};\r\n            for (var prop in properties) {\r\n                var value = properties[prop];\r\n                if (typeof value === \"object\" && typeof JSON !== \"undefined\") {\r\n                    // Stringify any part C properties\r\n                    try {\r\n                        value = JSON.stringify(value);\r\n                    }\r\n                    catch (e) {\r\n                        logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, \"custom property is not valid\", { exception: e }, true);\r\n                    }\r\n                }\r\n                value = DataSanitizer.sanitizeString(logger, value, DataSanitizer.MAX_PROPERTY_LENGTH);\r\n                prop = DataSanitizer.sanitizeKeyAndAddUniqueness(logger, prop, tempProps);\r\n                tempProps[prop] = value;\r\n            }\r\n            properties = tempProps;\r\n        }\r\n        return properties;\r\n    };\r\n    DataSanitizer.sanitizeMeasurements = function (logger, measurements) {\r\n        if (measurements) {\r\n            var tempMeasurements = {};\r\n            for (var measure in measurements) {\r\n                var value = measurements[measure];\r\n                measure = DataSanitizer.sanitizeKeyAndAddUniqueness(logger, measure, tempMeasurements);\r\n                tempMeasurements[measure] = value;\r\n            }\r\n            measurements = tempMeasurements;\r\n        }\r\n        return measurements;\r\n    };\r\n    DataSanitizer.sanitizeId = function (logger, id) {\r\n        return id ? DataSanitizer.sanitizeInput(logger, id, DataSanitizer.MAX_ID_LENGTH, _InternalMessageId.IdTooLong).toString() : id;\r\n    };\r\n    DataSanitizer.sanitizeInput = function (logger, input, maxLength, _msgId) {\r\n        var inputTrunc;\r\n        if (input) {\r\n            input = DataSanitizer.trim(input);\r\n            if (input.length > maxLength) {\r\n                inputTrunc = input.substring(0, maxLength);\r\n                logger.throwInternal(LoggingSeverity.WARNING, _msgId, \"input is too long, it has been truncated to \" + maxLength + \" characters.\", { data: input }, true);\r\n            }\r\n        }\r\n        return inputTrunc || input;\r\n    };\r\n    DataSanitizer.padNumber = function (num) {\r\n        var s = \"00\" + num;\r\n        return s.substr(s.length - 3);\r\n    };\r\n    /**\r\n     * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n     */\r\n    DataSanitizer.trim = function (str) {\r\n        if (typeof str !== \"string\")\r\n            return str;\r\n        return str.replace(/^\\s+|\\s+$/g, \"\");\r\n    };\r\n    /**\r\n    * Max length allowed for custom names.\r\n    */\r\n    DataSanitizer.MAX_NAME_LENGTH = 150;\r\n    /**\r\n     * Max length allowed for Id field in page views.\r\n     */\r\n    DataSanitizer.MAX_ID_LENGTH = 128;\r\n    /**\r\n     * Max length allowed for custom values.\r\n     */\r\n    DataSanitizer.MAX_PROPERTY_LENGTH = 8192;\r\n    /**\r\n     * Max length allowed for names\r\n     */\r\n    DataSanitizer.MAX_STRING_LENGTH = 1024;\r\n    /**\r\n     * Max length allowed for url.\r\n     */\r\n    DataSanitizer.MAX_URL_LENGTH = 2048;\r\n    /**\r\n     * Max length allowed for messages.\r\n     */\r\n    DataSanitizer.MAX_MESSAGE_LENGTH = 32768;\r\n    /**\r\n     * Max length allowed for exceptions.\r\n     */\r\n    DataSanitizer.MAX_EXCEPTION_LENGTH = 32768;\r\n    return DataSanitizer;\r\n}());\r\nexport { DataSanitizer };\r\n//# sourceMappingURL=DataSanitizer.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { StorageType } from \"./Enums\";\r\nimport { CoreUtils, _InternalMessageId, LoggingSeverity } from \"@microsoft/applicationinsights-core-js\";\r\nimport { RequestHeaders } from \"./RequestResponseHeaders\";\r\nimport { DataSanitizer } from \"./Telemetry/Common/DataSanitizer\";\r\nvar Util = /** @class */ (function () {\r\n    function Util() {\r\n    }\r\n    /*\r\n     * Force the SDK not to use local and session storage\r\n    */\r\n    Util.disableStorage = function () {\r\n        Util._canUseLocalStorage = false;\r\n        Util._canUseSessionStorage = false;\r\n    };\r\n    /**\r\n     * Gets the localStorage object if available\r\n     * @return {Storage} - Returns the storage object if available else returns null\r\n     */\r\n    Util._getLocalStorageObject = function () {\r\n        if (Util.canUseLocalStorage()) {\r\n            return Util._getVerifiedStorageObject(StorageType.LocalStorage);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Tests storage object (localStorage or sessionStorage) to verify that it is usable\r\n     * More details here: https://mathiasbynens.be/notes/localstorage-pattern\r\n     * @param storageType Type of storage\r\n     * @return {Storage} Returns storage object verified that it is usable\r\n     */\r\n    Util._getVerifiedStorageObject = function (storageType) {\r\n        var storage = null;\r\n        var fail;\r\n        var uid;\r\n        try {\r\n            if (typeof window === 'undefined') {\r\n                return null;\r\n            }\r\n            uid = new Date;\r\n            storage = storageType === StorageType.LocalStorage ? window.localStorage : window.sessionStorage;\r\n            storage.setItem(uid, uid);\r\n            fail = storage.getItem(uid) != uid;\r\n            storage.removeItem(uid);\r\n            if (fail) {\r\n                storage = null;\r\n            }\r\n        }\r\n        catch (exception) {\r\n            storage = null;\r\n        }\r\n        return storage;\r\n    };\r\n    /**\r\n     *  Checks if endpoint URL is application insights internal injestion service URL.\r\n     *\r\n     *  @param endpointUrl Endpoint URL to check.\r\n     *  @returns {boolean} True if if endpoint URL is application insights internal injestion service URL.\r\n     */\r\n    Util.isInternalApplicationInsightsEndpoint = function (endpointUrl) {\r\n        return Util._internalEndpoints.indexOf(endpointUrl.toLowerCase()) !== -1;\r\n    };\r\n    /**\r\n     *  Check if the browser supports local storage.\r\n     *\r\n     *  @returns {boolean} True if local storage is supported.\r\n     */\r\n    Util.canUseLocalStorage = function () {\r\n        if (Util._canUseLocalStorage === undefined) {\r\n            Util._canUseLocalStorage = !!Util._getVerifiedStorageObject(StorageType.LocalStorage);\r\n        }\r\n        return Util._canUseLocalStorage;\r\n    };\r\n    /**\r\n     *  Get an object from the browser's local storage\r\n     *\r\n     *  @param {string} name - the name of the object to get from storage\r\n     *  @returns {string} The contents of the storage object with the given name. Null if storage is not supported.\r\n     */\r\n    Util.getStorage = function (logger, name) {\r\n        var storage = Util._getLocalStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                return storage.getItem(name);\r\n            }\r\n            catch (e) {\r\n                Util._canUseLocalStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotReadLocalStorage, \"Browser failed read of local storage. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     *  Set the contents of an object in the browser's local storage\r\n     *\r\n     *  @param {string} name - the name of the object to set in storage\r\n     *  @param {string} data - the contents of the object to set in storage\r\n     *  @returns {boolean} True if the storage object could be written.\r\n     */\r\n    Util.setStorage = function (logger, name, data) {\r\n        var storage = Util._getLocalStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                storage.setItem(name, data);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                Util._canUseLocalStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotWriteLocalStorage, \"Browser failed write to local storage. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     *  Remove an object from the browser's local storage\r\n     *\r\n     *  @param {string} name - the name of the object to remove from storage\r\n     *  @returns {boolean} True if the storage object could be removed.\r\n     */\r\n    Util.removeStorage = function (logger, name) {\r\n        var storage = Util._getLocalStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                storage.removeItem(name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                Util._canUseLocalStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserFailedRemovalFromLocalStorage, \"Browser failed removal of local storage item. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Gets the sessionStorage object if available\r\n     * @return {Storage} - Returns the storage object if available else returns null\r\n     */\r\n    Util._getSessionStorageObject = function () {\r\n        if (Util.canUseSessionStorage()) {\r\n            return Util._getVerifiedStorageObject(StorageType.SessionStorage);\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     *  Check if the browser supports session storage.\r\n     *\r\n     *  @returns {boolean} True if session storage is supported.\r\n     */\r\n    Util.canUseSessionStorage = function () {\r\n        if (Util._canUseSessionStorage === undefined) {\r\n            Util._canUseSessionStorage = !!Util._getVerifiedStorageObject(StorageType.SessionStorage);\r\n        }\r\n        return Util._canUseSessionStorage;\r\n    };\r\n    /**\r\n     *  Gets the list of session storage keys\r\n     *\r\n     *  @returns {string[]} List of session storage keys\r\n     */\r\n    Util.getSessionStorageKeys = function () {\r\n        var keys = [];\r\n        if (Util.canUseSessionStorage()) {\r\n            for (var key in window.sessionStorage) {\r\n                keys.push(key);\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n    /**\r\n     *  Get an object from the browser's session storage\r\n     *\r\n     *  @param {string} name - the name of the object to get from storage\r\n     *  @returns {string} The contents of the storage object with the given name. Null if storage is not supported.\r\n     */\r\n    Util.getSessionStorage = function (logger, name) {\r\n        var storage = Util._getSessionStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                return storage.getItem(name);\r\n            }\r\n            catch (e) {\r\n                Util._canUseSessionStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotReadSessionStorage, \"Browser failed read of session storage. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     *  Set the contents of an object in the browser's session storage\r\n     *\r\n     *  @param {string} name - the name of the object to set in storage\r\n     *  @param {string} data - the contents of the object to set in storage\r\n     *  @returns {boolean} True if the storage object could be written.\r\n     */\r\n    Util.setSessionStorage = function (logger, name, data) {\r\n        var storage = Util._getSessionStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                storage.setItem(name, data);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                Util._canUseSessionStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserCannotWriteSessionStorage, \"Browser failed write to session storage. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     *  Remove an object from the browser's session storage\r\n     *\r\n     *  @param {string} name - the name of the object to remove from storage\r\n     *  @returns {boolean} True if the storage object could be removed.\r\n     */\r\n    Util.removeSessionStorage = function (logger, name) {\r\n        var storage = Util._getSessionStorageObject();\r\n        if (storage !== null) {\r\n            try {\r\n                storage.removeItem(name);\r\n                return true;\r\n            }\r\n            catch (e) {\r\n                Util._canUseSessionStorage = false;\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserFailedRemovalFromSessionStorage, \"Browser failed removal of session storage item. \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /*\r\n     * Force the SDK not to store and read any data from cookies\r\n     */\r\n    Util.disableCookies = function () {\r\n        CoreUtils.disableCookies();\r\n    };\r\n    /*\r\n     * helper method to tell if document.cookie object is available\r\n     */\r\n    Util.canUseCookies = function (logger) {\r\n        if (CoreUtils._canUseCookies === undefined) {\r\n            CoreUtils._canUseCookies = false;\r\n            try {\r\n                CoreUtils._canUseCookies = Util.document.cookie !== undefined;\r\n            }\r\n            catch (e) {\r\n                logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotAccessCookie, \"Cannot access document.cookie - \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n            ;\r\n        }\r\n        return CoreUtils._canUseCookies;\r\n    };\r\n    /**\r\n     * helper method to set userId and sessionId cookie\r\n     */\r\n    Util.setCookie = function (logger, name, value, domain) {\r\n        var domainAttrib = \"\";\r\n        var secureAttrib = \"\";\r\n        if (domain) {\r\n            domainAttrib = \";domain=\" + domain;\r\n        }\r\n        if (Util.document.location && Util.document.location.protocol === \"https:\") {\r\n            secureAttrib = \";secure\";\r\n        }\r\n        if (Util.canUseCookies(logger)) {\r\n            Util.document.cookie = name + \"=\" + value + domainAttrib + \";path=/\" + secureAttrib;\r\n        }\r\n    };\r\n    Util.stringToBoolOrDefault = function (str, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = false; }\r\n        if (str === undefined || str === null) {\r\n            return defaultValue;\r\n        }\r\n        return str.toString().toLowerCase() === \"true\";\r\n    };\r\n    /**\r\n     * helper method to access userId and sessionId cookie\r\n     */\r\n    Util.getCookie = function (logger, name) {\r\n        if (!Util.canUseCookies(logger)) {\r\n            return;\r\n        }\r\n        var value = \"\";\r\n        if (name && name.length) {\r\n            var cookieName = name + \"=\";\r\n            var cookies = Util.document.cookie.split(\";\");\r\n            for (var i = 0; i < cookies.length; i++) {\r\n                var cookie = cookies[i];\r\n                cookie = Util.trim(cookie);\r\n                if (cookie && cookie.indexOf(cookieName) === 0) {\r\n                    value = cookie.substring(cookieName.length, cookies[i].length);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return value;\r\n    };\r\n    /**\r\n     * Deletes a cookie by setting it's expiration time in the past.\r\n     * @param name - The name of the cookie to delete.\r\n     */\r\n    Util.deleteCookie = function (logger, name) {\r\n        if (Util.canUseCookies(logger)) {\r\n            // Setting the expiration date in the past immediately removes the cookie\r\n            Util.document.cookie = name + \"=;path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT;\";\r\n        }\r\n    };\r\n    /**\r\n     * helper method to trim strings (IE8 does not implement String.prototype.trim)\r\n     */\r\n    Util.trim = function (str) {\r\n        if (typeof str !== \"string\")\r\n            return str;\r\n        return str.replace(/^\\s+|\\s+$/g, \"\");\r\n    };\r\n    /**\r\n     * generate random id string\r\n     */\r\n    Util.newId = function () {\r\n        var base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n        var result = \"\";\r\n        // tslint:disable-next-line:insecure-random\r\n        var random = Math.random() * 1073741824; //5 symbols in base64, almost maxint\r\n        while (random > 0) {\r\n            var char = base64chars.charAt(random % 64);\r\n            result += char;\r\n            random = Math.floor(random / 64);\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Check if an object is of type Array\r\n     */\r\n    Util.isArray = function (obj) {\r\n        return Object.prototype.toString.call(obj) === \"[object Array]\";\r\n    };\r\n    /**\r\n     * Check if an object is of type Error\r\n     */\r\n    Util.isError = function (obj) {\r\n        return Object.prototype.toString.call(obj) === \"[object Error]\";\r\n    };\r\n    /**\r\n     * Check if an object is of type Date\r\n     */\r\n    Util.isDate = function (obj) {\r\n        return Object.prototype.toString.call(obj) === \"[object Date]\";\r\n    };\r\n    /**\r\n     * Convert a date to I.S.O. format in IE8\r\n     */\r\n    Util.toISOStringForIE8 = function (date) {\r\n        if (Util.isDate(date)) {\r\n            if (Date.prototype.toISOString) {\r\n                return date.toISOString();\r\n            }\r\n            else {\r\n                var pad = function (num) {\r\n                    var r = String(num);\r\n                    if (r.length === 1) {\r\n                        r = \"0\" + r;\r\n                    }\r\n                    return r;\r\n                };\r\n                return date.getUTCFullYear()\r\n                    + \"-\" + pad(date.getUTCMonth() + 1)\r\n                    + \"-\" + pad(date.getUTCDate())\r\n                    + \"T\" + pad(date.getUTCHours())\r\n                    + \":\" + pad(date.getUTCMinutes())\r\n                    + \":\" + pad(date.getUTCSeconds())\r\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\r\n                    + \"Z\";\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Gets IE version if we are running on IE, or null otherwise\r\n     */\r\n    Util.getIEVersion = function (userAgentStr) {\r\n        if (userAgentStr === void 0) { userAgentStr = null; }\r\n        var myNav = userAgentStr ? userAgentStr.toLowerCase() : navigator.userAgent.toLowerCase();\r\n        return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : null;\r\n    };\r\n    /**\r\n     * Convert ms to c# time span format\r\n     */\r\n    Util.msToTimeSpan = function (totalms) {\r\n        if (isNaN(totalms) || totalms < 0) {\r\n            totalms = 0;\r\n        }\r\n        totalms = Math.round(totalms);\r\n        var ms = \"\" + totalms % 1000;\r\n        var sec = \"\" + Math.floor(totalms / 1000) % 60;\r\n        var min = \"\" + Math.floor(totalms / (1000 * 60)) % 60;\r\n        var hour = \"\" + Math.floor(totalms / (1000 * 60 * 60)) % 24;\r\n        var days = Math.floor(totalms / (1000 * 60 * 60 * 24));\r\n        ms = ms.length === 1 ? \"00\" + ms : ms.length === 2 ? \"0\" + ms : ms;\r\n        sec = sec.length < 2 ? \"0\" + sec : sec;\r\n        min = min.length < 2 ? \"0\" + min : min;\r\n        hour = hour.length < 2 ? \"0\" + hour : hour;\r\n        return (days > 0 ? days + \".\" : \"\") + hour + \":\" + min + \":\" + sec + \".\" + ms;\r\n    };\r\n    /**\r\n    * Checks if error has no meaningful data inside. Ususally such errors are received by window.onerror when error\r\n    * happens in a script from other domain (cross origin, CORS).\r\n    */\r\n    Util.isCrossOriginError = function (message, url, lineNumber, columnNumber, error) {\r\n        return (message === \"Script error.\" || message === \"Script error\") && !error;\r\n    };\r\n    /**\r\n    * Returns string representation of an object suitable for diagnostics logging.\r\n    */\r\n    Util.dump = function (object) {\r\n        var objectTypeDump = Object.prototype.toString.call(object);\r\n        var propertyValueDump = JSON.stringify(object);\r\n        if (objectTypeDump === \"[object Error]\") {\r\n            propertyValueDump = \"{ stack: '\" + object.stack + \"', message: '\" + object.message + \"', name: '\" + object.name + \"'\";\r\n        }\r\n        return objectTypeDump + propertyValueDump;\r\n    };\r\n    /**\r\n    * Returns the name of object if it's an Error. Otherwise, returns empty string.\r\n    */\r\n    Util.getExceptionName = function (object) {\r\n        var objectTypeDump = Object.prototype.toString.call(object);\r\n        if (objectTypeDump === \"[object Error]\") {\r\n            return object.name;\r\n        }\r\n        return \"\";\r\n    };\r\n    /**\r\n     * Adds an event handler for the specified event\r\n     * @param eventName {string} - The name of the event\r\n     * @param callback {any} - The callback function that needs to be executed for the given event\r\n     * @return {boolean} - true if the handler was successfully added\r\n     */\r\n    Util.addEventHandler = function (eventName, callback) {\r\n        if (typeof window === 'undefined' || !window || typeof eventName !== 'string' || typeof callback !== 'function') {\r\n            return false;\r\n        }\r\n        // Create verb for the event\r\n        var verbEventName = 'on' + eventName;\r\n        // check if addEventListener is available\r\n        if (window.addEventListener) {\r\n            window.addEventListener(eventName, callback, false);\r\n        }\r\n        else if (window[\"attachEvent\"]) {\r\n            window[\"attachEvent\"](verbEventName, callback);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Tells if a browser supports a Beacon API\r\n     */\r\n    Util.IsBeaconApiSupported = function () {\r\n        return ('sendBeacon' in navigator && navigator.sendBeacon);\r\n    };\r\n    Util.getExtension = function (extensions, identifier) {\r\n        var extension = null;\r\n        var extIx = 0;\r\n        while (!extension && extIx < extensions.length) {\r\n            if (extensions[extIx] && extensions[extIx].identifier === identifier) {\r\n                extension = extensions[extIx];\r\n            }\r\n            extIx++;\r\n        }\r\n        return extension;\r\n    };\r\n    Util.document = typeof document !== \"undefined\" ? document : {};\r\n    Util._canUseLocalStorage = undefined;\r\n    Util._canUseSessionStorage = undefined;\r\n    // listing only non-geo specific locations\r\n    Util._internalEndpoints = [\r\n        \"https://dc.services.visualstudio.com/v2/track\",\r\n        \"https://breeze.aimon.applicationinsights.io/v2/track\",\r\n        \"https://dc-int.services.visualstudio.com/v2/track\"\r\n    ];\r\n    Util.NotSpecified = \"not_specified\";\r\n    return Util;\r\n}());\r\nexport { Util };\r\nvar UrlHelper = /** @class */ (function () {\r\n    function UrlHelper() {\r\n    }\r\n    UrlHelper.parseUrl = function (url) {\r\n        if (!UrlHelper.htmlAnchorElement) {\r\n            UrlHelper.htmlAnchorElement = !!UrlHelper.document.createElement ? UrlHelper.document.createElement('a') : { host: UrlHelper.parseHost(url) }; // fill host field in the fallback case as that is the only externally required field from this fn\r\n        }\r\n        UrlHelper.htmlAnchorElement.href = url;\r\n        return UrlHelper.htmlAnchorElement;\r\n    };\r\n    UrlHelper.getAbsoluteUrl = function (url) {\r\n        var result;\r\n        var a = UrlHelper.parseUrl(url);\r\n        if (a) {\r\n            result = a.href;\r\n        }\r\n        return result;\r\n    };\r\n    UrlHelper.getPathName = function (url) {\r\n        var result;\r\n        var a = UrlHelper.parseUrl(url);\r\n        if (a) {\r\n            result = a.pathname;\r\n        }\r\n        return result;\r\n    };\r\n    UrlHelper.getCompleteUrl = function (method, absoluteUrl) {\r\n        if (method) {\r\n            return method.toUpperCase() + \" \" + absoluteUrl;\r\n        }\r\n        else {\r\n            return absoluteUrl;\r\n        }\r\n    };\r\n    // Fallback method to grab host from url if document.createElement method is not available\r\n    UrlHelper.parseHost = function (url) {\r\n        var match = url.match(/:\\/\\/(www[0-9]?\\.)?(.[^/:]+)/i);\r\n        if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {\r\n            return match[2];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    UrlHelper.document = typeof document !== \"undefined\" ? document : {};\r\n    return UrlHelper;\r\n}());\r\nexport { UrlHelper };\r\nvar CorrelationIdHelper = /** @class */ (function () {\r\n    function CorrelationIdHelper() {\r\n    }\r\n    /**\r\n    * Checks if a request url is not on a excluded domain list and if it is safe to add correlation headers\r\n    */\r\n    CorrelationIdHelper.canIncludeCorrelationHeader = function (config, requestUrl, currentHost) {\r\n        if (config && config.disableCorrelationHeaders) {\r\n            return false;\r\n        }\r\n        if (!requestUrl) {\r\n            return false;\r\n        }\r\n        var requestHost = UrlHelper.parseUrl(requestUrl).host.toLowerCase();\r\n        if ((!config || !config.enableCorsCorrelation) && requestHost !== currentHost) {\r\n            return false;\r\n        }\r\n        var includedDomains = config && config.correlationHeaderDomains;\r\n        if (includedDomains) {\r\n            var matchExists_1;\r\n            includedDomains.forEach(function (domain) {\r\n                var regex = new RegExp(domain.toLowerCase().replace(/\\./g, \"\\.\").replace(/\\*/g, \".*\"));\r\n                matchExists_1 = matchExists_1 || regex.test(requestHost);\r\n            });\r\n            if (!matchExists_1) {\r\n                return false;\r\n            }\r\n        }\r\n        var excludedDomains = config && config.correlationHeaderExcludedDomains;\r\n        if (!excludedDomains || excludedDomains.length == 0) {\r\n            return true;\r\n        }\r\n        for (var i = 0; i < excludedDomains.length; i++) {\r\n            var regex = new RegExp(excludedDomains[i].toLowerCase().replace(/\\./g, \"\\.\").replace(/\\*/g, \".*\"));\r\n            if (regex.test(requestHost)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n    * Combines target appId and target role name from response header.\r\n    */\r\n    CorrelationIdHelper.getCorrelationContext = function (responseHeader) {\r\n        if (responseHeader) {\r\n            var correlationId = CorrelationIdHelper.getCorrelationContextValue(responseHeader, RequestHeaders.requestContextTargetKey);\r\n            if (correlationId && correlationId !== CorrelationIdHelper.correlationIdPrefix) {\r\n                return correlationId;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n    * Gets key from correlation response header\r\n    */\r\n    CorrelationIdHelper.getCorrelationContextValue = function (responseHeader, key) {\r\n        if (responseHeader) {\r\n            var keyValues = responseHeader.split(\",\");\r\n            for (var i = 0; i < keyValues.length; ++i) {\r\n                var keyValue = keyValues[i].split(\"=\");\r\n                if (keyValue.length == 2 && keyValue[0] == key) {\r\n                    return keyValue[1];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    CorrelationIdHelper.correlationIdPrefix = \"cid-v1:\";\r\n    return CorrelationIdHelper;\r\n}());\r\nexport { CorrelationIdHelper };\r\nvar AjaxHelper = /** @class */ (function () {\r\n    function AjaxHelper() {\r\n    }\r\n    AjaxHelper.ParseDependencyPath = function (logger, absoluteUrl, method, commandName) {\r\n        var target, name = commandName, data = commandName;\r\n        if (absoluteUrl && absoluteUrl.length > 0) {\r\n            var parsedUrl = UrlHelper.parseUrl(absoluteUrl);\r\n            target = parsedUrl.host;\r\n            if (!name) {\r\n                if (parsedUrl.pathname != null) {\r\n                    var pathName = (parsedUrl.pathname.length === 0) ? \"/\" : parsedUrl.pathname;\r\n                    if (pathName.charAt(0) !== '/') {\r\n                        pathName = \"/\" + pathName;\r\n                    }\r\n                    data = parsedUrl.pathname;\r\n                    name = DataSanitizer.sanitizeString(logger, method ? method + \" \" + pathName : pathName);\r\n                }\r\n                else {\r\n                    name = DataSanitizer.sanitizeString(logger, absoluteUrl);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            target = commandName;\r\n            name = commandName;\r\n        }\r\n        return {\r\n            target: target,\r\n            name: name,\r\n            data: data\r\n        };\r\n    };\r\n    return AjaxHelper;\r\n}());\r\nexport { AjaxHelper };\r\n/**\r\n * A utility class that helps getting time related parameters\r\n */\r\nvar DateTimeUtils = /** @class */ (function () {\r\n    function DateTimeUtils() {\r\n    }\r\n    /**\r\n     * Get the number of milliseconds since 1970/01/01 in local timezone\r\n     */\r\n    DateTimeUtils.Now = (typeof window === 'undefined') ? function () { return new Date().getTime(); } :\r\n        (window.performance && window.performance.now && window.performance.timing) ?\r\n            function () {\r\n                return window.performance.now() + window.performance.timing.navigationStart;\r\n            }\r\n            :\r\n                function () {\r\n                    return new Date().getTime();\r\n                };\r\n    /**\r\n     * Gets duration between two timestamps\r\n     */\r\n    DateTimeUtils.GetDuration = function (start, end) {\r\n        var result = null;\r\n        if (start !== 0 && end !== 0 && !CoreUtils.isNullOrUndefined(start) && !CoreUtils.isNullOrUndefined(end)) {\r\n            result = end - start;\r\n        }\r\n        return result;\r\n    };\r\n    return DateTimeUtils;\r\n}());\r\nexport { DateTimeUtils };\r\n//# sourceMappingURL=Util.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport var DisabledPropertyName = \"Microsoft_ApplicationInsights_BypassAjaxInstrumentation\";\r\nexport var SampleRate = \"sampleRate\";\r\nexport var ProcessLegacy = \"ProcessLegacy\";\r\nexport var HttpMethod = \"http.method\";\r\n//# sourceMappingURL=Constants.js.map","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { Base } from './Base';\r\n/**\r\n * Data struct to contain both B and C sections.\r\n */\r\nvar Data = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Data, _super);\r\n    function Data() {\r\n        return _super.call(this) || this;\r\n    }\r\n    return Data;\r\n}(Base));\r\nexport { Data };\r\n//# sourceMappingURL=Data.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\n/**\r\n     * Data struct to contain only C section with custom fields.\r\n     */\r\nvar Base = /** @class */ (function () {\r\n    function Base() {\r\n    }\r\n    return Base;\r\n}());\r\nexport { Base };\r\n//# sourceMappingURL=Base.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * System variables for a telemetry item.\r\n */\r\nvar Envelope = /** @class */ (function () {\r\n    function Envelope() {\r\n        this.ver = 1;\r\n        this.sampleRate = 100.0;\r\n        this.tags = {};\r\n    }\r\n    return Envelope;\r\n}());\r\nexport { Envelope };\r\n//# sourceMappingURL=Envelope.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Envelope as AIEnvelope } from '../../Interfaces/Contracts/Generated/Envelope';\r\nimport { DataSanitizer } from './DataSanitizer';\r\nimport { FieldType } from '../../Enums';\r\nimport { Util } from '../../Util';\r\nvar Envelope = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Envelope, _super);\r\n    /**\r\n     * Constructs a new instance of telemetry data.\r\n     */\r\n    function Envelope(logger, data, name) {\r\n        var _this = _super.call(this) || this;\r\n        _this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        _this.data = data;\r\n        _this.time = Util.toISOStringForIE8(new Date());\r\n        _this.aiDataContract = {\r\n            time: FieldType.Required,\r\n            iKey: FieldType.Required,\r\n            name: FieldType.Required,\r\n            sampleRate: function () {\r\n                return (_this.sampleRate == 100) ? FieldType.Hidden : FieldType.Required;\r\n            },\r\n            tags: FieldType.Required,\r\n            data: FieldType.Required\r\n        };\r\n        return _this;\r\n    }\r\n    return Envelope;\r\n}(AIEnvelope));\r\nexport { Envelope };\r\n//# sourceMappingURL=Envelope.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\n/**\r\n * The abstract common base of all domains.\r\n */\r\nvar Domain = /** @class */ (function () {\r\n    function Domain() {\r\n    }\r\n    return Domain;\r\n}());\r\nexport { Domain };\r\n//# sourceMappingURL=Domain.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { Domain } from './Domain';\r\n/**\r\n * Instances of Event represent structured event records that can be grouped and searched by their properties. Event data item also creates a metric of event count by name.\r\n */\r\nvar EventData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(EventData, _super);\r\n    function EventData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return EventData;\r\n}(Domain));\r\nexport { EventData };\r\n//# sourceMappingURL=EventData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { EventData } from '../Interfaces/Contracts/Generated/EventData';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nvar Event = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Event, _super);\r\n    /**\r\n     * Constructs a new instance of the EventTelemetry object\r\n     */\r\n    function Event(logger, name, properties, measurements) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            name: FieldType.Required,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default\r\n        };\r\n        _this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n        return _this;\r\n    }\r\n    Event.envelopeType = \"Microsoft.ApplicationInsights.{0}.Event\";\r\n    Event.dataType = \"EventData\";\r\n    return Event;\r\n}(EventData));\r\nexport { Event };\r\n//# sourceMappingURL=Event.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\n/**\r\n * Stack frame information.\r\n */\r\nvar StackFrame = /** @class */ (function () {\r\n    function StackFrame() {\r\n    }\r\n    return StackFrame;\r\n}());\r\nexport { StackFrame };\r\n//# sourceMappingURL=StackFrame.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Domain } from './Domain';\r\n/**\r\n * An instance of Exception represents a handled or unhandled exception that occurred during execution of the monitored application.\r\n */\r\nvar ExceptionData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ExceptionData, _super);\r\n    function ExceptionData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.exceptions = [];\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return ExceptionData;\r\n}(Domain));\r\nexport { ExceptionData };\r\n//# sourceMappingURL=ExceptionData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * Exception details of the exception in a chain.\r\n */\r\nvar ExceptionDetails = /** @class */ (function () {\r\n    function ExceptionDetails() {\r\n        this.hasFullStack = true;\r\n        this.parsedStack = [];\r\n    }\r\n    return ExceptionDetails;\r\n}());\r\nexport { ExceptionDetails };\r\n//# sourceMappingURL=ExceptionDetails.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { StackFrame } from '../Interfaces/Contracts/Generated/StackFrame';\r\nimport { ExceptionData } from '../Interfaces/Contracts/Generated/ExceptionData';\r\nimport { ExceptionDetails } from '../Interfaces/Contracts/Generated/ExceptionDetails';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nimport { CoreUtils } from '@microsoft/applicationinsights-core-js';\r\nvar Exception = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Exception, _super);\r\n    /**\r\n    * Constructs a new instance of the ExceptionTelemetry object\r\n    */\r\n    function Exception(logger, exception, properties, measurements, severityLevel, id) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            exceptions: FieldType.Required,\r\n            severityLevel: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default\r\n        };\r\n        if (exception instanceof Error) {\r\n            _this.exceptions = [new _ExceptionDetails(logger, exception)];\r\n            _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n            _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n            if (severityLevel)\r\n                _this.severityLevel = severityLevel;\r\n            if (id)\r\n                _this.id = id;\r\n        }\r\n        else {\r\n            _this.exceptions = exception.exceptions;\r\n            _this.properties = exception.properties;\r\n            _this.measurements = exception.measurements;\r\n            if (exception.severityLevel)\r\n                _this.severityLevel = exception.severityLevel;\r\n            if (exception.id)\r\n                _this.id = exception.id;\r\n            if (exception.problemGroup)\r\n                _this.problemGroup = exception.problemGroup;\r\n            // bool/int types, use isNullOrUndefined\r\n            if (!CoreUtils.isNullOrUndefined(exception.ver))\r\n                _this.ver = exception.ver;\r\n            if (!CoreUtils.isNullOrUndefined(exception.isManual))\r\n                _this.isManual = exception.isManual;\r\n        }\r\n        return _this;\r\n    }\r\n    Exception.CreateFromInterface = function (logger, exception) {\r\n        var exceptions = exception.exceptions\r\n            && exception.exceptions.map(function (ex) { return _ExceptionDetails.CreateFromInterface(logger, ex); });\r\n        var exceptionData = new Exception(logger, tslib_1.__assign({}, exception, { exceptions: exceptions }));\r\n        return exceptionData;\r\n    };\r\n    Exception.prototype.toInterface = function () {\r\n        var _a = this, exceptions = _a.exceptions, properties = _a.properties, measurements = _a.measurements, severityLevel = _a.severityLevel, ver = _a.ver, problemGroup = _a.problemGroup, id = _a.id, isManual = _a.isManual;\r\n        var exceptionDetailsInterface = exceptions instanceof Array\r\n            && exceptions.map(function (exception) { return exception.toInterface(); })\r\n            || undefined;\r\n        return {\r\n            ver: ver,\r\n            exceptions: exceptionDetailsInterface,\r\n            severityLevel: severityLevel,\r\n            properties: properties,\r\n            measurements: measurements,\r\n            problemGroup: problemGroup,\r\n            id: id,\r\n            isManual: isManual\r\n        };\r\n    };\r\n    /**\r\n    * Creates a simple exception with 1 stack frame. Useful for manual constracting of exception.\r\n    */\r\n    Exception.CreateSimpleException = function (message, typeName, assembly, fileName, details, line) {\r\n        return {\r\n            exceptions: [\r\n                {\r\n                    hasFullStack: true,\r\n                    message: message,\r\n                    stack: details,\r\n                    typeName: typeName\r\n                }\r\n            ]\r\n        };\r\n    };\r\n    Exception.envelopeType = \"Microsoft.ApplicationInsights.{0}.Exception\";\r\n    Exception.dataType = \"ExceptionData\";\r\n    return Exception;\r\n}(ExceptionData));\r\nexport { Exception };\r\nvar _ExceptionDetails = /** @class */ (function (_super) {\r\n    tslib_1.__extends(_ExceptionDetails, _super);\r\n    function _ExceptionDetails(logger, exception) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            id: FieldType.Default,\r\n            outerId: FieldType.Default,\r\n            typeName: FieldType.Required,\r\n            message: FieldType.Required,\r\n            hasFullStack: FieldType.Default,\r\n            stack: FieldType.Default,\r\n            parsedStack: FieldType.Array\r\n        };\r\n        if (exception instanceof Error) {\r\n            _this.typeName = DataSanitizer.sanitizeString(logger, exception.name) || Util.NotSpecified;\r\n            _this.message = DataSanitizer.sanitizeMessage(logger, exception.message) || Util.NotSpecified;\r\n            var stack = exception.stack;\r\n            _this.parsedStack = _ExceptionDetails.parseStack(stack);\r\n            _this.stack = DataSanitizer.sanitizeException(logger, stack);\r\n            _this.hasFullStack = Util.isArray(_this.parsedStack) && _this.parsedStack.length > 0;\r\n        }\r\n        else {\r\n            _this.typeName = exception.typeName;\r\n            _this.message = exception.message;\r\n            _this.stack = exception.stack;\r\n            _this.parsedStack = exception.parsedStack;\r\n            _this.hasFullStack = exception.hasFullStack;\r\n        }\r\n        return _this;\r\n    }\r\n    _ExceptionDetails.prototype.toInterface = function () {\r\n        var parsedStack = this.parsedStack instanceof Array\r\n            && this.parsedStack.map(function (frame) { return frame.toInterface(); });\r\n        var exceptionDetailsInterface = {\r\n            id: this.id,\r\n            outerId: this.outerId,\r\n            typeName: this.typeName,\r\n            message: this.message,\r\n            hasFullStack: this.hasFullStack,\r\n            stack: this.stack,\r\n            parsedStack: parsedStack || undefined\r\n        };\r\n        return exceptionDetailsInterface;\r\n    };\r\n    _ExceptionDetails.CreateFromInterface = function (logger, exception) {\r\n        var parsedStack = (exception.parsedStack instanceof Array\r\n            && exception.parsedStack.map(function (frame) { return _StackFrame.CreateFromInterface(frame); }))\r\n            || exception.parsedStack;\r\n        var exceptionDetails = new _ExceptionDetails(logger, tslib_1.__assign({}, exception, { parsedStack: parsedStack }));\r\n        return exceptionDetails;\r\n    };\r\n    _ExceptionDetails.parseStack = function (stack) {\r\n        var parsedStack = undefined;\r\n        if (typeof stack === \"string\") {\r\n            var frames = stack.split('\\n');\r\n            parsedStack = [];\r\n            var level = 0;\r\n            var totalSizeInBytes = 0;\r\n            for (var i = 0; i <= frames.length; i++) {\r\n                var frame = frames[i];\r\n                if (_StackFrame.regex.test(frame)) {\r\n                    var parsedFrame = new _StackFrame(frames[i], level++);\r\n                    totalSizeInBytes += parsedFrame.sizeInBytes;\r\n                    parsedStack.push(parsedFrame);\r\n                }\r\n            }\r\n            // DP Constraint - exception parsed stack must be < 32KB\r\n            // remove frames from the middle to meet the threshold\r\n            var exceptionParsedStackThreshold = 32 * 1024;\r\n            if (totalSizeInBytes > exceptionParsedStackThreshold) {\r\n                var left = 0;\r\n                var right = parsedStack.length - 1;\r\n                var size = 0;\r\n                var acceptedLeft = left;\r\n                var acceptedRight = right;\r\n                while (left < right) {\r\n                    // check size\r\n                    var lSize = parsedStack[left].sizeInBytes;\r\n                    var rSize = parsedStack[right].sizeInBytes;\r\n                    size += lSize + rSize;\r\n                    if (size > exceptionParsedStackThreshold) {\r\n                        // remove extra frames from the middle\r\n                        var howMany = acceptedRight - acceptedLeft + 1;\r\n                        parsedStack.splice(acceptedLeft, howMany);\r\n                        break;\r\n                    }\r\n                    // update pointers\r\n                    acceptedLeft = left;\r\n                    acceptedRight = right;\r\n                    left++;\r\n                    right--;\r\n                }\r\n            }\r\n        }\r\n        return parsedStack;\r\n    };\r\n    return _ExceptionDetails;\r\n}(ExceptionDetails));\r\nexport { _ExceptionDetails };\r\nvar _StackFrame = /** @class */ (function (_super) {\r\n    tslib_1.__extends(_StackFrame, _super);\r\n    function _StackFrame(sourceFrame, level) {\r\n        var _this = _super.call(this) || this;\r\n        _this.sizeInBytes = 0;\r\n        _this.aiDataContract = {\r\n            level: FieldType.Required,\r\n            method: FieldType.Required,\r\n            assembly: FieldType.Default,\r\n            fileName: FieldType.Default,\r\n            line: FieldType.Default,\r\n        };\r\n        if (typeof sourceFrame === \"string\") {\r\n            var frame = sourceFrame;\r\n            _this.level = level;\r\n            _this.method = \"<no_method>\";\r\n            _this.assembly = Util.trim(frame);\r\n            _this.fileName = \"\";\r\n            _this.line = 0;\r\n            var matches = frame.match(_StackFrame.regex);\r\n            if (matches && matches.length >= 5) {\r\n                _this.method = Util.trim(matches[2]) || _this.method;\r\n                _this.fileName = Util.trim(matches[4]);\r\n                _this.line = parseInt(matches[5]) || 0;\r\n            }\r\n        }\r\n        else {\r\n            _this.level = sourceFrame.level;\r\n            _this.method = sourceFrame.method;\r\n            _this.assembly = sourceFrame.assembly;\r\n            _this.fileName = sourceFrame.fileName;\r\n            _this.line = sourceFrame.line;\r\n            _this.sizeInBytes = 0;\r\n        }\r\n        _this.sizeInBytes += _this.method.length;\r\n        _this.sizeInBytes += _this.fileName.length;\r\n        _this.sizeInBytes += _this.assembly.length;\r\n        // todo: these might need to be removed depending on how the back-end settles on their size calculation\r\n        _this.sizeInBytes += _StackFrame.baseSize;\r\n        _this.sizeInBytes += _this.level.toString().length;\r\n        _this.sizeInBytes += _this.line.toString().length;\r\n        return _this;\r\n    }\r\n    _StackFrame.CreateFromInterface = function (frame) {\r\n        return new _StackFrame(frame, null /* level is available in frame interface */);\r\n    };\r\n    _StackFrame.prototype.toInterface = function () {\r\n        return {\r\n            level: this.level,\r\n            method: this.method,\r\n            assembly: this.assembly,\r\n            fileName: this.fileName,\r\n            line: this.line\r\n        };\r\n    };\r\n    // regex to match stack frames from ie/chrome/ff\r\n    // methodName=$2, fileName=$4, lineNo=$5, column=$6\r\n    _StackFrame.regex = /^([\\s]+at)?(.*?)(\\@|\\s\\(|\\s)([^\\(\\@\\n]+):([0-9]+):([0-9]+)(\\)?)$/;\r\n    _StackFrame.baseSize = 58; //'{\"method\":\"\",\"level\":,\"assembly\":\"\",\"fileName\":\"\",\"line\":}'.length\r\n    return _StackFrame;\r\n}(StackFrame));\r\nexport { _StackFrame };\r\n//# sourceMappingURL=Exception.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { Domain } from './Domain';\r\n/**\r\n * An instance of the Metric item is a list of measurements (single data points) and/or aggregations.\r\n */\r\nvar MetricData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MetricData, _super);\r\n    function MetricData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.metrics = [];\r\n        _this.properties = {};\r\n        return _this;\r\n    }\r\n    return MetricData;\r\n}(Domain));\r\nexport { MetricData };\r\n//# sourceMappingURL=MetricData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\n/**\r\n * Type of the metric data measurement.\r\n */\r\nexport var DataPointType;\r\n(function (DataPointType) {\r\n    DataPointType[DataPointType[\"Measurement\"] = 0] = \"Measurement\";\r\n    DataPointType[DataPointType[\"Aggregation\"] = 1] = \"Aggregation\";\r\n})(DataPointType || (DataPointType = {}));\r\n//# sourceMappingURL=DataPointType.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { DataPointType } from './DataPointType';\r\n/**\r\n * Metric data single measurement.\r\n */\r\nvar DataPoint = /** @class */ (function () {\r\n    function DataPoint() {\r\n        this.kind = DataPointType.Measurement;\r\n    }\r\n    return DataPoint;\r\n}());\r\nexport { DataPoint };\r\n//# sourceMappingURL=DataPoint.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { DataPoint as AIDataPoint } from '../../Interfaces/Contracts/Generated/DataPoint';\r\nimport { FieldType } from '../../Enums';\r\nvar DataPoint = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DataPoint, _super);\r\n    function DataPoint() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * The data contract for serializing this object.\r\n         */\r\n        _this.aiDataContract = {\r\n            name: FieldType.Required,\r\n            kind: FieldType.Default,\r\n            value: FieldType.Required,\r\n            count: FieldType.Default,\r\n            min: FieldType.Default,\r\n            max: FieldType.Default,\r\n            stdDev: FieldType.Default\r\n        };\r\n        return _this;\r\n    }\r\n    return DataPoint;\r\n}(AIDataPoint));\r\nexport { DataPoint };\r\n//# sourceMappingURL=DataPoint.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { MetricData } from '../Interfaces/Contracts/Generated/MetricData';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { DataPoint } from './Common/DataPoint';\r\nimport { Util } from '../Util';\r\nvar Metric = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Metric, _super);\r\n    /**\r\n     * Constructs a new instance of the MetricTelemetry object\r\n     */\r\n    function Metric(logger, name, value, count, min, max, properties) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            metrics: FieldType.Required,\r\n            properties: FieldType.Default\r\n        };\r\n        var dataPoint = new DataPoint();\r\n        dataPoint.count = count > 0 ? count : undefined;\r\n        dataPoint.max = isNaN(max) || max === null ? undefined : max;\r\n        dataPoint.min = isNaN(min) || min === null ? undefined : min;\r\n        dataPoint.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        dataPoint.value = value;\r\n        _this.metrics = [dataPoint];\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        return _this;\r\n    }\r\n    Metric.envelopeType = \"Microsoft.ApplicationInsights.{0}.Metric\";\r\n    Metric.dataType = \"MetricData\";\r\n    return Metric;\r\n}(MetricData));\r\nexport { Metric };\r\n//# sourceMappingURL=Metric.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { EventData } from './EventData';\r\n/**\r\n * An instance of PageView represents a generic action on a page like a button click. It is also the base type for PageView.\r\n */\r\nvar PageViewData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PageViewData, _super);\r\n    function PageViewData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return PageViewData;\r\n}(EventData));\r\nexport { PageViewData };\r\n//# sourceMappingURL=PageViewData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { PageViewData } from '../Interfaces/Contracts/Generated/PageViewData';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nvar PageView = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PageView, _super);\r\n    /**\r\n     * Constructs a new instance of the PageEventTelemetry object\r\n     */\r\n    function PageView(logger, name, url, durationMs, properties, measurements, id) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            name: FieldType.Default,\r\n            url: FieldType.Default,\r\n            duration: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default,\r\n            id: FieldType.Default\r\n        };\r\n        _this.id = DataSanitizer.sanitizeId(logger, id);\r\n        _this.url = DataSanitizer.sanitizeUrl(logger, url);\r\n        _this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        if (!isNaN(durationMs)) {\r\n            _this.duration = Util.msToTimeSpan(durationMs);\r\n        }\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n        return _this;\r\n    }\r\n    PageView.envelopeType = \"Microsoft.ApplicationInsights.{0}.Pageview\";\r\n    PageView.dataType = \"PageviewData\";\r\n    return PageView;\r\n}(PageViewData));\r\nexport { PageView };\r\n//# sourceMappingURL=PageView.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { Domain } from './Domain';\r\n/**\r\n * An instance of Remote Dependency represents an interaction of the monitored component with a remote component/service like SQL or an HTTP endpoint.\r\n */\r\nvar RemoteDependencyData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RemoteDependencyData, _super);\r\n    function RemoteDependencyData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.success = true;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return RemoteDependencyData;\r\n}(Domain));\r\nexport { RemoteDependencyData };\r\n//# sourceMappingURL=RemoteDependencyData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nimport { AjaxHelper } from '../Util';\r\nimport { RemoteDependencyData as GeneratedRemoteDependencyData } from '../Interfaces/Contracts/Generated/RemoteDependencyData';\r\nvar RemoteDependencyData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(RemoteDependencyData, _super);\r\n    /**\r\n     * Constructs a new instance of the RemoteDependencyData object\r\n     */\r\n    function RemoteDependencyData(logger, id, absoluteUrl, commandName, value, success, resultCode, method, requestAPI, properties, measurements) {\r\n        if (requestAPI === void 0) { requestAPI = \"Ajax\"; }\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            id: FieldType.Required,\r\n            ver: FieldType.Required,\r\n            name: FieldType.Default,\r\n            resultCode: FieldType.Default,\r\n            duration: FieldType.Default,\r\n            success: FieldType.Default,\r\n            data: FieldType.Default,\r\n            target: FieldType.Default,\r\n            type: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default,\r\n            kind: FieldType.Default,\r\n            value: FieldType.Default,\r\n            count: FieldType.Default,\r\n            min: FieldType.Default,\r\n            max: FieldType.Default,\r\n            stdDev: FieldType.Default,\r\n            dependencyKind: FieldType.Default,\r\n            dependencySource: FieldType.Default,\r\n            commandName: FieldType.Default,\r\n            dependencyTypeName: FieldType.Default,\r\n        };\r\n        _this.id = id;\r\n        _this.duration = Util.msToTimeSpan(value);\r\n        _this.success = success;\r\n        _this.resultCode = resultCode + \"\";\r\n        _this.type = DataSanitizer.sanitizeString(logger, requestAPI);\r\n        var dependencyFields = AjaxHelper.ParseDependencyPath(logger, absoluteUrl, method, commandName);\r\n        _this.data = DataSanitizer.sanitizeUrl(logger, commandName) || dependencyFields.data; // get a value from hosturl if commandName not available\r\n        _this.target = DataSanitizer.sanitizeString(logger, dependencyFields.target);\r\n        _this.name = DataSanitizer.sanitizeString(logger, dependencyFields.name);\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n        return _this;\r\n    }\r\n    RemoteDependencyData.envelopeType = \"Microsoft.ApplicationInsights.{0}.RemoteDependency\";\r\n    RemoteDependencyData.dataType = \"RemoteDependencyData\";\r\n    return RemoteDependencyData;\r\n}(GeneratedRemoteDependencyData));\r\nexport { RemoteDependencyData };\r\n//# sourceMappingURL=RemoteDependencyData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { Domain } from './Domain';\r\n/**\r\n * Instances of Message represent printf-like trace statements that are text-searched. Log4Net, NLog and other text-based log file entries are translated into intances of this type. The message does not have measurements.\r\n */\r\nvar MessageData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MessageData, _super);\r\n    function MessageData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        return _this;\r\n    }\r\n    return MessageData;\r\n}(Domain));\r\nexport { MessageData };\r\n//# sourceMappingURL=MessageData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { MessageData } from '../Interfaces/Contracts/Generated/MessageData';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { FieldType } from '../Enums';\r\nimport { Util } from '../Util';\r\nvar Trace = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Trace, _super);\r\n    /**\r\n     * Constructs a new instance of the TraceTelemetry object\r\n     */\r\n    function Trace(logger, message, severityLevel, properties) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            message: FieldType.Required,\r\n            severityLevel: FieldType.Default,\r\n            properties: FieldType.Default\r\n        };\r\n        message = message || Util.NotSpecified;\r\n        _this.message = DataSanitizer.sanitizeMessage(logger, message);\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        if (severityLevel) {\r\n            _this.severityLevel = severityLevel;\r\n        }\r\n        return _this;\r\n    }\r\n    Trace.envelopeType = \"Microsoft.ApplicationInsights.{0}.Message\";\r\n    Trace.dataType = \"MessageData\";\r\n    return Trace;\r\n}(MessageData));\r\nexport { Trace };\r\n//# sourceMappingURL=Trace.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\n// THIS FILE WAS AUTOGENERATED\r\nimport { PageViewData } from './PageViewData';\r\n/**\r\n * An instance of PageViewPerf represents: a page view with no performance data, a page view with performance data, or just the performance data of an earlier page request.\r\n */\r\nvar PageViewPerfData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PageViewPerfData, _super);\r\n    function PageViewPerfData() {\r\n        var _this = _super.call(this) || this;\r\n        _this.ver = 2;\r\n        _this.properties = {};\r\n        _this.measurements = {};\r\n        return _this;\r\n    }\r\n    return PageViewPerfData;\r\n}(PageViewData));\r\nexport { PageViewPerfData };\r\n//# sourceMappingURL=PageViewPerfData.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { PageViewPerfData } from '../Interfaces/Contracts/Generated/PageViewPerfData';\r\nimport { FieldType } from '../Enums';\r\nimport { DataSanitizer } from './Common/DataSanitizer';\r\nimport { Util } from '../Util';\r\nvar PageViewPerformance = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PageViewPerformance, _super);\r\n    /**\r\n     * Constructs a new instance of the PageEventTelemetry object\r\n     */\r\n    function PageViewPerformance(logger, name, url, unused, properties, measurements, cs4BaseData) {\r\n        var _this = _super.call(this) || this;\r\n        _this.aiDataContract = {\r\n            ver: FieldType.Required,\r\n            name: FieldType.Default,\r\n            url: FieldType.Default,\r\n            duration: FieldType.Default,\r\n            perfTotal: FieldType.Default,\r\n            networkConnect: FieldType.Default,\r\n            sentRequest: FieldType.Default,\r\n            receivedResponse: FieldType.Default,\r\n            domProcessing: FieldType.Default,\r\n            properties: FieldType.Default,\r\n            measurements: FieldType.Default\r\n        };\r\n        _this.url = DataSanitizer.sanitizeUrl(logger, url);\r\n        _this.name = DataSanitizer.sanitizeString(logger, name) || Util.NotSpecified;\r\n        _this.properties = DataSanitizer.sanitizeProperties(logger, properties);\r\n        _this.measurements = DataSanitizer.sanitizeMeasurements(logger, measurements);\r\n        if (cs4BaseData) {\r\n            _this.domProcessing = cs4BaseData.domProcessing;\r\n            _this.duration = cs4BaseData.duration;\r\n            _this.networkConnect = cs4BaseData.networkConnect;\r\n            _this.perfTotal = cs4BaseData.perfTotal;\r\n            _this.receivedResponse = cs4BaseData.receivedResponse;\r\n            _this.sentRequest = cs4BaseData.sentRequest;\r\n        }\r\n        return _this;\r\n    }\r\n    PageViewPerformance.envelopeType = \"Microsoft.ApplicationInsights.{0}.PageviewPerformance\";\r\n    PageViewPerformance.dataType = \"PageviewPerformanceData\";\r\n    return PageViewPerformance;\r\n}(PageViewPerfData));\r\nexport { PageViewPerformance };\r\n//# sourceMappingURL=PageViewPerformance.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Data as AIData } from '../../Interfaces/Contracts/Generated/Data';\r\nimport { FieldType } from '../../Enums';\r\nvar Data = /** @class */ (function (_super) {\r\n    tslib_1.__extends(Data, _super);\r\n    /**\r\n     * Constructs a new instance of telemetry data.\r\n     */\r\n    function Data(baseType, data) {\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * The data contract for serializing this object.\r\n         */\r\n        _this.aiDataContract = {\r\n            baseType: FieldType.Required,\r\n            baseData: FieldType.Required\r\n        };\r\n        _this.baseType = baseType;\r\n        _this.baseData = data;\r\n        return _this;\r\n    }\r\n    return Data;\r\n}(AIData));\r\nexport { Data };\r\n//# sourceMappingURL=Data.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\n/**\r\n* Defines the level of severity for the event.\r\n*/\r\nexport var SeverityLevel;\r\n(function (SeverityLevel) {\r\n    SeverityLevel[SeverityLevel[\"Verbose\"] = 0] = \"Verbose\";\r\n    SeverityLevel[SeverityLevel[\"Information\"] = 1] = \"Information\";\r\n    SeverityLevel[SeverityLevel[\"Warning\"] = 2] = \"Warning\";\r\n    SeverityLevel[SeverityLevel[\"Error\"] = 3] = \"Error\";\r\n    SeverityLevel[SeverityLevel[\"Critical\"] = 4] = \"Critical\";\r\n})(SeverityLevel || (SeverityLevel = {}));\r\n//# sourceMappingURL=SeverityLevel.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { CoreUtils } from '@microsoft/applicationinsights-core-js';\r\nvar ConfigurationManager = /** @class */ (function () {\r\n    function ConfigurationManager() {\r\n    }\r\n    ConfigurationManager.getConfig = function (config, field, identifier, defaultValue) {\r\n        if (defaultValue === void 0) { defaultValue = false; }\r\n        var configValue;\r\n        if (identifier && config.extensionConfig && config.extensionConfig[identifier] && !CoreUtils.isNullOrUndefined(config.extensionConfig[identifier][field])) {\r\n            configValue = config.extensionConfig[identifier][field];\r\n        }\r\n        else {\r\n            configValue = config[field];\r\n        }\r\n        return !CoreUtils.isNullOrUndefined(configValue) ? configValue : defaultValue;\r\n    };\r\n    return ConfigurationManager;\r\n}());\r\nexport { ConfigurationManager };\r\n//# sourceMappingURL=IConfig.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n// THIS FILE WAS AUTOGENERATED\r\nvar ContextTagKeys = /** @class */ (function () {\r\n    function ContextTagKeys() {\r\n        this.applicationVersion = \"ai.application.ver\";\r\n        this.applicationBuild = \"ai.application.build\";\r\n        this.applicationTypeId = \"ai.application.typeId\";\r\n        this.applicationId = \"ai.application.applicationId\";\r\n        this.applicationLayer = \"ai.application.layer\";\r\n        this.deviceId = \"ai.device.id\";\r\n        this.deviceIp = \"ai.device.ip\";\r\n        this.deviceLanguage = \"ai.device.language\";\r\n        this.deviceLocale = \"ai.device.locale\";\r\n        this.deviceModel = \"ai.device.model\";\r\n        this.deviceFriendlyName = \"ai.device.friendlyName\";\r\n        this.deviceNetwork = \"ai.device.network\";\r\n        this.deviceNetworkName = \"ai.device.networkName\";\r\n        this.deviceOEMName = \"ai.device.oemName\";\r\n        this.deviceOS = \"ai.device.os\";\r\n        this.deviceOSVersion = \"ai.device.osVersion\";\r\n        this.deviceRoleInstance = \"ai.device.roleInstance\";\r\n        this.deviceRoleName = \"ai.device.roleName\";\r\n        this.deviceScreenResolution = \"ai.device.screenResolution\";\r\n        this.deviceType = \"ai.device.type\";\r\n        this.deviceMachineName = \"ai.device.machineName\";\r\n        this.deviceVMName = \"ai.device.vmName\";\r\n        this.deviceBrowser = \"ai.device.browser\";\r\n        this.deviceBrowserVersion = \"ai.device.browserVersion\";\r\n        this.locationIp = \"ai.location.ip\";\r\n        this.locationCountry = \"ai.location.country\";\r\n        this.locationProvince = \"ai.location.province\";\r\n        this.locationCity = \"ai.location.city\";\r\n        this.operationId = \"ai.operation.id\";\r\n        this.operationName = \"ai.operation.name\";\r\n        this.operationParentId = \"ai.operation.parentId\";\r\n        this.operationRootId = \"ai.operation.rootId\";\r\n        this.operationSyntheticSource = \"ai.operation.syntheticSource\";\r\n        this.operationCorrelationVector = \"ai.operation.correlationVector\";\r\n        this.sessionId = \"ai.session.id\";\r\n        this.sessionIsFirst = \"ai.session.isFirst\";\r\n        this.sessionIsNew = \"ai.session.isNew\";\r\n        this.userAccountAcquisitionDate = \"ai.user.accountAcquisitionDate\";\r\n        this.userAccountId = \"ai.user.accountId\";\r\n        this.userAgent = \"ai.user.userAgent\";\r\n        this.userId = \"ai.user.id\";\r\n        this.userStoreRegion = \"ai.user.storeRegion\";\r\n        this.userAuthUserId = \"ai.user.authUserId\";\r\n        this.userAnonymousUserAcquisitionDate = \"ai.user.anonUserAcquisitionDate\";\r\n        this.userAuthenticatedUserAcquisitionDate = \"ai.user.authUserAcquisitionDate\";\r\n        this.cloudName = \"ai.cloud.name\";\r\n        this.cloudRole = \"ai.cloud.role\";\r\n        this.cloudRoleVer = \"ai.cloud.roleVer\";\r\n        this.cloudRoleInstance = \"ai.cloud.roleInstance\";\r\n        this.cloudEnvironment = \"ai.cloud.environment\";\r\n        this.cloudLocation = \"ai.cloud.location\";\r\n        this.cloudDeploymentUnit = \"ai.cloud.deploymentUnit\";\r\n        this.internalNodeName = \"ai.internal.nodeName\";\r\n        this.internalSdkVersion = \"ai.internal.sdkVersion\";\r\n        this.internalAgentVersion = \"ai.internal.agentVersion\";\r\n    }\r\n    return ContextTagKeys;\r\n}());\r\nexport { ContextTagKeys };\r\n//# sourceMappingURL=ContextTagKeys.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Util } from \"./Util\";\r\nimport { DataSanitizer } from \"./Telemetry/Common/DataSanitizer\";\r\nimport { CoreUtils } from \"@microsoft/applicationinsights-core-js\";\r\nvar TelemetryItemCreator = /** @class */ (function () {\r\n    function TelemetryItemCreator() {\r\n    }\r\n    /**\r\n     * Create a telemetry item that the 1DS channel understands\r\n     * @param item domain specific properties; part B\r\n     * @param baseType telemetry item type. ie PageViewData\r\n     * @param envelopeName name of the envelope. ie Microsoft.ApplicationInsights.<instrumentation key>.PageView\r\n     * @param customProperties user defined custom properties; part C\r\n     * @param systemProperties system properties that are added to the context; part A\r\n     * @returns ITelemetryItem that is sent to channel\r\n     */\r\n    TelemetryItemCreator.create = function (item, baseType, envelopeName, logger, customProperties, systemProperties) {\r\n        envelopeName = DataSanitizer.sanitizeString(logger, envelopeName) || Util.NotSpecified;\r\n        if (CoreUtils.isNullOrUndefined(item) ||\r\n            CoreUtils.isNullOrUndefined(baseType) ||\r\n            CoreUtils.isNullOrUndefined(envelopeName)) {\r\n            throw Error(\"Input doesn't contain all required fields\");\r\n        }\r\n        var telemetryItem = {\r\n            name: envelopeName,\r\n            time: new Date().toISOString(),\r\n            iKey: \"\",\r\n            ext: systemProperties ? systemProperties : {},\r\n            tags: [],\r\n            data: {},\r\n            baseType: baseType,\r\n            baseData: item // Part B\r\n        };\r\n        // Part C\r\n        if (!CoreUtils.isNullOrUndefined(customProperties)) {\r\n            for (var prop in customProperties) {\r\n                if (customProperties.hasOwnProperty(prop)) {\r\n                    telemetryItem.data[prop] = customProperties[prop];\r\n                }\r\n            }\r\n        }\r\n        return telemetryItem;\r\n    };\r\n    return TelemetryItemCreator;\r\n}());\r\nexport { TelemetryItemCreator };\r\n//# sourceMappingURL=TelemetryItemCreator.js.map","import { ContextTagKeys } from \"./Contracts/Generated/ContextTagKeys\";\r\nvar Extensions = /** @class */ (function () {\r\n    function Extensions() {\r\n    }\r\n    Extensions.UserExt = \"user\";\r\n    Extensions.DeviceExt = \"device\";\r\n    Extensions.TraceExt = \"trace\";\r\n    Extensions.WebExt = \"web\";\r\n    Extensions.AppExt = \"app\";\r\n    Extensions.OSExt = \"os\";\r\n    Extensions.SessionExt = \"ses\";\r\n    Extensions.SDKExt = \"sdk\";\r\n    return Extensions;\r\n}());\r\nexport { Extensions };\r\nexport var CtxTagKeys = new ContextTagKeys();\r\n//# sourceMappingURL=PartAExtensions.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport { Util, CorrelationIdHelper, UrlHelper, DateTimeUtils } from './Util';\r\nexport { FieldType } from './Enums';\r\nexport { RequestHeaders } from './RequestResponseHeaders';\r\nexport { DisabledPropertyName, ProcessLegacy, SampleRate, HttpMethod } from './Constants';\r\nexport { Data as AIData } from './Interfaces/Contracts/Generated/Data';\r\nexport { Base as AIBase } from './Interfaces/Contracts/Generated/Base';\r\nexport { Envelope } from './Telemetry/Common/Envelope';\r\nexport { Event } from './Telemetry/Event';\r\nexport { Exception } from './Telemetry/Exception';\r\nexport { Metric } from './Telemetry/Metric';\r\nexport { PageView } from './Telemetry/PageView';\r\nexport { PageViewData } from './Interfaces/Contracts/Generated/PageViewData';\r\nexport { RemoteDependencyData } from './Telemetry/RemoteDependencyData';\r\nexport { Trace } from './Telemetry/Trace';\r\nexport { PageViewPerformance } from './Telemetry/PageViewPerformance';\r\nexport { Data } from './Telemetry/Common/Data';\r\nexport { SeverityLevel } from './Interfaces/Contracts/Generated/SeverityLevel';\r\nexport { ConfigurationManager } from './Interfaces/IConfig';\r\nexport { ContextTagKeys } from './Interfaces/Contracts/Generated/ContextTagKeys';\r\nexport { DataSanitizer } from './Telemetry/Common/DataSanitizer';\r\nexport { TelemetryItemCreator } from './TelemetryItemCreator';\r\nexport { CtxTagKeys, Extensions } from './Interfaces/PartAExtensions';\r\nexport var PropertiesPluginIdentifier = \"AppInsightsPropertiesPlugin\";\r\nexport var BreezeChannelIdentifier = \"AppInsightsChannelPlugin\";\r\n//# sourceMappingURL=applicationinsights-common.js.map","import { Util, ProcessLegacy } from \"@microsoft/applicationinsights-common\";\r\n// ToDo: fix properties and measurements once updates are done to common\r\nvar AppInsightsDeprecated = /** @class */ (function () {\r\n    function AppInsightsDeprecated(snippet, appInsightsNew) {\r\n        this._hasLegacyInitializers = false;\r\n        this._queue = [];\r\n        this.config = AppInsightsDeprecated.getDefaultConfig(snippet.config);\r\n        this.appInsightsNew = appInsightsNew;\r\n        this.context = { addTelemetryInitializer: this.addTelemetryInitializers.bind(this) };\r\n    }\r\n    /**\r\n    * The array of telemetry initializers to call before sending each telemetry item.\r\n    */\r\n    AppInsightsDeprecated.prototype.addTelemetryInitializers = function (callBack) {\r\n        var _this = this;\r\n        // Add initializer to current processing only if there is any old telemetry initializer\r\n        if (!this._hasLegacyInitializers) {\r\n            this.appInsightsNew.addTelemetryInitializer(function (item) {\r\n                _this._processLegacyInitializers(item); // setup call back for each legacy processor\r\n            });\r\n            this._hasLegacyInitializers = true;\r\n        }\r\n        this._queue.push(callBack);\r\n    };\r\n    AppInsightsDeprecated.prototype._processLegacyInitializers = function (item) {\r\n        // instead of mapping new to legacy and then back again and repeating in channel, attach callback for channel to call\r\n        item.tags[ProcessLegacy] = this._queue;\r\n        return item;\r\n    };\r\n    AppInsightsDeprecated.prototype.startTrackPage = function (name) {\r\n        this.appInsightsNew.startTrackPage(name);\r\n    };\r\n    AppInsightsDeprecated.prototype.stopTrackPage = function (name, url, properties, measurements) {\r\n        this.appInsightsNew.stopTrackPage(name, url, properties); // update\r\n    };\r\n    AppInsightsDeprecated.prototype.trackPageView = function (name, url, properties, measurements, duration) {\r\n        var telemetry = {\r\n            name: name,\r\n            uri: url,\r\n            properties: properties,\r\n            measurements: measurements\r\n        };\r\n        // fix for props, measurements, duration\r\n        this.appInsightsNew.trackPageView(telemetry);\r\n    };\r\n    AppInsightsDeprecated.prototype.trackEvent = function (name, properties, measurements) {\r\n        this.appInsightsNew.trackEvent({ name: name });\r\n    };\r\n    AppInsightsDeprecated.prototype.trackDependency = function (id, method, absoluteUrl, pathName, totalTime, success, resultCode) {\r\n        this.appInsightsNew.trackDependencyData({\r\n            id: id,\r\n            target: absoluteUrl,\r\n            type: pathName,\r\n            duration: totalTime,\r\n            properties: { HttpMethod: method },\r\n            success: success,\r\n            responseCode: resultCode\r\n        });\r\n    };\r\n    AppInsightsDeprecated.prototype.trackException = function (exception, handledAt, properties, measurements, severityLevel) {\r\n        this.appInsightsNew.trackException({\r\n            exception: exception\r\n        });\r\n    };\r\n    AppInsightsDeprecated.prototype.trackMetric = function (name, average, sampleCount, min, max, properties) {\r\n        this.appInsightsNew.trackMetric({ name: name, average: average, sampleCount: sampleCount, min: min, max: max });\r\n    };\r\n    AppInsightsDeprecated.prototype.trackTrace = function (message, properties, severityLevel) {\r\n        this.appInsightsNew.trackTrace({ message: message, severityLevel: severityLevel });\r\n    };\r\n    AppInsightsDeprecated.prototype.flush = function (async) {\r\n        this.appInsightsNew.flush(async);\r\n    };\r\n    AppInsightsDeprecated.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        this.appInsightsNew.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\r\n    };\r\n    AppInsightsDeprecated.prototype.clearAuthenticatedUserContext = function () {\r\n        this.appInsightsNew.context.user.clearAuthenticatedUserContext();\r\n    };\r\n    AppInsightsDeprecated.prototype._onerror = function (message, url, lineNumber, columnNumber, error) {\r\n        this.appInsightsNew._onerror({ message: message, url: url, lineNumber: lineNumber, columnNumber: columnNumber, error: error });\r\n    };\r\n    AppInsightsDeprecated.prototype.startTrackEvent = function (name) {\r\n        this.appInsightsNew.startTrackEvent(name);\r\n    };\r\n    AppInsightsDeprecated.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        this.appInsightsNew.stopTrackEvent(name, properties, measurements);\r\n    };\r\n    AppInsightsDeprecated.prototype.downloadAndSetup = function (config) {\r\n        throw new Error(\"downloadAndSetup not implemented in web SKU\");\r\n    };\r\n    AppInsightsDeprecated.prototype.updateSnippetDefinitions = function (snippet) {\r\n        // apply full appInsights to the global instance\r\n        // Note: This must be called before loadAppInsights is called\r\n        for (var field in this) {\r\n            if (typeof field === 'string') {\r\n                snippet[field] = this[field];\r\n            }\r\n        }\r\n    };\r\n    // note: these are split into methods to enable unit tests\r\n    AppInsightsDeprecated.prototype.loadAppInsights = function () {\r\n        // initialize global instance of appInsights\r\n        //var appInsights = new Microsoft.ApplicationInsights.AppInsights(this.config);\r\n        var _this = this;\r\n        // implement legacy version of trackPageView for 0.10<\r\n        if (this.config[\"iKey\"]) {\r\n            var originalTrackPageView = this.trackPageView;\r\n            this.trackPageView = function (pagePath, properties, measurements) {\r\n                originalTrackPageView.apply(_this, [null, pagePath, properties, measurements]);\r\n            };\r\n        }\r\n        // implement legacy pageView interface if it is present in the snippet\r\n        var legacyPageView = \"logPageView\";\r\n        if (typeof this.snippet[legacyPageView] === \"function\") {\r\n            this[legacyPageView] = function (pagePath, properties, measurements) {\r\n                _this.trackPageView(null, pagePath, properties, measurements);\r\n            };\r\n        }\r\n        // implement legacy event interface if it is present in the snippet\r\n        var legacyEvent = \"logEvent\";\r\n        if (typeof this.snippet[legacyEvent] === \"function\") {\r\n            this[legacyEvent] = function (name, props, measurements) {\r\n                _this.trackEvent(name, props, measurements);\r\n            };\r\n        }\r\n        return this;\r\n    };\r\n    AppInsightsDeprecated.getDefaultConfig = function (config) {\r\n        if (!config) {\r\n            config = {};\r\n        }\r\n        // set default values\r\n        config.endpointUrl = config.endpointUrl || \"https://dc.services.visualstudio.com/v2/track\";\r\n        config.sessionRenewalMs = 30 * 60 * 1000;\r\n        config.sessionExpirationMs = 24 * 60 * 60 * 1000;\r\n        config.maxBatchSizeInBytes = config.maxBatchSizeInBytes > 0 ? config.maxBatchSizeInBytes : 102400; // 100kb\r\n        config.maxBatchInterval = !isNaN(config.maxBatchInterval) ? config.maxBatchInterval : 15000;\r\n        config.enableDebug = Util.stringToBoolOrDefault(config.enableDebug);\r\n        config.disableExceptionTracking = Util.stringToBoolOrDefault(config.disableExceptionTracking);\r\n        config.disableTelemetry = Util.stringToBoolOrDefault(config.disableTelemetry);\r\n        config.verboseLogging = Util.stringToBoolOrDefault(config.verboseLogging);\r\n        config.emitLineDelimitedJson = Util.stringToBoolOrDefault(config.emitLineDelimitedJson);\r\n        config.diagnosticLogInterval = config.diagnosticLogInterval || 10000;\r\n        config.autoTrackPageVisitTime = Util.stringToBoolOrDefault(config.autoTrackPageVisitTime);\r\n        if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {\r\n            config.samplingPercentage = 100;\r\n        }\r\n        config.disableAjaxTracking = Util.stringToBoolOrDefault(config.disableAjaxTracking);\r\n        config.maxAjaxCallsPerView = !isNaN(config.maxAjaxCallsPerView) ? config.maxAjaxCallsPerView : 500;\r\n        config.isBeaconApiDisabled = Util.stringToBoolOrDefault(config.isBeaconApiDisabled, true);\r\n        config.disableCorrelationHeaders = Util.stringToBoolOrDefault(config.disableCorrelationHeaders);\r\n        config.correlationHeaderExcludedDomains = config.correlationHeaderExcludedDomains || [\r\n            \"*.blob.core.windows.net\",\r\n            \"*.blob.core.chinacloudapi.cn\",\r\n            \"*.blob.core.cloudapi.de\",\r\n            \"*.blob.core.usgovcloudapi.net\"\r\n        ];\r\n        config.disableFlushOnBeforeUnload = Util.stringToBoolOrDefault(config.disableFlushOnBeforeUnload);\r\n        config.enableSessionStorageBuffer = Util.stringToBoolOrDefault(config.enableSessionStorageBuffer, true);\r\n        config.isRetryDisabled = Util.stringToBoolOrDefault(config.isRetryDisabled);\r\n        config.isCookieUseDisabled = Util.stringToBoolOrDefault(config.isCookieUseDisabled);\r\n        config.isStorageUseDisabled = Util.stringToBoolOrDefault(config.isStorageUseDisabled);\r\n        config.isBrowserLinkTrackingEnabled = Util.stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled);\r\n        config.enableCorsCorrelation = Util.stringToBoolOrDefault(config.enableCorsCorrelation);\r\n        return config;\r\n    };\r\n    return AppInsightsDeprecated;\r\n}());\r\nexport { AppInsightsDeprecated };\r\n//# sourceMappingURL=ApplicationInsightsDeprecated.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { DateTimeUtils, Util } from '@microsoft/applicationinsights-common';\r\nimport { CoreUtils, LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\r\n/**\r\n* Class encapsulates sending page views and page view performance telemetry.\r\n*/\r\nvar PageViewManager = /** @class */ (function () {\r\n    function PageViewManager(appInsights, overridePageViewDuration, core, pageViewPerformanceManager) {\r\n        this.pageViewPerformanceSent = false;\r\n        this.overridePageViewDuration = false;\r\n        this.overridePageViewDuration = overridePageViewDuration;\r\n        this.appInsights = appInsights;\r\n        this._pageViewPerformanceManager = pageViewPerformanceManager;\r\n        if (core) {\r\n            this._channel = function () { return (core.getTransmissionControls()); };\r\n            this._logger = core.logger;\r\n        }\r\n    }\r\n    /**\r\n    * Currently supported cases:\r\n    * 1) (default case) track page view called with default parameters, overridePageViewDuration = false. Page view is sent with page view performance when navigation timing data is available.\r\n    *    a. If navigation timing is not supported then page view is sent right away with undefined duration. Page view performance is not sent.\r\n    * 2) overridePageViewDuration = true, custom duration provided. Custom duration is used, page view sends right away.\r\n    * 3) overridePageViewDuration = true, custom duration NOT provided. Page view is sent right away, duration is time spent from page load till now (or undefined if navigation timing is not supported).\r\n    * 4) overridePageViewDuration = false, custom duration is provided. Page view is sent right away with custom duration.\r\n    *\r\n    * In all cases page view performance is sent once (only for the 1st call of trackPageView), or not sent if navigation timing is not supported.\r\n    */\r\n    PageViewManager.prototype.trackPageView = function (pageView, customProperties) {\r\n        var _this = this;\r\n        var name = pageView.name;\r\n        if (CoreUtils.isNullOrUndefined(name) || typeof name !== \"string\") {\r\n            pageView.name = window.document && window.document.title || \"\";\r\n        }\r\n        var uri = pageView.uri;\r\n        if (CoreUtils.isNullOrUndefined(uri) || typeof uri !== \"string\") {\r\n            pageView.uri = window.location && window.location.href || \"\";\r\n        }\r\n        // case 1a. if performance timing is not supported by the browser, send the page view telemetry with the duration provided by the user. If the user\r\n        // do not provide the duration, set duration to undefined\r\n        // Also this is case 4\r\n        if (!this._pageViewPerformanceManager.isPerformanceTimingSupported()) {\r\n            this.appInsights.sendPageViewInternal(pageView, customProperties);\r\n            this._channel().forEach(function (queues) { queues.forEach(function (q) { return q.flush(true); }); });\r\n            // no navigation timing (IE 8, iOS Safari 8.4, Opera Mini 8 - see http://caniuse.com/#feat=nav-timing)\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.NavigationTimingNotSupported, \"trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.\");\r\n            return;\r\n        }\r\n        var pageViewSent = false;\r\n        var customDuration = undefined;\r\n        // if the performance timing is supported by the browser, calculate the custom duration\r\n        var start = this._pageViewPerformanceManager.getPerformanceTiming().navigationStart;\r\n        customDuration = DateTimeUtils.GetDuration(start, +new Date);\r\n        if (!this._pageViewPerformanceManager.shouldCollectDuration(customDuration)) {\r\n            customDuration = undefined;\r\n        }\r\n        // if the user has provided duration, send a page view telemetry with the provided duration. Otherwise, if\r\n        // overridePageViewDuration is set to true, send a page view telemetry with the custom duration calculated earlier\r\n        var duration = undefined;\r\n        if (!CoreUtils.isNullOrUndefined(customProperties) &&\r\n            !CoreUtils.isNullOrUndefined(customProperties.duration)) {\r\n            duration = customProperties.duration;\r\n        }\r\n        if (this.overridePageViewDuration || !isNaN(duration)) {\r\n            if (isNaN(duration)) {\r\n                // case 3\r\n                if (!customProperties) {\r\n                    customProperties = {};\r\n                }\r\n                customProperties[\"duration\"] = customDuration;\r\n            }\r\n            // case 2\r\n            this.appInsights.sendPageViewInternal(pageView, customProperties);\r\n            this._channel().forEach(function (queues) { queues.forEach(function (q) { return q.flush(true); }); });\r\n            pageViewSent = true;\r\n        }\r\n        // now try to send the page view performance telemetry\r\n        var maxDurationLimit = 60000;\r\n        if (!customProperties) {\r\n            customProperties = {};\r\n        }\r\n        var handle = setInterval((function () {\r\n            try {\r\n                if (_this._pageViewPerformanceManager.isPerformanceTimingDataReady()) {\r\n                    clearInterval(handle);\r\n                    var pageViewPerformance = {\r\n                        name: name,\r\n                        uri: uri\r\n                    };\r\n                    _this._pageViewPerformanceManager.populatePageViewPerformanceEvent(pageViewPerformance);\r\n                    if (!pageViewPerformance.isValid && !pageViewSent) {\r\n                        // If navigation timing gives invalid numbers, then go back to \"override page view duration\" mode.\r\n                        // That's the best value we can get that makes sense.\r\n                        customProperties[\"duration\"] = customDuration;\r\n                        _this.appInsights.sendPageViewInternal(pageView, customProperties);\r\n                        _this._channel().forEach(function (queues) { queues.forEach(function (q) { return q.flush(true); }); });\r\n                    }\r\n                    else {\r\n                        if (!pageViewSent) {\r\n                            customProperties[\"duration\"] = pageViewPerformance.durationMs;\r\n                            _this.appInsights.sendPageViewInternal(pageView, customProperties);\r\n                        }\r\n                        if (!_this.pageViewPerformanceSent) {\r\n                            _this.appInsights.sendPageViewPerformanceInternal(pageViewPerformance, customProperties);\r\n                            _this.pageViewPerformanceSent = true;\r\n                        }\r\n                        _this._channel().forEach(function (queues) { queues.forEach(function (q) { return q.flush(true); }); });\r\n                    }\r\n                }\r\n                else if (DateTimeUtils.GetDuration(start, +new Date) > maxDurationLimit) {\r\n                    // if performance timings are not ready but we exceeded the maximum duration limit, just log a page view telemetry\r\n                    // with the maximum duration limit. Otherwise, keep waiting until performance timings are ready\r\n                    clearInterval(handle);\r\n                    if (!pageViewSent) {\r\n                        customProperties[\"duration\"] = maxDurationLimit;\r\n                        _this.appInsights.sendPageViewInternal(pageView, customProperties);\r\n                        _this._channel().forEach(function (queues) { queues.forEach(function (q) { return q.flush(true); }); });\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                _this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TrackPVFailedCalc, \"trackPageView failed on page load calculation: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }), 100);\r\n    };\r\n    return PageViewManager;\r\n}());\r\nexport { PageViewManager };\r\n//# sourceMappingURL=PageViewManager.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Util } from '@microsoft/applicationinsights-common';\r\n/**\r\n * Used to track page visit durations\r\n */\r\nvar PageVisitTimeManager = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of PageVisitTimeManager\r\n     * @param pageVisitTimeTrackingHandler Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)\r\n     * @returns {}\r\n     */\r\n    function PageVisitTimeManager(logger, pageVisitTimeTrackingHandler) {\r\n        this.prevPageVisitDataKeyName = \"prevPageVisitData\";\r\n        this.pageVisitTimeTrackingHandler = pageVisitTimeTrackingHandler;\r\n        this._logger = logger;\r\n    }\r\n    /**\r\n    * Tracks the previous page visit time telemetry (if exists) and starts timing of new page visit time\r\n    * @param currentPageName Name of page to begin timing for visit duration\r\n    * @param currentPageUrl Url of page to begin timing for visit duration\r\n    */\r\n    PageVisitTimeManager.prototype.trackPreviousPageVisit = function (currentPageName, currentPageUrl) {\r\n        try {\r\n            // Restart timer for new page view\r\n            var prevPageVisitTimeData = this.restartPageVisitTimer(currentPageName, currentPageUrl);\r\n            // If there was a page already being timed, track the visit time for it now.\r\n            if (prevPageVisitTimeData) {\r\n                this.pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.warnToConsole(\"Auto track page visit time failed, metric will not be collected: \" + Util.dump(e));\r\n        }\r\n    };\r\n    /**\r\n     * Stops timing of current page (if exists) and starts timing for duration of visit to pageName\r\n     * @param pageName Name of page to begin timing visit duration\r\n     * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not.\r\n     */\r\n    PageVisitTimeManager.prototype.restartPageVisitTimer = function (pageName, pageUrl) {\r\n        try {\r\n            var prevPageVisitData = this.stopPageVisitTimer();\r\n            this.startPageVisitTimer(pageName, pageUrl);\r\n            return prevPageVisitData;\r\n        }\r\n        catch (e) {\r\n            this._logger.warnToConsole(\"Call to restart failed: \" + Util.dump(e));\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Starts timing visit duration of pageName\r\n     * @param pageName\r\n     * @returns {}\r\n     */\r\n    PageVisitTimeManager.prototype.startPageVisitTimer = function (pageName, pageUrl) {\r\n        try {\r\n            if (Util.canUseSessionStorage()) {\r\n                if (Util.getSessionStorage(this._logger, this.prevPageVisitDataKeyName) != null) {\r\n                    throw new Error(\"Cannot call startPageVisit consecutively without first calling stopPageVisit\");\r\n                }\r\n                var currPageVisitData = new PageVisitData(pageName, pageUrl);\r\n                var currPageVisitDataStr = JSON.stringify(currPageVisitData);\r\n                Util.setSessionStorage(this._logger, this.prevPageVisitDataKeyName, currPageVisitDataStr);\r\n            }\r\n        }\r\n        catch (e) {\r\n            //TODO: Remove this catch in next phase, since if start is called twice in a row the exception needs to be propagated out\r\n            this._logger.warnToConsole(\"Call to start failed: \" + Util.dump(e));\r\n        }\r\n    };\r\n    /**\r\n     * Stops timing of current page, if exists.\r\n     * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.\r\n     */\r\n    PageVisitTimeManager.prototype.stopPageVisitTimer = function () {\r\n        try {\r\n            if (Util.canUseSessionStorage()) {\r\n                // Define end time of page's visit\r\n                var pageVisitEndTime = Date.now();\r\n                // Try to retrieve  page name and start time from session storage\r\n                var pageVisitDataJsonStr = Util.getSessionStorage(this._logger, this.prevPageVisitDataKeyName);\r\n                if (pageVisitDataJsonStr) {\r\n                    // if previous page data exists, set end time of visit\r\n                    var prevPageVisitData = JSON.parse(pageVisitDataJsonStr);\r\n                    prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData.pageVisitStartTime;\r\n                    // Remove data from storage since we already used it\r\n                    Util.removeSessionStorage(this._logger, this.prevPageVisitDataKeyName);\r\n                    // Return page visit data\r\n                    return prevPageVisitData;\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        catch (e) {\r\n            this._logger.warnToConsole(\"Stop page visit timer failed: \" + Util.dump(e));\r\n            return null;\r\n        }\r\n    };\r\n    return PageVisitTimeManager;\r\n}());\r\nexport { PageVisitTimeManager };\r\nvar PageVisitData = /** @class */ (function () {\r\n    function PageVisitData(pageName, pageUrl) {\r\n        this.pageVisitStartTime = Date.now();\r\n        this.pageName = pageName;\r\n        this.pageUrl = pageUrl;\r\n    }\r\n    return PageVisitData;\r\n}());\r\nexport { PageVisitData };\r\n//# sourceMappingURL=PageVisitTimeManager.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Util, DateTimeUtils } from '@microsoft/applicationinsights-common';\r\nimport { LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\r\n/**\r\n* Class encapsulates sending page view performance telemetry.\r\n*/\r\nvar PageViewPerformanceManager = /** @class */ (function () {\r\n    function PageViewPerformanceManager(core) {\r\n        this.MAX_DURATION_ALLOWED = 3600000; // 1h\r\n        if (core) {\r\n            this._logger = core.logger;\r\n        }\r\n    }\r\n    PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent = function (pageViewPerformance) {\r\n        pageViewPerformance.isValid = false;\r\n        /*\r\n         * http://www.w3.org/TR/navigation-timing/#processing-model\r\n         *  |-navigationStart\r\n         *  |             |-connectEnd\r\n         *  |             ||-requestStart\r\n         *  |             ||             |-responseStart\r\n         *  |             ||             |              |-responseEnd\r\n         *  |             ||             |              |\r\n         *  |             ||             |              |         |-loadEventEnd\r\n         *  |---network---||---request---|---response---|---dom---|\r\n         *  |--------------------------total----------------------|\r\n         */\r\n        var timing = this.getPerformanceTiming();\r\n        if (timing) {\r\n            var total = DateTimeUtils.GetDuration(timing.navigationStart, timing.loadEventEnd);\r\n            var network = DateTimeUtils.GetDuration(timing.navigationStart, timing.connectEnd);\r\n            var request = DateTimeUtils.GetDuration(timing.requestStart, timing.responseStart);\r\n            var response = DateTimeUtils.GetDuration(timing.responseStart, timing.responseEnd);\r\n            var dom = DateTimeUtils.GetDuration(timing.responseEnd, timing.loadEventEnd);\r\n            if (total == 0) {\r\n                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ErrorPVCalc, \"error calculating page view performance.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n            }\r\n            else if (!this.shouldCollectDuration(total, network, request, response, dom)) {\r\n                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.InvalidDurationValue, \"Invalid page load duration value. Browser perf data won't be sent.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n            }\r\n            else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {\r\n                // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT\r\n                // in this case, don't report client performance from this page\r\n                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ClientPerformanceMathError, \"client performance math error.\", { total: total, network: network, request: request, response: response, dom: dom });\r\n            }\r\n            else {\r\n                pageViewPerformance.durationMs = total;\r\n                // // convert to timespans\r\n                pageViewPerformance.perfTotal = pageViewPerformance.duration = Util.msToTimeSpan(total);\r\n                pageViewPerformance.networkConnect = Util.msToTimeSpan(network);\r\n                pageViewPerformance.sentRequest = Util.msToTimeSpan(request);\r\n                pageViewPerformance.receivedResponse = Util.msToTimeSpan(response);\r\n                pageViewPerformance.domProcessing = Util.msToTimeSpan(dom);\r\n                pageViewPerformance.isValid = true;\r\n            }\r\n        }\r\n    };\r\n    PageViewPerformanceManager.prototype.getPerformanceTiming = function () {\r\n        if (this.isPerformanceTimingSupported()) {\r\n            return window.performance.timing;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n    * Returns true is window performance timing API is supported, false otherwise.\r\n    */\r\n    PageViewPerformanceManager.prototype.isPerformanceTimingSupported = function () {\r\n        return typeof window != \"undefined\" && window.performance && window.performance.timing;\r\n    };\r\n    /**\r\n    * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.\r\n    * Returns true if ready, false otherwise.\r\n    */\r\n    PageViewPerformanceManager.prototype.isPerformanceTimingDataReady = function () {\r\n        var timing = window.performance.timing;\r\n        return timing.domainLookupStart > 0\r\n            && timing.navigationStart > 0\r\n            && timing.responseStart > 0\r\n            && timing.requestStart > 0\r\n            && timing.loadEventEnd > 0\r\n            && timing.responseEnd > 0\r\n            && timing.connectEnd > 0\r\n            && timing.domLoading > 0;\r\n    };\r\n    /**\r\n    * This method tells if given durations should be excluded from collection.\r\n    */\r\n    PageViewPerformanceManager.prototype.shouldCollectDuration = function () {\r\n        var durations = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            durations[_i] = arguments[_i];\r\n        }\r\n        // a full list of Google crawlers user agent strings - https://support.google.com/webmasters/answer/1061943?hl=en\r\n        var botAgentNames = ['googlebot', 'adsbot-google', 'apis-google', 'mediapartners-google'];\r\n        var userAgent = navigator.userAgent;\r\n        var isGoogleBot = false;\r\n        if (userAgent) {\r\n            for (var i_1 = 0; i_1 < botAgentNames.length; i_1++) {\r\n                isGoogleBot = isGoogleBot || userAgent.toLowerCase().indexOf(botAgentNames[i_1]) !== -1;\r\n            }\r\n        }\r\n        if (isGoogleBot) {\r\n            // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API.\r\n            return false;\r\n        }\r\n        else {\r\n            // for other page views, don't report if it's outside of a reasonable range\r\n            for (var i = 0; i < durations.length; i++) {\r\n                if (durations[i] >= this.MAX_DURATION_ALLOWED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return PageViewPerformanceManager;\r\n}());\r\nexport { PageViewPerformanceManager };\r\n//# sourceMappingURL=PageViewPerformanceManager.js.map","/**\r\n * ApplicationInsights.ts\r\n * @copyright Microsoft 2018\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Util, PageViewPerformance, PageView, RemoteDependencyData, Event as EventTelemetry, TelemetryItemCreator, Metric, Exception, SeverityLevel, Trace, ConfigurationManager, DateTimeUtils, PropertiesPluginIdentifier } from \"@microsoft/applicationinsights-common\";\r\nimport { CoreUtils, LoggingSeverity, _InternalMessageId, } from \"@microsoft/applicationinsights-core-js\";\r\nimport { PageViewManager } from \"./Telemetry/PageViewManager\";\r\nimport { PageVisitTimeManager } from \"./Telemetry/PageVisitTimeManager\";\r\nimport { PageViewPerformanceManager } from './Telemetry/PageViewPerformanceManager';\r\n\"use strict\";\r\nvar durationProperty = \"duration\";\r\nvar ApplicationInsights = /** @class */ (function () {\r\n    function ApplicationInsights() {\r\n        this.identifier = \"ApplicationInsightsAnalytics\"; // do not change name or priority\r\n        this.priority = 180; // take from reserved priority range 100- 200\r\n        this.autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place\r\n        this._isInitialized = false;\r\n        // Counts number of trackAjax invokations.\r\n        // By default we only monitor X ajax call per view to avoid too much load.\r\n        // Default value is set in config.\r\n        // This counter keeps increasing even after the limit is reached.\r\n        this._trackAjaxAttempts = 0;\r\n        this.initialize = this._initialize.bind(this);\r\n    }\r\n    ApplicationInsights.getDefaultConfig = function (config) {\r\n        if (!config) {\r\n            config = {};\r\n        }\r\n        // set default values\r\n        config.sessionRenewalMs = 30 * 60 * 1000;\r\n        config.sessionExpirationMs = 24 * 60 * 60 * 1000;\r\n        config.disableExceptionTracking = Util.stringToBoolOrDefault(config.disableExceptionTracking);\r\n        config.autoTrackPageVisitTime = Util.stringToBoolOrDefault(config.autoTrackPageVisitTime);\r\n        config.overridePageViewDuration = Util.stringToBoolOrDefault(config.overridePageViewDuration);\r\n        if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {\r\n            config.samplingPercentage = 100;\r\n        }\r\n        config.isCookieUseDisabled = Util.stringToBoolOrDefault(config.isCookieUseDisabled);\r\n        config.isStorageUseDisabled = Util.stringToBoolOrDefault(config.isStorageUseDisabled);\r\n        config.isBrowserLinkTrackingEnabled = Util.stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled);\r\n        config.enableAutoRouteTracking = Util.stringToBoolOrDefault(config.enableAutoRouteTracking);\r\n        config.namePrefix = config.namePrefix || \"\";\r\n        return config;\r\n    };\r\n    ApplicationInsights.prototype.processTelemetry = function (env) {\r\n        var doNotSendItem = false;\r\n        var telemetryInitializersCount = this._telemetryInitializers.length;\r\n        for (var i = 0; i < telemetryInitializersCount; ++i) {\r\n            var telemetryInitializer = this._telemetryInitializers[i];\r\n            if (telemetryInitializer) {\r\n                try {\r\n                    if (telemetryInitializer.apply(null, [env]) === false) {\r\n                        doNotSendItem = true;\r\n                        break;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    // log error but dont stop executing rest of the telemetry initializers\r\n                    // doNotSendItem = true;\r\n                    this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"One of telemetry initializers failed, telemetry item will not be sent: \" + Util.getExceptionName(e), { exception: Util.dump(e) }, true);\r\n                }\r\n            }\r\n        }\r\n        if (!doNotSendItem && !CoreUtils.isNullOrUndefined(this._nextPlugin)) {\r\n            this._nextPlugin.processTelemetry(env);\r\n        }\r\n    };\r\n    ApplicationInsights.prototype.setNextPlugin = function (next) {\r\n        this._nextPlugin = next;\r\n    };\r\n    ApplicationInsights.prototype.trackEvent = function (event, customProperties) {\r\n        try {\r\n            var telemetryItem = TelemetryItemCreator.create(event, EventTelemetry.dataType, EventTelemetry.envelopeType, this._logger, customProperties);\r\n            this.core.track(telemetryItem);\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TrackTraceFailed, \"trackTrace failed, trace will not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    /**\r\n      * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n      * @param   name    A string that identifies this event uniquely within the document.\r\n    */\r\n    ApplicationInsights.prototype.startTrackEvent = function (name) {\r\n        try {\r\n            this._eventTracking.start(name);\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.StartTrackEventFailed, \"startTrackEvent failed, event will not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    ApplicationInsights.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        try {\r\n            this._eventTracking.stop(name, undefined, properties); // Todo: Fix to pass measurements once type is updated\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.StopTrackEventFailed, \"stopTrackEvent failed, event will not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    /**\r\n     * @description Log a diagnostic message\r\n     * @param {ITraceTelemetry} trace\r\n     * @param ICustomProperties.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    ApplicationInsights.prototype.trackTrace = function (trace, customProperties) {\r\n        try {\r\n            var telemetryItem = TelemetryItemCreator.create(trace, Trace.dataType, Trace.envelopeType, this._logger, customProperties);\r\n            this.core.track(telemetryItem);\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TrackTraceFailed, \"trackTrace failed, trace will not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    /**\r\n     * @description Log a numeric value that is not associated with a specific event. Typically\r\n     * used to send regular reports of performance indicators. To send single measurement, just\r\n     * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n     * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n     * and sending the resulting average at intervals\r\n     * @param {IMetricTelemetry} metric input object argument. Only name and average are mandatory.\r\n     * @param {{[key: string]: any}} customProperties additional data used to filter metrics in the\r\n     * portal. Defaults to empty.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    ApplicationInsights.prototype.trackMetric = function (metric, customProperties) {\r\n        try {\r\n            var telemetryItem = TelemetryItemCreator.create(metric, Metric.dataType, Metric.envelopeType, this._logger, customProperties);\r\n            this.core.track(telemetryItem);\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TrackMetricFailed, \"trackMetric failed, metric will not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    /**\r\n     * Logs that a page or other item was viewed.\r\n     * @param IPageViewTelemetry The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param customProperties Additional data used to filter events and metrics. Defaults to empty.\r\n     * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n     */\r\n    ApplicationInsights.prototype.trackPageView = function (pageView, customProperties) {\r\n        try {\r\n            var inPv = pageView || {};\r\n            this._pageViewManager.trackPageView(inPv, tslib_1.__assign({}, inPv.properties, inPv.measurements, customProperties));\r\n            if (this.config.autoTrackPageVisitTime) {\r\n                this._pageVisitTimeManager.trackPreviousPageVisit(inPv.name, inPv.uri);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TrackPVFailed, \"trackPageView failed, page view will not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    /**\r\n     * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n     * @param pageView Page view item to be sent\r\n     * @param properties Custom properties (Part C) that a user can add to the telemetry item\r\n     * @param systemProperties System level properties (Part A) that a user can add to the telemetry item\r\n     */\r\n    ApplicationInsights.prototype.sendPageViewInternal = function (pageView, properties, systemProperties) {\r\n        if (typeof document !== \"undefined\") {\r\n            pageView.refUri = pageView.refUri === undefined ? document.referrer : pageView.refUri;\r\n        }\r\n        var telemetryItem = TelemetryItemCreator.create(pageView, PageView.dataType, PageView.envelopeType, this._logger, properties, systemProperties);\r\n        this.core.track(telemetryItem);\r\n        // reset ajaxes counter\r\n        this._trackAjaxAttempts = 0;\r\n    };\r\n    /**\r\n     * @ignore INTERNAL ONLY\r\n     * @param pageViewPerformance\r\n     * @param properties\r\n     */\r\n    ApplicationInsights.prototype.sendPageViewPerformanceInternal = function (pageViewPerformance, properties, systemProperties) {\r\n        var telemetryItem = TelemetryItemCreator.create(pageViewPerformance, PageViewPerformance.dataType, PageViewPerformance.envelopeType, this._logger, properties, systemProperties);\r\n        this.core.track(telemetryItem);\r\n    };\r\n    /**\r\n     * Send browser performance metrics.\r\n     * @param pageViewPerformance\r\n     * @param customProperties\r\n     */\r\n    ApplicationInsights.prototype.trackPageViewPerformance = function (pageViewPerformance, customProperties) {\r\n        try {\r\n            this._pageViewPerformanceManager.populatePageViewPerformanceEvent(pageViewPerformance);\r\n            this.sendPageViewPerformanceInternal(pageViewPerformance, customProperties);\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TrackPVFailed, \"trackPageViewPerformance failed, page view will not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    ApplicationInsights.prototype.startTrackPage = function (name) {\r\n        try {\r\n            if (typeof name !== \"string\") {\r\n                name = window.document && window.document.title || \"\";\r\n            }\r\n            this._pageTracking.start(name);\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.StartTrackFailed, \"startTrackPage failed, page view may not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    ApplicationInsights.prototype.stopTrackPage = function (name, url, properties, measurement) {\r\n        try {\r\n            if (typeof name !== \"string\") {\r\n                name = window.document && window.document.title || \"\";\r\n            }\r\n            if (typeof url !== \"string\") {\r\n                url = window.location && window.location.href || \"\";\r\n            }\r\n            this._pageTracking.stop(name, url, properties, measurement);\r\n            if (this.config.autoTrackPageVisitTime) {\r\n                this._pageVisitTimeManager.trackPreviousPageVisit(name, url);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.StopTrackFailed, \"stopTrackPage failed, page view will not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    /**\r\n    * @ignore INTERNAL ONLY\r\n    * @param exception\r\n    * @param properties\r\n    * @param systemProperties\r\n    */\r\n    ApplicationInsights.prototype.sendExceptionInternal = function (exception, customProperties, systemProperties) {\r\n        var exceptionPartB = new Exception(this._logger, exception.exception || new Error(Util.NotSpecified), exception.properties, exception.measurements, exception.severityLevel, exception.id).toInterface();\r\n        var telemetryItem = TelemetryItemCreator.create(exceptionPartB, Exception.dataType, Exception.envelopeType, this._logger, customProperties, systemProperties);\r\n        this.core.track(telemetryItem);\r\n    };\r\n    /**\r\n     * Log an exception you have caught.\r\n     *\r\n     * @param {IExceptionTelemetry} exception   Object which contains exception to be sent\r\n     * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     *\r\n     * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    ApplicationInsights.prototype.trackException = function (exception, customProperties) {\r\n        try {\r\n            this.sendExceptionInternal(exception, customProperties);\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TrackExceptionFailed, \"trackException failed, exception will not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    /**\r\n     * @description Custom error handler for Application Insights Analytics\r\n     * @param {IAutoExceptionTelemetry} exception\r\n     * @memberof ApplicationInsights\r\n     */\r\n    ApplicationInsights.prototype._onerror = function (exception) {\r\n        try {\r\n            var properties_1 = {\r\n                url: (exception && exception.url) || document.URL,\r\n                lineNumber: exception.lineNumber,\r\n                columnNumber: exception.columnNumber,\r\n                message: exception.message\r\n            };\r\n            if (Util.isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception.error)) {\r\n                this._sendCORSException(properties_1.url);\r\n            }\r\n            else {\r\n                if (!Util.isError(exception.error)) {\r\n                    var stack = \"window.onerror@\" + properties_1.url + \":\" + exception.lineNumber + \":\" + (exception.columnNumber || 0);\r\n                    exception.error = new Error(exception.message);\r\n                    exception.error.stack = stack;\r\n                }\r\n                this.trackException({ exception: exception.error, severityLevel: SeverityLevel.Error }, properties_1);\r\n            }\r\n        }\r\n        catch (e) {\r\n            var errorString = exception.error ?\r\n                (exception.error.name + \", \" + exception.error.message)\r\n                : \"null\";\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.ExceptionWhileLoggingError, \"_onError threw exception while logging error, error will not be collected: \"\r\n                + Util.getExceptionName(e), { exception: Util.dump(e), errorString: errorString });\r\n        }\r\n    };\r\n    ApplicationInsights.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        this._telemetryInitializers.push(telemetryInitializer);\r\n    };\r\n    ApplicationInsights.prototype._initialize = function (config, core, extensions) {\r\n        var _this = this;\r\n        if (this._isInitialized) {\r\n            return;\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(core)) {\r\n            throw Error(\"Error initializing\");\r\n        }\r\n        this.core = core;\r\n        this._logger = core.logger;\r\n        this._globalconfig = {\r\n            instrumentationKey: config.instrumentationKey,\r\n            endpointUrl: config.endpointUrl || \"https://dc.services.visualstudio.com/v2/track\"\r\n        };\r\n        this.config = config.extensionConfig && config.extensionConfig[this.identifier] ? config.extensionConfig[this.identifier] : {};\r\n        // load default values if specified\r\n        var defaults = ApplicationInsights.getDefaultConfig();\r\n        if (defaults !== undefined) {\r\n            for (var field in defaults) {\r\n                // for each unspecified field, set the default value\r\n                this.config[field] = ConfigurationManager.getConfig(config, field, this.identifier, defaults[field]);\r\n            }\r\n            if (this._globalconfig) {\r\n                for (var field in defaults) {\r\n                    if (this._globalconfig[field] === undefined) {\r\n                        this._globalconfig[field] = defaults[field];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Todo: move this out of static state\r\n        if (this.config.isCookieUseDisabled) {\r\n            Util.disableCookies();\r\n        }\r\n        // Todo: move this out of static state\r\n        if (this.config.isStorageUseDisabled) {\r\n            Util.disableStorage();\r\n        }\r\n        var configGetters = {\r\n            instrumentationKey: function () { return config.instrumentationKey; },\r\n            accountId: function () { return _this.config.accountId || config.accountId; },\r\n            sessionRenewalMs: function () { return _this.config.sessionRenewalMs || config.sessionRenewalMs; },\r\n            sessionExpirationMs: function () { return _this.config.sessionExpirationMs || config.sessionExpirationMs; },\r\n            sampleRate: function () { return _this.config.samplingPercentage || config.samplingPercentage; },\r\n            cookieDomain: function () { return _this.config.cookieDomain || config.cookieDomain; },\r\n            sdkExtension: function () { return _this.config.sdkExtension || config.sdkExtension; },\r\n            isBrowserLinkTrackingEnabled: function () { return _this.config.isBrowserLinkTrackingEnabled || config.isBrowserLinkTrackingEnabled; },\r\n            appId: function () { return _this.config.appId || config.appId; }\r\n        };\r\n        this._pageViewPerformanceManager = new PageViewPerformanceManager(this.core);\r\n        this._pageViewManager = new PageViewManager(this, this.config.overridePageViewDuration, this.core, this._pageViewPerformanceManager);\r\n        this._pageVisitTimeManager = new PageVisitTimeManager(this._logger, function (pageName, pageUrl, pageVisitTime) { return _this.trackPageVisitTime(pageName, pageUrl, pageVisitTime); });\r\n        this._telemetryInitializers = [];\r\n        this._addDefaultTelemetryInitializers(configGetters);\r\n        this._eventTracking = new Timing(this._logger, \"trackEvent\");\r\n        this._eventTracking.action =\r\n            function (name, url, duration, properties) {\r\n                if (!properties) {\r\n                    properties = {};\r\n                }\r\n                properties[durationProperty] = duration.toString();\r\n                _this.trackEvent({ name: name, properties: properties });\r\n            };\r\n        // initialize page view timing\r\n        this._pageTracking = new Timing(this._logger, \"trackPageView\");\r\n        this._pageTracking.action = function (name, url, duration, properties, measurements) {\r\n            // duration must be a custom property in order for the collector to extract it\r\n            if (CoreUtils.isNullOrUndefined(properties)) {\r\n                properties = {};\r\n            }\r\n            properties[durationProperty] = duration.toString();\r\n            var pageViewItem = {\r\n                name: name,\r\n                uri: url,\r\n                properties: properties,\r\n                measurements: measurements\r\n            };\r\n            _this.sendPageViewInternal(pageViewItem);\r\n        };\r\n        var instance = this;\r\n        if (this.config.disableExceptionTracking === false &&\r\n            !this.config.autoExceptionInstrumented) {\r\n            // We want to enable exception auto collection and it has not been done so yet\r\n            var onerror_1 = \"onerror\";\r\n            var originalOnError_1 = window[onerror_1];\r\n            window.onerror = function (message, url, lineNumber, columnNumber, error) {\r\n                var handled = originalOnError_1 && originalOnError_1(message, url, lineNumber, columnNumber, error);\r\n                if (handled !== true) {\r\n                    instance._onerror({\r\n                        message: message,\r\n                        url: url,\r\n                        lineNumber: lineNumber,\r\n                        columnNumber: columnNumber,\r\n                        error: error\r\n                    });\r\n                }\r\n                return handled;\r\n            };\r\n            this.config.autoExceptionInstrumented = true;\r\n        }\r\n        /**\r\n         * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n         */\r\n        if (this.config.enableAutoRouteTracking === true\r\n            && typeof history === \"object\" && typeof history.pushState === \"function\" && typeof history.replaceState === \"function\"\r\n            && typeof window === \"object\") {\r\n            var _self_1 = this;\r\n            // Find the properties plugin\r\n            extensions.forEach(function (extension) {\r\n                if (extension.identifier === PropertiesPluginIdentifier) {\r\n                    _this._properties = extension;\r\n                }\r\n            });\r\n            history.pushState = (function (f) { return function pushState() {\r\n                var ret = f.apply(this, arguments);\r\n                window.dispatchEvent(new Event(_self_1.config.namePrefix + \"pushState\"));\r\n                window.dispatchEvent(new Event(_self_1.config.namePrefix + \"locationchange\"));\r\n                return ret;\r\n            }; })(history.pushState);\r\n            history.replaceState = (function (f) { return function replaceState() {\r\n                var ret = f.apply(this, arguments);\r\n                window.dispatchEvent(new Event(_self_1.config.namePrefix + \"replaceState\"));\r\n                window.dispatchEvent(new Event(_self_1.config.namePrefix + \"locationchange\"));\r\n                return ret;\r\n            }; })(history.replaceState);\r\n            window.addEventListener(_self_1.config.namePrefix + \"popstate\", function () {\r\n                window.dispatchEvent(new Event(_self_1.config.namePrefix + \"locationchange\"));\r\n            });\r\n            window.addEventListener(_self_1.config.namePrefix + \"locationchange\", function () {\r\n                if (_self_1._properties && _self_1._properties.context && _self_1._properties.context.telemetryTrace) {\r\n                    _self_1._properties.context.telemetryTrace.traceID = Util.newId();\r\n                    _self_1._properties.context.telemetryTrace.name = window.location.pathname;\r\n                }\r\n                setTimeout(function () {\r\n                    // todo: override start time so that it is not affected by autoRoutePVDelay\r\n                    _self_1.trackPageView({ refUri: null, properties: { duration: 0 } }); // SPA route change loading durations are undefined, so send 0\r\n                }, _self_1.autoRoutePVDelay);\r\n            });\r\n        }\r\n        this._isInitialized = true;\r\n    };\r\n    /**\r\n     * Log a page visit time\r\n     * @param    pageName    Name of page\r\n     * @param    pageVisitDuration Duration of visit to the page in milleseconds\r\n     */\r\n    ApplicationInsights.prototype.trackPageVisitTime = function (pageName, pageUrl, pageVisitTime) {\r\n        var properties = { PageName: pageName, PageUrl: pageUrl };\r\n        this.trackMetric({\r\n            name: \"PageVisitTime\",\r\n            average: pageVisitTime,\r\n            max: pageVisitTime,\r\n            min: pageVisitTime,\r\n            sampleCount: 1\r\n        }, properties);\r\n    };\r\n    ApplicationInsights.prototype._addDefaultTelemetryInitializers = function (configGetters) {\r\n        if (!configGetters.isBrowserLinkTrackingEnabled()) {\r\n            var browserLinkPaths_1 = ['/browserLinkSignalR/', '/__browserLink/'];\r\n            var dropBrowserLinkRequests = function (envelope) {\r\n                if (envelope.baseType === RemoteDependencyData.dataType) {\r\n                    var remoteData = envelope.baseData;\r\n                    if (remoteData) {\r\n                        for (var i = 0; i < browserLinkPaths_1.length; i++) {\r\n                            if (remoteData.target && remoteData.target.indexOf(browserLinkPaths_1[i]) >= 0) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            };\r\n            this._addTelemetryInitializer(dropBrowserLinkRequests);\r\n        }\r\n    };\r\n    ApplicationInsights.prototype._addTelemetryInitializer = function (telemetryInitializer) {\r\n        this._telemetryInitializers.push(telemetryInitializer);\r\n    };\r\n    ApplicationInsights.prototype._sendCORSException = function (url) {\r\n        var exception = {\r\n            message: \"Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.\",\r\n            url: url,\r\n            lineNumber: 0,\r\n            columnNumber: 0,\r\n            error: undefined\r\n        };\r\n        var telemetryItem = TelemetryItemCreator.create(exception, Exception.dataType, Exception.envelopeType, this._logger, { url: url });\r\n        this.core.track(telemetryItem);\r\n    };\r\n    ApplicationInsights.Version = \"2.1.1\"; // Not currently used anywhere\r\n    return ApplicationInsights;\r\n}());\r\nexport { ApplicationInsights };\r\n/**\r\n * Used to record timed events and page views.\r\n */\r\nvar Timing = /** @class */ (function () {\r\n    function Timing(logger, name) {\r\n        this._name = name;\r\n        this._events = {};\r\n        this._logger = logger;\r\n    }\r\n    Timing.prototype.start = function (name) {\r\n        if (typeof this._events[name] !== \"undefined\") {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.StartCalledMoreThanOnce, \"start was called more than once for this event without calling stop.\", { name: this._name, key: name }, true);\r\n        }\r\n        this._events[name] = +new Date;\r\n    };\r\n    Timing.prototype.stop = function (name, url, properties, measurements) {\r\n        var start = this._events[name];\r\n        if (isNaN(start)) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.StopCalledWithoutStart, \"stop was called without a corresponding start.\", { name: this._name, key: name }, true);\r\n        }\r\n        else {\r\n            var end = +new Date;\r\n            var duration = DateTimeUtils.GetDuration(start, end);\r\n            this.action(name, url, duration, properties, measurements);\r\n        }\r\n        delete this._events[name];\r\n        this._events[name] = undefined;\r\n    };\r\n    return Timing;\r\n}());\r\n//# sourceMappingURL=ApplicationInsights.js.map","import { Util } from '@microsoft/applicationinsights-common';\r\nimport { LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\r\n/*\r\n * An array based send buffer.\r\n */\r\nvar ArraySendBuffer = /** @class */ (function () {\r\n    function ArraySendBuffer(config) {\r\n        this._config = config;\r\n        this._buffer = [];\r\n    }\r\n    ArraySendBuffer.prototype.enqueue = function (payload) {\r\n        this._buffer.push(payload);\r\n    };\r\n    ArraySendBuffer.prototype.count = function () {\r\n        return this._buffer.length;\r\n    };\r\n    ArraySendBuffer.prototype.clear = function () {\r\n        this._buffer.length = 0;\r\n    };\r\n    ArraySendBuffer.prototype.getItems = function () {\r\n        return this._buffer.slice(0);\r\n    };\r\n    ArraySendBuffer.prototype.batchPayloads = function (payload) {\r\n        if (payload && payload.length > 0) {\r\n            var batch = this._config.emitLineDelimitedJson() ?\r\n                payload.join(\"\\n\") :\r\n                \"[\" + payload.join(\",\") + \"]\";\r\n            return batch;\r\n        }\r\n        return null;\r\n    };\r\n    ArraySendBuffer.prototype.markAsSent = function (payload) {\r\n        this.clear();\r\n    };\r\n    ArraySendBuffer.prototype.clearSent = function (payload) {\r\n        // not supported\r\n    };\r\n    return ArraySendBuffer;\r\n}());\r\nexport { ArraySendBuffer };\r\n/*\r\n * Session storege buffer holds a copy of all unsent items in the browser session storage.\r\n */\r\nvar SessionStorageSendBuffer = /** @class */ (function () {\r\n    function SessionStorageSendBuffer(logger, config) {\r\n        this._bufferFullMessageSent = false;\r\n        this._logger = logger;\r\n        this._config = config;\r\n        var bufferItems = this.getBuffer(SessionStorageSendBuffer.BUFFER_KEY);\r\n        var notDeliveredItems = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n        this._buffer = bufferItems.concat(notDeliveredItems);\r\n        // If the buffer has too many items, drop items from the end.\r\n        if (this._buffer.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n            this._buffer.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;\r\n        }\r\n        // update DataLossAnalyzer with the number of recovered items\r\n        // Uncomment if you want to use DataLossanalyzer\r\n        // DataLossAnalyzer.itemsRestoredFromSessionBuffer = this._buffer.length;\r\n        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n    }\r\n    SessionStorageSendBuffer.prototype.enqueue = function (payload) {\r\n        if (this._buffer.length >= SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n            // sent internal log only once per page view\r\n            if (!this._bufferFullMessageSent) {\r\n                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SessionStorageBufferFull, \"Maximum buffer size reached: \" + this._buffer.length, true);\r\n                this._bufferFullMessageSent = true;\r\n            }\r\n            return;\r\n        }\r\n        this._buffer.push(payload);\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n    };\r\n    SessionStorageSendBuffer.prototype.count = function () {\r\n        return this._buffer.length;\r\n    };\r\n    SessionStorageSendBuffer.prototype.clear = function () {\r\n        this._buffer.length = 0;\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, []);\r\n        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\r\n        this._bufferFullMessageSent = false;\r\n    };\r\n    SessionStorageSendBuffer.prototype.getItems = function () {\r\n        return this._buffer.slice(0);\r\n    };\r\n    SessionStorageSendBuffer.prototype.batchPayloads = function (payload) {\r\n        if (payload && payload.length > 0) {\r\n            var batch = this._config.emitLineDelimitedJson() ?\r\n                payload.join(\"\\n\") :\r\n                \"[\" + payload.join(\",\") + \"]\";\r\n            return batch;\r\n        }\r\n        return null;\r\n    };\r\n    SessionStorageSendBuffer.prototype.markAsSent = function (payload) {\r\n        this._buffer = this.removePayloadsFromBuffer(payload, this._buffer);\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n        var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n        if (sentElements instanceof Array && payload instanceof Array) {\r\n            sentElements = sentElements.concat(payload);\r\n            if (sentElements.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n                // We send telemetry normally. If the SENT_BUFFER is too big we don't add new elements\r\n                // until we receive a response from the backend and the buffer has free space again (see clearSent method)\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.SessionStorageBufferFull, \"Sent buffer reached its maximum size: \" + sentElements.length, true);\r\n                sentElements.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;\r\n            }\r\n            this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\r\n        }\r\n    };\r\n    SessionStorageSendBuffer.prototype.clearSent = function (payload) {\r\n        var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n        sentElements = this.removePayloadsFromBuffer(payload, sentElements);\r\n        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\r\n    };\r\n    SessionStorageSendBuffer.prototype.removePayloadsFromBuffer = function (payloads, buffer) {\r\n        var remaining = [];\r\n        for (var i in buffer) {\r\n            var contains = false;\r\n            for (var j in payloads) {\r\n                if (payloads[j] === buffer[i]) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!contains) {\r\n                remaining.push(buffer[i]);\r\n            }\r\n        }\r\n        ;\r\n        return remaining;\r\n    };\r\n    SessionStorageSendBuffer.prototype.getBuffer = function (key) {\r\n        var prefixedKey = key;\r\n        try {\r\n            prefixedKey = this._config.namePrefix && this._config.namePrefix() ? this._config.namePrefix() + \"_\" + prefixedKey : prefixedKey;\r\n            var bufferJson = Util.getSessionStorage(this._logger, prefixedKey);\r\n            if (bufferJson) {\r\n                var buffer = JSON.parse(bufferJson);\r\n                if (buffer) {\r\n                    return buffer;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedToRestoreStorageBuffer, \" storage key: \" + prefixedKey + \", \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n        return [];\r\n    };\r\n    SessionStorageSendBuffer.prototype.setBuffer = function (key, buffer) {\r\n        var prefixedKey = key;\r\n        try {\r\n            prefixedKey = this._config.namePrefix && this._config.namePrefix() ? this._config.namePrefix() + \"_\" + prefixedKey : prefixedKey;\r\n            var bufferJson = JSON.stringify(buffer);\r\n            Util.setSessionStorage(this._logger, prefixedKey, bufferJson);\r\n        }\r\n        catch (e) {\r\n            // if there was an error, clear the buffer\r\n            // telemetry is stored in the _buffer array so we won't loose any items\r\n            Util.setSessionStorage(this._logger, prefixedKey, JSON.stringify([]));\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedToSetStorageBuffer, \" storage key: \" + prefixedKey + \", \" + Util.getExceptionName(e) + \". Buffer cleared\", { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    SessionStorageSendBuffer.BUFFER_KEY = \"AI_buffer\";\r\n    SessionStorageSendBuffer.SENT_BUFFER_KEY = \"AI_sentBuffer\";\r\n    // Maximum number of payloads stored in the buffer. If the buffer is full, new elements will be dropped.\r\n    SessionStorageSendBuffer.MAX_BUFFER_SIZE = 2000;\r\n    return SessionStorageSendBuffer;\r\n}());\r\nexport { SessionStorageSendBuffer };\r\n//# sourceMappingURL=SendBuffer.js.map","import * as tslib_1 from \"tslib\";\r\nimport { Data, Envelope, RemoteDependencyData, Event, Exception, Metric, PageView, Trace, PageViewPerformance, CtxTagKeys, HttpMethod } from '@microsoft/applicationinsights-common';\r\nimport { CoreUtils, LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\r\n// these two constants are used to filter out properties not needed when trying to extract custom properties and measurements from the incoming payload\r\nvar baseType = \"baseType\";\r\nvar baseData = \"baseData\";\r\nvar EnvelopeCreator = /** @class */ (function () {\r\n    function EnvelopeCreator() {\r\n    }\r\n    EnvelopeCreator.extractProperties = function (data) {\r\n        var customProperties = null;\r\n        for (var key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                var value = data[key];\r\n                if (typeof value !== \"number\") {\r\n                    if (!customProperties) {\r\n                        customProperties = {};\r\n                    }\r\n                    customProperties[key] = value;\r\n                }\r\n            }\r\n        }\r\n        return customProperties;\r\n    };\r\n    EnvelopeCreator.extractPropsAndMeasurements = function (data, properties, measurements) {\r\n        if (!CoreUtils.isNullOrUndefined(data)) {\r\n            for (var key in data) {\r\n                if (data.hasOwnProperty(key)) {\r\n                    var value = data[key];\r\n                    if (typeof value === \"number\") {\r\n                        measurements[key] = value;\r\n                    }\r\n                    else if (typeof value === \"string\") {\r\n                        properties[key] = value;\r\n                    }\r\n                    else {\r\n                        properties[key] = JSON.stringify(value);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // TODO: Do we want this to take logger as arg or use this._logger as nonstatic?\r\n    EnvelopeCreator.createEnvelope = function (logger, envelopeType, telemetryItem, data) {\r\n        var envelope = new Envelope(logger, data, envelopeType);\r\n        envelope.iKey = telemetryItem.iKey;\r\n        var iKeyNoDashes = telemetryItem.iKey.replace(/-/g, \"\");\r\n        envelope.name = envelope.name.replace(\"{0}\", iKeyNoDashes);\r\n        // extract all extensions from ctx\r\n        EnvelopeCreator.extractPartAExtensions(telemetryItem, envelope);\r\n        // loop through the envelope tags (extension of Part A) and pick out the ones that should go in outgoing envelope tags\r\n        if (!telemetryItem.tags) {\r\n            telemetryItem.tags = [];\r\n        }\r\n        return envelope;\r\n    };\r\n    /*\r\n     * Maps Part A data from CS 4.0\r\n     */\r\n    EnvelopeCreator.extractPartAExtensions = function (item, env) {\r\n        // todo: switch to keys from common in this method\r\n        if (!env.tags) {\r\n            env.tags = {};\r\n        }\r\n        if (!item.ext) {\r\n            item.ext = {};\r\n        }\r\n        if (!item.tags) {\r\n            item.tags = [];\r\n        }\r\n        if (item.ext.user) {\r\n            if (item.ext.user.authId) {\r\n                env.tags[CtxTagKeys.userAuthUserId] = item.ext.user.authId;\r\n            }\r\n            var userId = item.ext.user.id || item.ext.user.localId;\r\n            if (userId) {\r\n                env.tags[CtxTagKeys.userId] = userId;\r\n            }\r\n        }\r\n        if (item.ext.app) {\r\n            if (item.ext.app.sesId) {\r\n                env.tags[CtxTagKeys.sessionId] = item.ext.app.sesId;\r\n            }\r\n        }\r\n        if (item.ext.device) {\r\n            if (item.ext.device.id || item.ext.device.localId) {\r\n                env.tags[CtxTagKeys.deviceId] = item.ext.device.id || item.ext.device.localId;\r\n            }\r\n            if (item.ext.device.deviceClass) {\r\n                env.tags[CtxTagKeys.deviceType] = item.ext.device.deviceClass;\r\n            }\r\n            if (item.ext.device.ip) {\r\n                env.tags[CtxTagKeys.deviceIp] = item.ext.device.ip;\r\n            }\r\n        }\r\n        if (item.ext.web) {\r\n            var web = item.ext.web;\r\n            if (web.browserLang) {\r\n                env.tags[CtxTagKeys.deviceLanguage] = web.browserLang;\r\n            }\r\n            if (web.browserVer) {\r\n                env.tags[CtxTagKeys.deviceBrowserVersion] = web.browserVer;\r\n            }\r\n            if (web.browser) {\r\n                env.tags[CtxTagKeys.deviceBrowser] = web.browser;\r\n            }\r\n            env.data = env.data || {};\r\n            env.data.baseData = env.data.baseData || {};\r\n            env.data.baseData.properties = env.data.baseData.properties || {};\r\n            if (web.domain) {\r\n                env.data.baseData.properties['domain'] = web.domain;\r\n            }\r\n            if (web.isManual) {\r\n                env.data.baseData.properties['isManual'] = web.isManual.toString();\r\n            }\r\n            if (web.screenRes) {\r\n                env.data.baseData.properties['screenRes'] = web.screenRes;\r\n            }\r\n            if (web.userConsent) {\r\n                env.data.baseData.properties['userConsent'] = web.userConsent.toString();\r\n            }\r\n        }\r\n        if (item.ext.device) {\r\n            if (item.ext.device.model) {\r\n                env.tags[CtxTagKeys.deviceModel] = item.ext.device.model;\r\n            }\r\n        }\r\n        if (item.ext.os && item.ext.os.name) {\r\n            env.tags[CtxTagKeys.deviceOS] = item.ext.os.name;\r\n        }\r\n        if (item.ext.device) {\r\n            if (item.ext.device.deviceType) {\r\n                env.tags[CtxTagKeys.deviceType] = item.ext.device.deviceType;\r\n            }\r\n        }\r\n        // No support for mapping Trace.traceState to 2.0 as it is currently empty\r\n        if (item.ext.trace) {\r\n            if (item.ext.trace.parentID) {\r\n                env.tags[CtxTagKeys.operationParentId] = item.ext.trace.parentID;\r\n            }\r\n            if (item.ext.trace.name) {\r\n                env.tags[CtxTagKeys.operationName] = item.ext.trace.name;\r\n            }\r\n            if (item.ext.trace.traceID) {\r\n                env.tags[CtxTagKeys.operationId] = item.ext.trace.traceID;\r\n            }\r\n        }\r\n        // Sample 4.0 schema\r\n        //  {\r\n        //     \"time\" : \"2018-09-05T22:51:22.4936Z\",\r\n        //     \"name\" : \"MetricWithNamespace\",\r\n        //     \"iKey\" : \"ABC-5a4cbd20-e601-4ef5-a3c6-5d6577e4398e\",\r\n        //     \"ext\": {  \"cloud\": {\r\n        //          \"role\": \"WATSON3\",\r\n        //          \"roleInstance\": \"CO4AEAP00000260\"\r\n        //      },\r\n        //      \"device\": {}, \"correlation\": {} },\r\n        //      \"tags\": [\r\n        //        { \"amazon.region\" : \"east2\" },\r\n        //        { \"os.expid\" : \"wp:02df239\" }\r\n        //     ]\r\n        //   }\r\n        var tgs = {};\r\n        var _loop_1 = function (i) {\r\n            var tg = item.tags[i];\r\n            // Object.keys returns an array of keys\r\n            Object.keys(tg).forEach(function (key) {\r\n                tgs[key] = tg[key];\r\n            });\r\n            item.tags.splice(i, 1);\r\n        };\r\n        // deals with tags.push({object})\r\n        for (var i = item.tags.length - 1; i >= 0; i--) {\r\n            _loop_1(i);\r\n        }\r\n        // deals with tags[key]=value\r\n        for (var tg in item.tags) {\r\n            tgs[tg] = item.tags[tg];\r\n        }\r\n        env.tags = tslib_1.__assign({}, env.tags, tgs);\r\n        if (!env.tags[CtxTagKeys.internalSdkVersion]) {\r\n            // Append a version in case it is not already set\r\n            env.tags[CtxTagKeys.internalSdkVersion] = \"javascript:\" + EnvelopeCreator.Version;\r\n        }\r\n    };\r\n    EnvelopeCreator.Version = \"2.1.1\";\r\n    return EnvelopeCreator;\r\n}());\r\nexport { EnvelopeCreator };\r\nvar DependencyEnvelopeCreator = /** @class */ (function (_super) {\r\n    tslib_1.__extends(DependencyEnvelopeCreator, _super);\r\n    function DependencyEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DependencyEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        this._logger = logger;\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\r\n        }\r\n        var customMeasurements = telemetryItem.baseData.measurements || {};\r\n        var customProperties = telemetryItem.baseData.properties || {};\r\n        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);\r\n        var bd = telemetryItem.baseData;\r\n        if (CoreUtils.isNullOrUndefined(bd)) {\r\n            logger.warnToConsole(\"Invalid input for dependency data\");\r\n            return null;\r\n        }\r\n        var id = bd.id;\r\n        var absoluteUrl = bd.target;\r\n        var command = bd.name;\r\n        var duration = bd.duration;\r\n        var success = bd.success;\r\n        var resultCode = bd.responseCode;\r\n        var requestAPI = bd.type;\r\n        var method = bd.properties && bd.properties[HttpMethod] ? bd.properties[HttpMethod] : \"GET\";\r\n        var baseData = new RemoteDependencyData(logger, id, absoluteUrl, command, duration, success, resultCode, method, requestAPI, customProperties, customMeasurements);\r\n        var data = new Data(RemoteDependencyData.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope(logger, RemoteDependencyData.envelopeType, telemetryItem, data);\r\n    };\r\n    DependencyEnvelopeCreator.DependencyEnvelopeCreator = new DependencyEnvelopeCreator();\r\n    return DependencyEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { DependencyEnvelopeCreator };\r\nvar EventEnvelopeCreator = /** @class */ (function (_super) {\r\n    tslib_1.__extends(EventEnvelopeCreator, _super);\r\n    function EventEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    EventEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        this._logger = logger;\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\r\n        }\r\n        var customProperties = {};\r\n        var customMeasurements = {};\r\n        if (telemetryItem.baseType !== Event.dataType) {\r\n            customProperties['baseTypeSource'] = telemetryItem.baseType; // save the passed in base type as a property\r\n        }\r\n        if (telemetryItem.baseType === Event.dataType) {\r\n            customProperties = telemetryItem.baseData.properties || {};\r\n            customMeasurements = telemetryItem.baseData.measurements || {};\r\n        }\r\n        else {\r\n            if (telemetryItem.baseData) {\r\n                EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.baseData, customProperties, customMeasurements);\r\n            }\r\n        }\r\n        // Exract root level properties from part C telemetryItem.data\r\n        EnvelopeCreator.extractPropsAndMeasurements(telemetryItem.data, customProperties, customMeasurements);\r\n        var eventName = telemetryItem.baseData.name;\r\n        var baseData = new Event(logger, eventName, customProperties, customMeasurements);\r\n        var data = new Data(Event.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope(logger, Event.envelopeType, telemetryItem, data);\r\n    };\r\n    EventEnvelopeCreator.EventEnvelopeCreator = new EventEnvelopeCreator();\r\n    return EventEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { EventEnvelopeCreator };\r\nvar ExceptionEnvelopeCreator = /** @class */ (function (_super) {\r\n    tslib_1.__extends(ExceptionEnvelopeCreator, _super);\r\n    function ExceptionEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ExceptionEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        this._logger = logger;\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\r\n        }\r\n        var bd = telemetryItem.baseData;\r\n        var baseData = Exception.CreateFromInterface(logger, bd);\r\n        var data = new Data(Exception.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope(logger, Exception.envelopeType, telemetryItem, data);\r\n    };\r\n    ExceptionEnvelopeCreator.ExceptionEnvelopeCreator = new ExceptionEnvelopeCreator();\r\n    return ExceptionEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { ExceptionEnvelopeCreator };\r\nvar MetricEnvelopeCreator = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MetricEnvelopeCreator, _super);\r\n    function MetricEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MetricEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        this._logger = logger;\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\r\n        }\r\n        var props = telemetryItem.baseData.properties || {};\r\n        var customProperties = EnvelopeCreator.extractProperties(telemetryItem.data);\r\n        customProperties = tslib_1.__assign({}, props, customProperties);\r\n        var name = telemetryItem.baseData.name;\r\n        var average = telemetryItem.baseData.average;\r\n        var sampleCount = telemetryItem.baseData.sampleCount;\r\n        var min = telemetryItem.baseData.min;\r\n        var max = telemetryItem.baseData.max;\r\n        var baseData = new Metric(logger, name, average, sampleCount, min, max, customProperties);\r\n        var data = new Data(Metric.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope(logger, Metric.envelopeType, telemetryItem, data);\r\n    };\r\n    MetricEnvelopeCreator.MetricEnvelopeCreator = new MetricEnvelopeCreator();\r\n    return MetricEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { MetricEnvelopeCreator };\r\nvar PageViewEnvelopeCreator = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PageViewEnvelopeCreator, _super);\r\n    function PageViewEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PageViewEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        this._logger = logger;\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\r\n        }\r\n        // Since duration is not part of the domain properties in Common Schema, extract it from part C\r\n        var duration = undefined;\r\n        if (!CoreUtils.isNullOrUndefined(telemetryItem.baseData) &&\r\n            !CoreUtils.isNullOrUndefined(telemetryItem.baseData.properties) &&\r\n            !CoreUtils.isNullOrUndefined(telemetryItem.baseData.properties.duration)) {\r\n            duration = telemetryItem.baseData.properties.duration;\r\n            delete telemetryItem.baseData.properties.duration;\r\n        }\r\n        else if (!CoreUtils.isNullOrUndefined(telemetryItem.data) &&\r\n            !CoreUtils.isNullOrUndefined(telemetryItem.data[\"duration\"])) {\r\n            duration = telemetryItem.data[\"duration\"];\r\n            delete telemetryItem.data[\"duration\"];\r\n        }\r\n        var bd = telemetryItem.baseData;\r\n        // special case: pageview.id is grabbed from current operation id. Analytics plugin is decoupled from properties plugin, so this is done here instead. This can be made a default telemetry intializer instead if needed to be decoupled from channel\r\n        var currentContextId;\r\n        if (telemetryItem.ext && telemetryItem.ext.trace && telemetryItem.ext.trace.traceID) {\r\n            currentContextId = telemetryItem.ext.trace.traceID;\r\n        }\r\n        var id = bd.id || currentContextId;\r\n        var name = bd.name;\r\n        var url = bd.uri;\r\n        var properties = bd.properties || {};\r\n        var measurements = bd.measurements || {};\r\n        // refUri is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n        if (!CoreUtils.isNullOrUndefined(bd.refUri)) {\r\n            properties[\"refUri\"] = bd.refUri;\r\n        }\r\n        // pageType is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n        if (!CoreUtils.isNullOrUndefined(bd.pageType)) {\r\n            properties[\"pageType\"] = bd.pageType;\r\n        }\r\n        // isLoggedIn is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n        if (!CoreUtils.isNullOrUndefined(bd.isLoggedIn)) {\r\n            properties[\"isLoggedIn\"] = bd.isLoggedIn.toString();\r\n        }\r\n        // pageTags is a field that Breeze still does not recognize as part of Part B. For now, put it in Part C until it supports it as a domain property\r\n        if (!CoreUtils.isNullOrUndefined(bd.properties)) {\r\n            var pageTags = bd.properties;\r\n            for (var key in pageTags) {\r\n                if (pageTags.hasOwnProperty(key)) {\r\n                    properties[key] = pageTags[key];\r\n                }\r\n            }\r\n        }\r\n        var baseData = new PageView(logger, name, url, duration, properties, measurements, id);\r\n        var data = new Data(PageView.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope(logger, PageView.envelopeType, telemetryItem, data);\r\n    };\r\n    PageViewEnvelopeCreator.PageViewEnvelopeCreator = new PageViewEnvelopeCreator();\r\n    return PageViewEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { PageViewEnvelopeCreator };\r\nvar PageViewPerformanceEnvelopeCreator = /** @class */ (function (_super) {\r\n    tslib_1.__extends(PageViewPerformanceEnvelopeCreator, _super);\r\n    function PageViewPerformanceEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PageViewPerformanceEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        this._logger = logger;\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\r\n        }\r\n        var bd = telemetryItem.baseData;\r\n        var name = bd.name;\r\n        var url = bd.uri || bd.url;\r\n        var properties = bd.properties;\r\n        var measurements = bd.measurements;\r\n        var baseData = new PageViewPerformance(logger, name, url, undefined, properties, measurements, bd);\r\n        var data = new Data(PageViewPerformance.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope(logger, PageViewPerformance.envelopeType, telemetryItem, data);\r\n    };\r\n    PageViewPerformanceEnvelopeCreator.PageViewPerformanceEnvelopeCreator = new PageViewPerformanceEnvelopeCreator();\r\n    return PageViewPerformanceEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { PageViewPerformanceEnvelopeCreator };\r\nvar TraceEnvelopeCreator = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TraceEnvelopeCreator, _super);\r\n    function TraceEnvelopeCreator() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TraceEnvelopeCreator.prototype.Create = function (logger, telemetryItem) {\r\n        this._logger = logger;\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.baseData)) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryEnvelopeInvalid, \"telemetryItem.baseData cannot be null.\");\r\n        }\r\n        var message = telemetryItem.baseData.message;\r\n        var severityLevel = telemetryItem.baseData.severityLevel;\r\n        var customProperties = EnvelopeCreator.extractProperties(telemetryItem.data);\r\n        var props = tslib_1.__assign({}, customProperties, telemetryItem.baseData.properties);\r\n        var baseData = new Trace(logger, message, severityLevel, props);\r\n        var data = new Data(Trace.dataType, baseData);\r\n        return EnvelopeCreator.createEnvelope(logger, Trace.envelopeType, telemetryItem, data);\r\n    };\r\n    TraceEnvelopeCreator.TraceEnvelopeCreator = new TraceEnvelopeCreator();\r\n    return TraceEnvelopeCreator;\r\n}(EnvelopeCreator));\r\nexport { TraceEnvelopeCreator };\r\n//# sourceMappingURL=EnvelopeCreator.js.map","import { Util, FieldType } from '@microsoft/applicationinsights-common';\r\nimport { LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\r\nvar Serializer = /** @class */ (function () {\r\n    function Serializer(logger) {\r\n        this._logger = logger;\r\n    }\r\n    /**\r\n     * Serializes the current object to a JSON string.\r\n     */\r\n    Serializer.prototype.serialize = function (input) {\r\n        var output = this._serializeObject(input, \"root\");\r\n        return JSON.stringify(output);\r\n    };\r\n    Serializer.prototype._serializeObject = function (source, name) {\r\n        var circularReferenceCheck = \"__aiCircularRefCheck\";\r\n        var output = {};\r\n        if (!source) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, \"cannot serialize object because it is null or undefined\", { name: name }, true);\r\n            return output;\r\n        }\r\n        if (source[circularReferenceCheck]) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CircularReferenceDetected, \"Circular reference detected while serializing object\", { name: name }, true);\r\n            return output;\r\n        }\r\n        if (!source.aiDataContract) {\r\n            // special case for measurements/properties/tags\r\n            if (name === \"measurements\") {\r\n                output = this._serializeStringMap(source, \"number\", name);\r\n            }\r\n            else if (name === \"properties\") {\r\n                output = this._serializeStringMap(source, \"string\", name);\r\n            }\r\n            else if (name === \"tags\") {\r\n                output = this._serializeStringMap(source, \"string\", name);\r\n            }\r\n            else if (Util.isArray(source)) {\r\n                output = this._serializeArray(source, name);\r\n            }\r\n            else {\r\n                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotSerializeObjectNonSerializable, \"Attempting to serialize an object which does not implement ISerializable\", { name: name }, true);\r\n                try {\r\n                    // verify that the object can be stringified\r\n                    JSON.stringify(source);\r\n                    output = source;\r\n                }\r\n                catch (e) {\r\n                    // if serialization fails return an empty string\r\n                    this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSerializeObject, (e && typeof e.toString === 'function') ? e.toString() : \"Error serializing object\", null, true);\r\n                }\r\n            }\r\n            return output;\r\n        }\r\n        source[circularReferenceCheck] = true;\r\n        for (var field in source.aiDataContract) {\r\n            var contract = source.aiDataContract[field];\r\n            var isRequired = (typeof contract === \"function\") ? (contract() & FieldType.Required) : (contract & FieldType.Required);\r\n            var isHidden = (typeof contract === \"function\") ? (contract() & FieldType.Hidden) : (contract & FieldType.Hidden);\r\n            var isArray = contract & FieldType.Array;\r\n            var isPresent = source[field] !== undefined;\r\n            var isObject = typeof source[field] === \"object\" && source[field] !== null;\r\n            if (isRequired && !isPresent && !isArray) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.MissingRequiredFieldSpecification, \"Missing required field specification. The field is required but not present on source\", { field: field, name: name });\r\n                // If not in debug mode, continue and hope the error is permissible\r\n                continue;\r\n            }\r\n            if (isHidden) {\r\n                // Don't serialize hidden fields\r\n                continue;\r\n            }\r\n            var value;\r\n            if (isObject) {\r\n                if (isArray) {\r\n                    // special case; resurse on each object in the source array\r\n                    value = this._serializeArray(source[field], field);\r\n                }\r\n                else {\r\n                    // recurse on the source object in this field\r\n                    value = this._serializeObject(source[field], field);\r\n                }\r\n            }\r\n            else {\r\n                // assign the source field to the output even if undefined or required\r\n                value = source[field];\r\n            }\r\n            // only emit this field if the value is defined\r\n            if (value !== undefined) {\r\n                output[field] = value;\r\n            }\r\n        }\r\n        delete source[circularReferenceCheck];\r\n        return output;\r\n    };\r\n    Serializer.prototype._serializeArray = function (sources, name) {\r\n        var output = undefined;\r\n        if (!!sources) {\r\n            if (!Util.isArray(sources)) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.ItemNotInArray, \"This field was specified as an array in the contract but the item is not an array.\\r\\n\", { name: name }, true);\r\n            }\r\n            else {\r\n                output = [];\r\n                for (var i = 0; i < sources.length; i++) {\r\n                    var source = sources[i];\r\n                    var item = this._serializeObject(source, name + \"[\" + i + \"]\");\r\n                    output.push(item);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    };\r\n    Serializer.prototype._serializeStringMap = function (map, expectedType, name) {\r\n        var output = undefined;\r\n        if (map) {\r\n            output = {};\r\n            for (var field in map) {\r\n                var value = map[field];\r\n                if (expectedType === \"string\") {\r\n                    if (value === undefined) {\r\n                        output[field] = \"undefined\";\r\n                    }\r\n                    else if (value === null) {\r\n                        output[field] = \"null\";\r\n                    }\r\n                    else if (!value.toString) {\r\n                        output[field] = \"invalid field: toString() is not defined.\";\r\n                    }\r\n                    else {\r\n                        output[field] = value.toString();\r\n                    }\r\n                }\r\n                else if (expectedType === \"number\") {\r\n                    if (value === undefined) {\r\n                        output[field] = \"undefined\";\r\n                    }\r\n                    else if (value === null) {\r\n                        output[field] = \"null\";\r\n                    }\r\n                    else {\r\n                        var num = parseFloat(value);\r\n                        if (isNaN(num)) {\r\n                            output[field] = \"NaN\";\r\n                        }\r\n                        else {\r\n                            output[field] = num;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    output[field] = \"invalid field: \" + name + \" is of unknown type.\";\r\n                    this._logger.throwInternal(LoggingSeverity.CRITICAL, output[field], null, true);\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    };\r\n    return Serializer;\r\n}());\r\nexport { Serializer };\r\n//# sourceMappingURL=Serializer.js.map","import { CoreUtils } from '@microsoft/applicationinsights-core-js';\r\n/**\r\n * @description Monitors browser for offline events\r\n * @export default - Offline: Static instance of OfflineListener\r\n * @class OfflineListener\r\n */\r\nvar OfflineListener = /** @class */ (function () {\r\n    function OfflineListener() {\r\n        this._onlineStatus = true;\r\n        try {\r\n            if (typeof window === 'undefined') {\r\n                this.isListening = false;\r\n            }\r\n            else if (window && window.addEventListener) {\r\n                window.addEventListener('online', this._setOnline.bind(this), false);\r\n                window.addEventListener('offline', this._setOffline.bind(this), false);\r\n                this.isListening = true;\r\n            }\r\n            else if (document && document.body) {\r\n                document.body.ononline = this._setOnline.bind(this);\r\n                document.body.onoffline = this._setOffline.bind(this);\r\n                this.isListening = true;\r\n            }\r\n            else if (document) {\r\n                document.ononline = this._setOnline.bind(this);\r\n                document.onoffline = this._setOffline.bind(this);\r\n                this.isListening = true;\r\n            }\r\n            else {\r\n                // Could not find a place to add event listener\r\n                this.isListening = false;\r\n            }\r\n        }\r\n        catch (e) {\r\n            //this makes react-native less angry\r\n            this.isListening = false;\r\n        }\r\n    }\r\n    OfflineListener.prototype._setOnline = function () {\r\n        this._onlineStatus = true;\r\n    };\r\n    OfflineListener.prototype._setOffline = function () {\r\n        this._onlineStatus = false;\r\n    };\r\n    OfflineListener.prototype.isOnline = function () {\r\n        if (this.isListening) {\r\n            return this._onlineStatus;\r\n        }\r\n        else if (navigator && !CoreUtils.isNullOrUndefined(navigator.onLine)) {\r\n            return navigator.onLine;\r\n        }\r\n        else {\r\n            // Cannot determine online status - report as online\r\n            return true;\r\n        }\r\n    };\r\n    OfflineListener.prototype.isOffline = function () {\r\n        return !this.isOnline();\r\n    };\r\n    OfflineListener.Offline = new OfflineListener;\r\n    return OfflineListener;\r\n}());\r\nexport { OfflineListener };\r\nexport var Offline = OfflineListener.Offline;\r\n//# sourceMappingURL=Offline.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar HashCodeScoreGenerator = /** @class */ (function () {\r\n    function HashCodeScoreGenerator() {\r\n    }\r\n    HashCodeScoreGenerator.prototype.getHashCodeScore = function (key) {\r\n        var score = this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE;\r\n        return score * 100;\r\n    };\r\n    HashCodeScoreGenerator.prototype.getHashCode = function (input) {\r\n        if (input == \"\") {\r\n            return 0;\r\n        }\r\n        while (input.length < HashCodeScoreGenerator.MIN_INPUT_LENGTH) {\r\n            input = input.concat(input);\r\n        }\r\n        // 5381 is a magic number: http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function\r\n        var hash = 5381;\r\n        for (var i = 0; i < input.length; ++i) {\r\n            hash = ((hash << 5) + hash) + input.charCodeAt(i);\r\n            // 'hash' is of number type which means 53 bit integer (http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)\r\n            // 'hash & hash' will keep it 32 bit integer - just to make it clearer what the result is.\r\n            hash = hash & hash;\r\n        }\r\n        return Math.abs(hash);\r\n    };\r\n    // We're using 32 bit math, hence max value is (2^31 - 1)\r\n    HashCodeScoreGenerator.INT_MAX_VALUE = 2147483647;\r\n    // (Magic number) DJB algorithm can't work on shorter strings (results in poor distribution\r\n    HashCodeScoreGenerator.MIN_INPUT_LENGTH = 8;\r\n    return HashCodeScoreGenerator;\r\n}());\r\nexport { HashCodeScoreGenerator };\r\n//# sourceMappingURL=HashCodeScoreGenerator.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { HashCodeScoreGenerator } from './HashCodeScoreGenerator';\r\nimport { ContextTagKeys } from '@microsoft/applicationinsights-common';\r\nvar SamplingScoreGenerator = /** @class */ (function () {\r\n    function SamplingScoreGenerator() {\r\n        this.hashCodeGeneragor = new HashCodeScoreGenerator();\r\n        this.keys = new ContextTagKeys();\r\n    }\r\n    SamplingScoreGenerator.prototype.getSamplingScore = function (item) {\r\n        var score = 0;\r\n        if (item.tags && item.tags[this.keys.userId]) {\r\n            score = this.hashCodeGeneragor.getHashCodeScore(item.tags[this.keys.userId]);\r\n        }\r\n        else if (item.ext && item.ext.user && item.ext.user.id) {\r\n            score = this.hashCodeGeneragor.getHashCodeScore(item.ext.user.id);\r\n        }\r\n        else if (item.tags && item.tags[this.keys.operationId]) {\r\n            score = this.hashCodeGeneragor.getHashCodeScore(item.tags[this.keys.operationId]);\r\n        }\r\n        else if (item.ext && item.ext.telemetryTrace && item.ext.telemetryTrace.traceID) {\r\n            score = this.hashCodeGeneragor.getHashCodeScore(item.ext.telemetryTrace.traceID);\r\n        }\r\n        else {\r\n            // tslint:disable-next-line:insecure-random\r\n            score = (Math.random() * 100);\r\n        }\r\n        return score;\r\n    };\r\n    return SamplingScoreGenerator;\r\n}());\r\nexport { SamplingScoreGenerator };\r\n//# sourceMappingURL=SamplingScoreGenerator.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { SamplingScoreGenerator } from './SamplingScoreGenerators/SamplingScoreGenerator';\r\nimport { Metric } from '@microsoft/applicationinsights-common';\r\nimport { _InternalMessageId, LoggingSeverity, DiagnosticLogger, CoreUtils } from '@microsoft/applicationinsights-core-js';\r\nvar Sample = /** @class */ (function () {\r\n    function Sample(sampleRate, logger) {\r\n        // We're using 32 bit math, hence max value is (2^31 - 1)\r\n        this.INT_MAX_VALUE = 2147483647;\r\n        if (CoreUtils.isNullOrUndefined(logger)) {\r\n            this._logger = new DiagnosticLogger();\r\n        }\r\n        else {\r\n            this._logger = logger;\r\n        }\r\n        if (sampleRate > 100 || sampleRate < 0) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SampleRateOutOfRange, \"Sampling rate is out of range (0..100). Sampling will be disabled, you may be sending too much data which may affect your AI service level.\", { samplingRate: sampleRate }, true);\r\n            this.sampleRate = 100;\r\n        }\r\n        this.sampleRate = sampleRate;\r\n        this.samplingScoreGenerator = new SamplingScoreGenerator();\r\n    }\r\n    /**\r\n    * Determines if an envelope is sampled in (i.e. will be sent) or not (i.e. will be dropped).\r\n    */\r\n    Sample.prototype.isSampledIn = function (envelope) {\r\n        var samplingPercentage = this.sampleRate; // 0 - 100\r\n        var isSampledIn = false;\r\n        if (samplingPercentage === null || samplingPercentage === undefined || samplingPercentage >= 100) {\r\n            return true;\r\n        }\r\n        else if (envelope.baseType === Metric.dataType) {\r\n            // exclude MetricData telemetry from sampling\r\n            return true;\r\n        }\r\n        isSampledIn = this.samplingScoreGenerator.getSamplingScore(envelope) < samplingPercentage;\r\n        return isSampledIn;\r\n    };\r\n    return Sample;\r\n}());\r\nexport { Sample };\r\n//# sourceMappingURL=Sample.js.map","import * as tslib_1 from \"tslib\";\r\nimport { SessionStorageSendBuffer, ArraySendBuffer } from './SendBuffer';\r\nimport { DependencyEnvelopeCreator, EventEnvelopeCreator, ExceptionEnvelopeCreator, MetricEnvelopeCreator, PageViewEnvelopeCreator, PageViewPerformanceEnvelopeCreator, TraceEnvelopeCreator } from './EnvelopeCreator';\r\nimport { Serializer } from './Serializer'; // todo move to channel\r\nimport { DisabledPropertyName, RequestHeaders, Util, PageView, Event, Trace, Exception, Metric, PageViewPerformance, RemoteDependencyData, ConfigurationManager, ProcessLegacy, BreezeChannelIdentifier, SampleRate } from '@microsoft/applicationinsights-common';\r\nimport { CoreUtils, _InternalMessageId, LoggingSeverity, } from '@microsoft/applicationinsights-core-js';\r\nimport { Offline } from './Offline';\r\nimport { Sample } from './TelemetryProcessors/Sample';\r\nvar Sender = /** @class */ (function () {\r\n    function Sender() {\r\n        this.priority = 1001;\r\n        this.identifier = BreezeChannelIdentifier;\r\n        /**\r\n         * Whether XMLHttpRequest object is supported. Older version of IE (8,9) do not support it.\r\n         */\r\n        this._XMLHttpRequestSupported = false;\r\n    }\r\n    Sender.prototype.pause = function () {\r\n        throw new Error(\"Method not implemented.\");\r\n    };\r\n    Sender.prototype.resume = function () {\r\n        throw new Error(\"Method not implemented.\");\r\n    };\r\n    Sender.prototype.flush = function () {\r\n        try {\r\n            this.triggerSend();\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FlushFailed, \"flush failed, telemetry will not be collected: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n    };\r\n    Sender.prototype.teardown = function () {\r\n        throw new Error(\"Method not implemented.\");\r\n    };\r\n    Sender.prototype.initialize = function (config, core, extensions) {\r\n        var _this = this;\r\n        this._logger = core.logger;\r\n        this._serializer = new Serializer(core.logger);\r\n        this._consecutiveErrors = 0;\r\n        this._retryAt = null;\r\n        this._lastSend = 0;\r\n        this._sender = null;\r\n        var defaultConfig = Sender._getDefaultAppInsightsChannelConfig();\r\n        this._config = Sender._getEmptyAppInsightsChannelConfig();\r\n        var _loop_1 = function (field) {\r\n            this_1._config[field] = function () { return ConfigurationManager.getConfig(config, field, _this.identifier, defaultConfig[field]()); };\r\n        };\r\n        var this_1 = this;\r\n        for (var field in defaultConfig) {\r\n            _loop_1(field);\r\n        }\r\n        this._buffer = (this._config.enableSessionStorageBuffer && Util.canUseSessionStorage())\r\n            ? new SessionStorageSendBuffer(this._logger, this._config) : new ArraySendBuffer(this._config);\r\n        this._sample = new Sample(this._config.samplingPercentage(), this._logger);\r\n        if (!this._config.isBeaconApiDisabled() && Util.IsBeaconApiSupported()) {\r\n            this._sender = this._beaconSender;\r\n        }\r\n        else {\r\n            if (typeof XMLHttpRequest != \"undefined\") {\r\n                var testXhr = new XMLHttpRequest();\r\n                if (\"withCredentials\" in testXhr) {\r\n                    this._sender = this._xhrSender;\r\n                    this._XMLHttpRequestSupported = true;\r\n                }\r\n                else if (typeof XDomainRequest !== \"undefined\") {\r\n                    this._sender = this._xdrSender; //IE 8 and 9\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Sender.prototype.processTelemetry = function (telemetryItem) {\r\n        var _this = this;\r\n        try {\r\n            // if master off switch is set, don't send any data\r\n            if (this._config.disableTelemetry()) {\r\n                // Do not send/save data\r\n                return;\r\n            }\r\n            // validate input\r\n            if (!telemetryItem) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSendEmptyTelemetry, \"Cannot send empty telemetry\");\r\n                return;\r\n            }\r\n            // validate event\r\n            if (telemetryItem.baseData && !telemetryItem.baseType) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.InvalidEvent, \"Cannot send telemetry without baseData and baseType\");\r\n                return;\r\n            }\r\n            if (!telemetryItem.baseType) {\r\n                // Default\r\n                telemetryItem.baseType = \"EventData\";\r\n            }\r\n            // ensure a sender was constructed\r\n            if (!this._sender) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.SenderNotInitialized, \"Sender was not initialized\");\r\n                return;\r\n            }\r\n            // check if this item should be sampled in, else add sampleRate tag\r\n            if (!this._isSampledIn(telemetryItem)) {\r\n                // Item is sampled out, do not send it\r\n                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TelemetrySampledAndNotSent, \"Telemetry item was sampled out and not sent\", { SampleRate: this._sample.sampleRate });\r\n                return;\r\n            }\r\n            else {\r\n                telemetryItem.tags = telemetryItem.tags || {};\r\n                telemetryItem.tags[SampleRate] = this._sample.sampleRate;\r\n            }\r\n            // construct an envelope that Application Insights endpoint can understand\r\n            var aiEnvelope_1 = Sender.constructEnvelope(telemetryItem, this._config.instrumentationKey(), this._logger);\r\n            if (!aiEnvelope_1) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CreateEnvelopeError, \"Unable to create an AppInsights envelope\");\r\n                return;\r\n            }\r\n            var doNotSendItem_1 = false;\r\n            // this is for running in legacy mode, where customer may already have a custom initializer present\r\n            if (telemetryItem.tags && telemetryItem.tags[ProcessLegacy]) {\r\n                telemetryItem.tags[ProcessLegacy].forEach(function (callBack) {\r\n                    try {\r\n                        if (callBack && callBack(aiEnvelope_1) === false) {\r\n                            doNotSendItem_1 = true;\r\n                            _this._logger.warnToConsole(\"Telemetry processor check returns false\");\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                        // log error but dont stop executing rest of the telemetry initializers\r\n                        // doNotSendItem = true;\r\n                        _this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"One of telemetry initializers failed, telemetry item will not be sent: \" + Util.getExceptionName(e), { exception: Util.dump(e) }, true);\r\n                    }\r\n                });\r\n                delete telemetryItem.tags[ProcessLegacy];\r\n            }\r\n            if (doNotSendItem_1) {\r\n                return; // do not send, no need to execute next plugin\r\n            }\r\n            // check if the incoming payload is too large, truncate if necessary\r\n            var payload = this._serializer.serialize(aiEnvelope_1);\r\n            // flush if we would exceed the max-size limit by adding this item\r\n            var bufferPayload = this._buffer.getItems();\r\n            var batch = this._buffer.batchPayloads(bufferPayload);\r\n            if (batch && (batch.length + payload.length > this._config.maxBatchSizeInBytes())) {\r\n                this.triggerSend();\r\n            }\r\n            // enqueue the payload\r\n            this._buffer.enqueue(payload);\r\n            // ensure an invocation timeout is set\r\n            this._setupTimer();\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedAddingTelemetryToBuffer, \"Failed adding telemetry to the sender's buffer, some telemetry will be lost: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n        // hand off the telemetry item to the next plugin\r\n        if (!CoreUtils.isNullOrUndefined(this._nextPlugin)) {\r\n            this._nextPlugin.processTelemetry(telemetryItem);\r\n        }\r\n    };\r\n    Sender.prototype.setNextPlugin = function (next) {\r\n        this._nextPlugin = next;\r\n    };\r\n    /**\r\n     * xhr state changes\r\n     */\r\n    Sender.prototype._xhrReadyStateChange = function (xhr, payload, countOfItemsInPayload) {\r\n        if (xhr.readyState === 4) {\r\n            var response = null;\r\n            if (!this._appId) {\r\n                response = this._parseResponse(xhr.responseText || xhr.response);\r\n                if (response && response.appId) {\r\n                    this._appId = response.appId;\r\n                }\r\n            }\r\n            if ((xhr.status < 200 || xhr.status >= 300) && xhr.status !== 0) {\r\n                if (!this._config.isRetryDisabled() && this._isRetriable(xhr.status)) {\r\n                    this._resendPayload(payload);\r\n                    this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, \". \" +\r\n                        \"Response code \" + xhr.status + \". Will retry to send \" + payload.length + \" items.\");\r\n                }\r\n                else {\r\n                    this._onError(payload, this._formatErrorMessageXhr(xhr));\r\n                }\r\n            }\r\n            else if (Offline.isOffline()) {\r\n                // Note: Don't check for staus == 0, since adblock gives this code\r\n                if (!this._config.isRetryDisabled()) {\r\n                    var offlineBackOffMultiplier = 10; // arbritrary number\r\n                    this._resendPayload(payload, offlineBackOffMultiplier);\r\n                    this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, \". Offline - Response Code: \" + xhr.status + \". Offline status: \" + Offline.isOffline() + \". Will retry to send \" + payload.length + \" items.\");\r\n                }\r\n            }\r\n            else {\r\n                if (xhr.status === 206) {\r\n                    if (!response) {\r\n                        response = this._parseResponse(xhr.responseText || xhr.response);\r\n                    }\r\n                    if (response && !this._config.isRetryDisabled()) {\r\n                        this._onPartialSuccess(payload, response);\r\n                    }\r\n                    else {\r\n                        this._onError(payload, this._formatErrorMessageXhr(xhr));\r\n                    }\r\n                }\r\n                else {\r\n                    this._consecutiveErrors = 0;\r\n                    this._onSuccess(payload, countOfItemsInPayload);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Immediately send buffered data\r\n     * @param async {boolean} - Indicates if the events should be sent asynchronously\r\n     */\r\n    Sender.prototype.triggerSend = function (async) {\r\n        if (async === void 0) { async = true; }\r\n        try {\r\n            // Send data only if disableTelemetry is false\r\n            if (!this._config.disableTelemetry()) {\r\n                if (this._buffer.count() > 0) {\r\n                    var payload = this._buffer.getItems();\r\n                    // invoke send\r\n                    this._sender(payload, async);\r\n                }\r\n                // update lastSend time to enable throttling\r\n                this._lastSend = +new Date;\r\n            }\r\n            else {\r\n                this._buffer.clear();\r\n            }\r\n            clearTimeout(this._timeoutHandle);\r\n            this._timeoutHandle = null;\r\n            this._retryAt = null;\r\n        }\r\n        catch (e) {\r\n            /* Ignore this error for IE under v10 */\r\n            if (!Util.getIEVersion() || Util.getIEVersion() > 9) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.TransmissionFailed, \"Telemetry transmission failed, some telemetry will be lost: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * error handler\r\n     */\r\n    Sender.prototype._onError = function (payload, message, event) {\r\n        this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.OnError, \"Failed to send telemetry.\", { message: message });\r\n        this._buffer.clearSent(payload);\r\n    };\r\n    /**\r\n     * partial success handler\r\n     */\r\n    Sender.prototype._onPartialSuccess = function (payload, results) {\r\n        var failed = [];\r\n        var retry = [];\r\n        // Iterate through the reversed array of errors so that splicing doesn't have invalid indexes after the first item.\r\n        var errors = results.errors.reverse();\r\n        for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {\r\n            var error = errors_1[_i];\r\n            var extracted = payload.splice(error.index, 1)[0];\r\n            if (this._isRetriable(error.statusCode)) {\r\n                retry.push(extracted);\r\n            }\r\n            else {\r\n                // All other errors, including: 402 (Monthly quota exceeded) and 439 (Too many requests and refresh cache).\r\n                failed.push(extracted);\r\n            }\r\n        }\r\n        if (payload.length > 0) {\r\n            this._onSuccess(payload, results.itemsAccepted);\r\n        }\r\n        if (failed.length > 0) {\r\n            this._onError(failed, this._formatErrorMessageXhr(null, ['partial success', results.itemsAccepted, 'of', results.itemsReceived].join(' ')));\r\n        }\r\n        if (retry.length > 0) {\r\n            this._resendPayload(retry);\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, \"Partial success. \" +\r\n                \"Delivered: \" + payload.length + \", Failed: \" + failed.length +\r\n                \". Will retry to send \" + retry.length + \" our of \" + results.itemsReceived + \" items\");\r\n        }\r\n    };\r\n    /**\r\n     * success handler\r\n     */\r\n    Sender.prototype._onSuccess = function (payload, countOfItemsInPayload) {\r\n        this._buffer.clearSent(payload);\r\n    };\r\n    /**\r\n     * xdr state changes\r\n     */\r\n    Sender.prototype._xdrOnLoad = function (xdr, payload) {\r\n        if (xdr && (xdr.responseText + \"\" === \"200\" || xdr.responseText === \"\")) {\r\n            this._consecutiveErrors = 0;\r\n            this._onSuccess(payload, 0);\r\n        }\r\n        else {\r\n            var results = this._parseResponse(xdr.responseText);\r\n            if (results && results.itemsReceived && results.itemsReceived > results.itemsAccepted\r\n                && !this._config.isRetryDisabled()) {\r\n                this._onPartialSuccess(payload, results);\r\n            }\r\n            else {\r\n                this._onError(payload, this._formatErrorMessageXdr(xdr));\r\n            }\r\n        }\r\n    };\r\n    Sender.constructEnvelope = function (orig, iKey, logger) {\r\n        var envelope;\r\n        if (iKey !== orig.iKey && !CoreUtils.isNullOrUndefined(iKey)) {\r\n            envelope = tslib_1.__assign({}, orig, { iKey: iKey });\r\n        }\r\n        else {\r\n            envelope = orig;\r\n        }\r\n        switch (envelope.baseType) {\r\n            case Event.dataType:\r\n                return EventEnvelopeCreator.EventEnvelopeCreator.Create(logger, envelope);\r\n            case Trace.dataType:\r\n                return TraceEnvelopeCreator.TraceEnvelopeCreator.Create(logger, envelope);\r\n            case PageView.dataType:\r\n                return PageViewEnvelopeCreator.PageViewEnvelopeCreator.Create(logger, envelope);\r\n            case PageViewPerformance.dataType:\r\n                return PageViewPerformanceEnvelopeCreator.PageViewPerformanceEnvelopeCreator.Create(logger, envelope);\r\n            case Exception.dataType:\r\n                return ExceptionEnvelopeCreator.ExceptionEnvelopeCreator.Create(logger, envelope);\r\n            case Metric.dataType:\r\n                return MetricEnvelopeCreator.MetricEnvelopeCreator.Create(logger, envelope);\r\n            case RemoteDependencyData.dataType:\r\n                return DependencyEnvelopeCreator.DependencyEnvelopeCreator.Create(logger, envelope);\r\n            default:\r\n                return EventEnvelopeCreator.EventEnvelopeCreator.Create(logger, envelope);\r\n        }\r\n    };\r\n    Sender._getDefaultAppInsightsChannelConfig = function () {\r\n        // set default values\r\n        return {\r\n            endpointUrl: function () { return \"https://dc.services.visualstudio.com/v2/track\"; },\r\n            emitLineDelimitedJson: function () { return false; },\r\n            maxBatchInterval: function () { return 15000; },\r\n            maxBatchSizeInBytes: function () { return 102400; },\r\n            disableTelemetry: function () { return false; },\r\n            enableSessionStorageBuffer: function () { return true; },\r\n            isRetryDisabled: function () { return false; },\r\n            isBeaconApiDisabled: function () { return true; },\r\n            instrumentationKey: function () { return undefined; },\r\n            namePrefix: function () { return undefined; },\r\n            samplingPercentage: function () { return 100; }\r\n        };\r\n    };\r\n    Sender._getEmptyAppInsightsChannelConfig = function () {\r\n        return {\r\n            endpointUrl: undefined,\r\n            emitLineDelimitedJson: undefined,\r\n            maxBatchInterval: undefined,\r\n            maxBatchSizeInBytes: undefined,\r\n            disableTelemetry: undefined,\r\n            enableSessionStorageBuffer: undefined,\r\n            isRetryDisabled: undefined,\r\n            isBeaconApiDisabled: undefined,\r\n            instrumentationKey: undefined,\r\n            namePrefix: undefined,\r\n            samplingPercentage: undefined\r\n        };\r\n    };\r\n    Sender.prototype._isSampledIn = function (envelope) {\r\n        return this._sample.isSampledIn(envelope);\r\n    };\r\n    /**\r\n     * Send Beacon API request\r\n     * @param payload {string} - The data payload to be sent.\r\n     * @param isAsync {boolean} - not used\r\n     * Note: Beacon API does not support custom headers and we are not able to get\r\n     * appId from the backend for the correct correlation.\r\n     */\r\n    Sender.prototype._beaconSender = function (payload, isAsync) {\r\n        var url = this._config.endpointUrl();\r\n        var batch = this._buffer.batchPayloads(payload);\r\n        // Chrome only allows CORS-safelisted values for the sendBeacon data argument\r\n        // see: https://bugs.chromium.org/p/chromium/issues/detail?id=720283\r\n        var plainTextBatch = new Blob([batch], { type: 'text/plain;charset=UTF-8' });\r\n        // The sendBeacon method returns true if the user agent is able to successfully queue the data for transfer. Otherwise it returns false.\r\n        var queued = navigator.sendBeacon(url, plainTextBatch);\r\n        if (queued) {\r\n            this._buffer.markAsSent(payload);\r\n            // no response from beaconSender, clear buffer\r\n            this._onSuccess(payload, payload.length);\r\n        }\r\n        else {\r\n            this._xhrSender(payload, true);\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, \". \" + \"Failed to send telemetry with Beacon API, retried with xhrSender.\");\r\n        }\r\n    };\r\n    /**\r\n     * Send XMLHttpRequest\r\n     * @param payload {string} - The data payload to be sent.\r\n     * @param isAsync {boolean} - Indicates if the request should be sent asynchronously\r\n     */\r\n    Sender.prototype._xhrSender = function (payload, isAsync) {\r\n        var _this = this;\r\n        var xhr = new XMLHttpRequest();\r\n        xhr[DisabledPropertyName] = true;\r\n        xhr.open(\"POST\", this._config.endpointUrl(), isAsync);\r\n        xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n        // append Sdk-Context request header only in case of breeze endpoint\r\n        if (Util.isInternalApplicationInsightsEndpoint(this._config.endpointUrl())) {\r\n            xhr.setRequestHeader(RequestHeaders.sdkContextHeader, RequestHeaders.sdkContextHeaderAppIdRequest);\r\n        }\r\n        xhr.onreadystatechange = function () { return _this._xhrReadyStateChange(xhr, payload, payload.length); };\r\n        xhr.onerror = function (event) { return _this._onError(payload, _this._formatErrorMessageXhr(xhr), event); };\r\n        // compose an array of payloads\r\n        var batch = this._buffer.batchPayloads(payload);\r\n        xhr.send(batch);\r\n        this._buffer.markAsSent(payload);\r\n    };\r\n    /**\r\n     * Parses the response from the backend.\r\n     * @param response - XMLHttpRequest or XDomainRequest response\r\n     */\r\n    Sender.prototype._parseResponse = function (response) {\r\n        try {\r\n            if (response && response !== \"\") {\r\n                var result = JSON.parse(response);\r\n                if (result && result.itemsReceived && result.itemsReceived >= result.itemsAccepted &&\r\n                    result.itemsReceived - result.itemsAccepted == result.errors.length) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.InvalidBackendResponse, \"Cannot parse the response. \" + Util.getExceptionName(e), {\r\n                response: response\r\n            });\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Resend payload. Adds payload back to the send buffer and setup a send timer (with exponential backoff).\r\n     * @param payload\r\n     */\r\n    Sender.prototype._resendPayload = function (payload, linearFactor) {\r\n        if (linearFactor === void 0) { linearFactor = 1; }\r\n        if (!payload || payload.length === 0) {\r\n            return;\r\n        }\r\n        this._buffer.clearSent(payload);\r\n        this._consecutiveErrors++;\r\n        for (var _i = 0, payload_1 = payload; _i < payload_1.length; _i++) {\r\n            var item = payload_1[_i];\r\n            this._buffer.enqueue(item);\r\n        }\r\n        // setup timer\r\n        this._setRetryTime(linearFactor);\r\n        this._setupTimer();\r\n    };\r\n    /** Calculates the time to wait before retrying in case of an error based on\r\n     * http://en.wikipedia.org/wiki/Exponential_backoff\r\n     */\r\n    Sender.prototype._setRetryTime = function (linearFactor) {\r\n        var SlotDelayInSeconds = 10;\r\n        var delayInSeconds;\r\n        if (this._consecutiveErrors <= 1) {\r\n            delayInSeconds = SlotDelayInSeconds;\r\n        }\r\n        else {\r\n            var backOffSlot = (Math.pow(2, this._consecutiveErrors) - 1) / 2;\r\n            // tslint:disable-next-line:insecure-random\r\n            var backOffDelay = Math.floor(Math.random() * backOffSlot * SlotDelayInSeconds) + 1;\r\n            backOffDelay = linearFactor * backOffDelay;\r\n            delayInSeconds = Math.max(Math.min(backOffDelay, 3600), SlotDelayInSeconds);\r\n        }\r\n        // TODO: Log the backoff time like the C# version does.\r\n        var retryAfterTimeSpan = Date.now() + (delayInSeconds * 1000);\r\n        // TODO: Log the retry at time like the C# version does.\r\n        this._retryAt = retryAfterTimeSpan;\r\n    };\r\n    /**\r\n     * Sets up the timer which triggers actually sending the data.\r\n     */\r\n    Sender.prototype._setupTimer = function () {\r\n        var _this = this;\r\n        if (!this._timeoutHandle) {\r\n            var retryInterval = this._retryAt ? Math.max(0, this._retryAt - Date.now()) : 0;\r\n            var timerValue = Math.max(this._config.maxBatchInterval(), retryInterval);\r\n            this._timeoutHandle = setTimeout(function () {\r\n                _this.triggerSend();\r\n            }, timerValue);\r\n        }\r\n    };\r\n    /**\r\n     * Checks if the SDK should resend the payload after receiving this status code from the backend.\r\n     * @param statusCode\r\n     */\r\n    Sender.prototype._isRetriable = function (statusCode) {\r\n        return statusCode == 408 // Timeout\r\n            || statusCode == 429 // Too many requests.\r\n            || statusCode == 500 // Internal server error.\r\n            || statusCode == 503; // Service unavailable.\r\n    };\r\n    Sender.prototype._formatErrorMessageXhr = function (xhr, message) {\r\n        if (xhr) {\r\n            return \"XMLHttpRequest,Status:\" + xhr.status + \",Response:\" + xhr.responseText || xhr.response || \"\";\r\n        }\r\n        return message;\r\n    };\r\n    /**\r\n     * Send XDomainRequest\r\n     * @param payload {string} - The data payload to be sent.\r\n     * @param isAsync {boolean} - Indicates if the request should be sent asynchronously\r\n     *\r\n     * Note: XDomainRequest does not support sync requests. This 'isAsync' parameter is added\r\n     * to maintain consistency with the xhrSender's contract\r\n     * Note: XDomainRequest does not support custom headers and we are not able to get\r\n     * appId from the backend for the correct correlation.\r\n     */\r\n    Sender.prototype._xdrSender = function (payload, isAsync) {\r\n        var _this = this;\r\n        var xdr = new XDomainRequest();\r\n        xdr.onload = function () { return _this._xdrOnLoad(xdr, payload); };\r\n        xdr.onerror = function (event) { return _this._onError(payload, _this._formatErrorMessageXdr(xdr), event); };\r\n        // XDomainRequest requires the same protocol as the hosting page.\r\n        // If the protocol doesn't match, we can't send the telemetry :(.\r\n        var hostingProtocol = window.location && window.location.protocol;\r\n        if (this._config.endpointUrl().lastIndexOf(hostingProtocol, 0) !== 0) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, \". \" +\r\n                \"Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol.\");\r\n            this._buffer.clear();\r\n            return;\r\n        }\r\n        var endpointUrl = this._config.endpointUrl().replace(/^(https?:)/, \"\");\r\n        xdr.open('POST', endpointUrl);\r\n        // compose an array of payloads\r\n        var batch = this._buffer.batchPayloads(payload);\r\n        xdr.send(batch);\r\n        this._buffer.markAsSent(payload);\r\n    };\r\n    Sender.prototype._formatErrorMessageXdr = function (xdr, message) {\r\n        if (xdr) {\r\n            return \"XDomainRequest,Response:\" + xdr.responseText || \"\";\r\n        }\r\n        return message;\r\n    };\r\n    return Sender;\r\n}());\r\nexport { Sender };\r\n//# sourceMappingURL=Sender.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Util, DateTimeUtils } from '@microsoft/applicationinsights-common';\r\nimport { _InternalMessageId, LoggingSeverity, CoreUtils, DiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\nvar Session = /** @class */ (function () {\r\n    function Session() {\r\n    }\r\n    return Session;\r\n}());\r\nexport { Session };\r\nvar _SessionManager = /** @class */ (function () {\r\n    function _SessionManager(config, logger) {\r\n        var _this = this;\r\n        if (CoreUtils.isNullOrUndefined(logger)) {\r\n            this._logger = new DiagnosticLogger();\r\n        }\r\n        else {\r\n            this._logger = logger;\r\n        }\r\n        if (!config) {\r\n            config = {};\r\n        }\r\n        if (!(typeof config.sessionExpirationMs === \"function\")) {\r\n            config.sessionExpirationMs = function () { return _SessionManager.acquisitionSpan; };\r\n        }\r\n        if (!(typeof config.sessionRenewalMs === \"function\")) {\r\n            config.sessionRenewalMs = function () { return _SessionManager.renewalSpan; };\r\n        }\r\n        this.config = config;\r\n        this._storageNamePrefix = function () { return _this.config.namePrefix && _this.config.namePrefix() ? _SessionManager.cookieNameConst + _this.config.namePrefix() : _SessionManager.cookieNameConst; };\r\n        this.automaticSession = new Session();\r\n    }\r\n    _SessionManager.prototype.update = function () {\r\n        if (!this.automaticSession.id) {\r\n            this.initializeAutomaticSession();\r\n        }\r\n        var now = DateTimeUtils.Now();\r\n        var acquisitionExpired = now - this.automaticSession.acquisitionDate > this.config.sessionExpirationMs();\r\n        var renewalExpired = now - this.automaticSession.renewalDate > this.config.sessionRenewalMs();\r\n        // renew if acquisitionSpan or renewalSpan has ellapsed\r\n        if (acquisitionExpired || renewalExpired) {\r\n            // update automaticSession so session state has correct id\r\n            this.renew();\r\n        }\r\n        else {\r\n            // do not update the cookie more often than cookieUpdateInterval\r\n            if (!this.cookieUpdatedTimestamp || now - this.cookieUpdatedTimestamp > _SessionManager.cookieUpdateInterval) {\r\n                this.automaticSession.renewalDate = now;\r\n                this.setCookie(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *  Record the current state of the automatic session and store it in our cookie string format\r\n     *  into the browser's local storage. This is used to restore the session data when the cookie\r\n     *  expires.\r\n     */\r\n    _SessionManager.prototype.backup = function () {\r\n        this.setStorage(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n    };\r\n    /**\r\n     *  Use config.namePrefix + ai_session cookie data or local storage data (when the cookie is unavailable) to\r\n     *  initialize the automatic session.\r\n     */\r\n    _SessionManager.prototype.initializeAutomaticSession = function () {\r\n        var cookie = Util.getCookie(this._logger, this._storageNamePrefix());\r\n        if (cookie && typeof cookie.split === \"function\") {\r\n            this.initializeAutomaticSessionWithData(cookie);\r\n        }\r\n        else {\r\n            // There's no cookie, but we might have session data in local storage\r\n            // This can happen if the session expired or the user actively deleted the cookie\r\n            // We only want to recover data if the cookie is missing from expiry. We should respect the user's wishes if the cookie was deleted actively.\r\n            // The User class handles this for us and deletes our local storage object if the persistent user cookie was removed.\r\n            var storage = Util.getStorage(this._logger, this._storageNamePrefix());\r\n            if (storage) {\r\n                this.initializeAutomaticSessionWithData(storage);\r\n            }\r\n        }\r\n        if (!this.automaticSession.id) {\r\n            this.renew();\r\n        }\r\n    };\r\n    /**\r\n     *  Extract id, aquisitionDate, and renewalDate from an ai_session payload string and\r\n     *  use this data to initialize automaticSession.\r\n     *\r\n     *  @param {string} sessionData - The string stored in an ai_session cookie or local storage backup\r\n     */\r\n    _SessionManager.prototype.initializeAutomaticSessionWithData = function (sessionData) {\r\n        var params = sessionData.split(\"|\");\r\n        if (params.length > 0) {\r\n            this.automaticSession.id = params[0];\r\n        }\r\n        try {\r\n            if (params.length > 1) {\r\n                var acq = +params[1];\r\n                this.automaticSession.acquisitionDate = +new Date(acq);\r\n                this.automaticSession.acquisitionDate = this.automaticSession.acquisitionDate > 0 ? this.automaticSession.acquisitionDate : 0;\r\n            }\r\n            if (params.length > 2) {\r\n                var renewal = +params[2];\r\n                this.automaticSession.renewalDate = +new Date(renewal);\r\n                this.automaticSession.renewalDate = this.automaticSession.renewalDate > 0 ? this.automaticSession.renewalDate : 0;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.ErrorParsingAISessionCookie, \"Error parsing ai_session cookie, session will be reset: \" + Util.getExceptionName(e), { exception: Util.dump(e) });\r\n        }\r\n        if (this.automaticSession.renewalDate == 0) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SessionRenewalDateIsZero, \"AI session renewal date is 0, session will be reset.\");\r\n        }\r\n    };\r\n    _SessionManager.prototype.renew = function () {\r\n        var now = DateTimeUtils.Now();\r\n        this.automaticSession.id = Util.newId();\r\n        this.automaticSession.acquisitionDate = now;\r\n        this.automaticSession.renewalDate = now;\r\n        this.setCookie(this.automaticSession.id, this.automaticSession.acquisitionDate, this.automaticSession.renewalDate);\r\n        // If this browser does not support local storage, fire an internal log to keep track of it at this point\r\n        if (!Util.canUseLocalStorage()) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.BrowserDoesNotSupportLocalStorage, \"Browser does not support local storage. Session durations will be inaccurate.\");\r\n        }\r\n    };\r\n    _SessionManager.prototype.setCookie = function (guid, acq, renewal) {\r\n        // Set cookie to expire after the session expiry time passes or the session renewal deadline, whichever is sooner\r\n        // Expiring the cookie will cause the session to expire even if the user isn't on the page\r\n        var acquisitionExpiry = acq + this.config.sessionExpirationMs();\r\n        var renewalExpiry = renewal + this.config.sessionRenewalMs();\r\n        var cookieExpiry = new Date();\r\n        var cookie = [guid, acq, renewal];\r\n        if (acquisitionExpiry < renewalExpiry) {\r\n            cookieExpiry.setTime(acquisitionExpiry);\r\n        }\r\n        else {\r\n            cookieExpiry.setTime(renewalExpiry);\r\n        }\r\n        var cookieDomnain = this.config.cookieDomain ? this.config.cookieDomain() : null;\r\n        Util.setCookie(this._logger, this._storageNamePrefix(), cookie.join('|') + ';expires=' + cookieExpiry.toUTCString(), cookieDomnain);\r\n        this.cookieUpdatedTimestamp = DateTimeUtils.Now();\r\n    };\r\n    _SessionManager.prototype.setStorage = function (guid, acq, renewal) {\r\n        // Keep data in local storage to retain the last session id, allowing us to cleanly end the session when it expires\r\n        // Browsers that don't support local storage won't be able to end sessions cleanly from the client\r\n        // The server will notice this and end the sessions itself, with loss of accurate session duration\r\n        Util.setStorage(this._logger, this._storageNamePrefix(), [guid, acq, renewal].join('|'));\r\n    };\r\n    _SessionManager.acquisitionSpan = 86400000; // 24 hours in ms\r\n    _SessionManager.renewalSpan = 1800000; // 30 minutes in ms\r\n    _SessionManager.cookieUpdateInterval = 60000; // 1 minute in ms\r\n    _SessionManager.cookieNameConst = 'ai_session';\r\n    return _SessionManager;\r\n}());\r\nexport { _SessionManager };\r\n//# sourceMappingURL=Session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Application = /** @class */ (function () {\r\n    function Application() {\r\n    }\r\n    return Application;\r\n}());\r\nexport { Application };\r\n//# sourceMappingURL=Application.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Device = /** @class */ (function () {\r\n    /**\r\n     * Constructs a new instance of the Device class\r\n     */\r\n    function Device() {\r\n        // don't attempt to fingerprint browsers\r\n        this.id = \"browser\";\r\n        // Device type is a dimension in our data platform\r\n        // Setting it to 'Browser' allows to separate client and server dependencies/exceptions\r\n        this.deviceClass = \"Browser\";\r\n    }\r\n    return Device;\r\n}());\r\nexport { Device };\r\n//# sourceMappingURL=Device.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Version = \"2.1.1\";\r\nvar Internal = /** @class */ (function () {\r\n    /**\r\n    * Constructs a new instance of the internal telemetry data class.\r\n    */\r\n    function Internal(config) {\r\n        this.sdkVersion = (config.sdkExtension && config.sdkExtension() ? config.sdkExtension() + \"_\" : \"\") + \"javascript:\" + Version;\r\n    }\r\n    return Internal;\r\n}());\r\nexport { Internal };\r\n//# sourceMappingURL=Internal.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Util } from '@microsoft/applicationinsights-common';\r\nimport { _InternalMessageId, LoggingSeverity } from '@microsoft/applicationinsights-core-js';\r\nvar User = /** @class */ (function () {\r\n    function User(config, logger) {\r\n        this._logger = logger;\r\n        //get userId or create new one if none exists\r\n        var cookie = Util.getCookie(this._logger, User.userCookieName);\r\n        if (cookie) {\r\n            var params = cookie.split(User.cookieSeparator);\r\n            if (params.length > 0) {\r\n                this.id = params[0];\r\n            }\r\n        }\r\n        this.config = config;\r\n        if (!this.id) {\r\n            this.id = Util.newId();\r\n            var date = new Date();\r\n            var acqStr = Util.toISOStringForIE8(date);\r\n            this.accountAcquisitionDate = acqStr;\r\n            // without expiration, cookies expire at the end of the session\r\n            // set it to 365 days from now\r\n            // 365 * 24 * 60 * 60 * 1000 = 31536000000 \r\n            date.setTime(date.getTime() + 31536000000);\r\n            var newCookie = [this.id, acqStr];\r\n            var cookieDomain = this.config.cookieDomain ? this.config.cookieDomain() : undefined;\r\n            Util.setCookie(this._logger, User.userCookieName, newCookie.join(User.cookieSeparator) + ';expires=' + date.toUTCString(), cookieDomain);\r\n            // If we have an config.namePrefix() + ai_session in local storage this means the user actively removed our cookies.\r\n            // We should respect their wishes and clear ourselves from local storage\r\n            var name_1 = config.namePrefix && config.namePrefix() ? config.namePrefix() + 'ai_session' : 'ai_session';\r\n            Util.removeStorage(this._logger, name_1);\r\n        }\r\n        // We still take the account id from the ctor param for backward compatibility. \r\n        // But if the the customer set the accountId through the newer setAuthenticatedUserContext API, we will override it.\r\n        this.accountId = config.accountId ? config.accountId() : undefined;\r\n        // Get the auth user id and account id from the cookie if exists\r\n        // Cookie is in the pattern: <authenticatedId>|<accountId>\r\n        var authCookie = Util.getCookie(this._logger, User.authUserCookieName);\r\n        if (authCookie) {\r\n            authCookie = decodeURI(authCookie);\r\n            var authCookieString = authCookie.split(User.cookieSeparator);\r\n            if (authCookieString[0]) {\r\n                this.authenticatedId = authCookieString[0];\r\n            }\r\n            if (authCookieString.length > 1 && authCookieString[1]) {\r\n                this.accountId = authCookieString[1];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n    * Sets the authenticated user id and the account id in this session.\r\n    *\r\n    * @param authenticatedUserId {string} - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.\r\n    * @param accountId {string} - An optional string to represent the account associated with the authenticated user.\r\n    */\r\n    User.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        if (storeInCookie === void 0) { storeInCookie = false; }\r\n        // Validate inputs to ensure no cookie control characters.\r\n        var isInvalidInput = !this.validateUserInput(authenticatedUserId) || (accountId && !this.validateUserInput(accountId));\r\n        if (isInvalidInput) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.SetAuthContextFailedAccountName, \"Setting auth user context failed. \" +\r\n                \"User auth/account id should be of type string, and not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\", true);\r\n            return;\r\n        }\r\n        // Create cookie string.\r\n        this.authenticatedId = authenticatedUserId;\r\n        var authCookie = this.authenticatedId;\r\n        if (accountId) {\r\n            this.accountId = accountId;\r\n            authCookie = [this.authenticatedId, this.accountId].join(User.cookieSeparator);\r\n        }\r\n        if (storeInCookie) {\r\n            // Set the cookie. No expiration date because this is a session cookie (expires when browser closed).\r\n            // Encoding the cookie to handle unexpected unicode characters.\r\n            Util.setCookie(this._logger, User.authUserCookieName, encodeURI(authCookie), this.config.cookieDomain());\r\n        }\r\n    };\r\n    /**\r\n     * Clears the authenticated user id and the account id from the user context.\r\n     * @returns {}\r\n     */\r\n    User.prototype.clearAuthenticatedUserContext = function () {\r\n        this.authenticatedId = null;\r\n        this.accountId = null;\r\n        Util.deleteCookie(this._logger, User.authUserCookieName);\r\n    };\r\n    User.prototype.validateUserInput = function (id) {\r\n        // Validate:\r\n        // 1. Id is a non-empty string.\r\n        // 2. It does not contain special characters for cookies.\r\n        if (typeof id !== 'string' ||\r\n            !id ||\r\n            id.match(/,|;|=| |\\|/)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    User.cookieSeparator = '|';\r\n    User.userCookieName = 'ai_user';\r\n    User.authUserCookieName = 'ai_authUser';\r\n    return User;\r\n}());\r\nexport { User };\r\n//# sourceMappingURL=User.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nvar Location = /** @class */ (function () {\r\n    function Location() {\r\n    }\r\n    return Location;\r\n}());\r\nexport { Location };\r\n//# sourceMappingURL=Location.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { Util } from '@microsoft/applicationinsights-common';\r\nvar TelemetryTrace = /** @class */ (function () {\r\n    function TelemetryTrace(id, parentId, name) {\r\n        this.traceID = id || Util.newId();\r\n        this.parentID = parentId;\r\n        this.name = name;\r\n        if (window && window.location && window.location.pathname) {\r\n            this.name = window.location.pathname;\r\n        }\r\n    }\r\n    return TelemetryTrace;\r\n}());\r\nexport { TelemetryTrace };\r\n//# sourceMappingURL=TelemetryTrace.js.map","/**\r\n * PropertiesPlugin.ts\r\n * @copyright Microsoft 2018\r\n */\r\nimport { Session, _SessionManager } from './Context/Session';\r\nimport { Extensions, CtxTagKeys } from '@microsoft/applicationinsights-common';\r\nimport { Application } from './Context/Application';\r\nimport { Device } from './Context/Device';\r\nimport { Internal } from './Context/Internal';\r\nimport { User } from './Context/User';\r\nimport { Location } from './Context/Location';\r\nimport { TelemetryTrace } from './Context/TelemetryTrace';\r\nvar TelemetryContext = /** @class */ (function () {\r\n    function TelemetryContext(logger, defaultConfig) {\r\n        if (typeof window !== 'undefined') {\r\n            this.sessionManager = new _SessionManager(defaultConfig, logger);\r\n            this.application = new Application();\r\n            this.device = new Device();\r\n            this.internal = new Internal(defaultConfig);\r\n            this.location = new Location();\r\n            this.user = new User(defaultConfig, logger);\r\n            this.telemetryTrace = new TelemetryTrace();\r\n            this.session = new Session();\r\n        }\r\n        this.appId = function () { return null; };\r\n    }\r\n    TelemetryContext.prototype.applySessionContext = function (event) {\r\n        var sessionContext = this.session || this.sessionManager.automaticSession;\r\n        if (sessionContext) {\r\n            if (typeof sessionContext.id === \"string\") {\r\n                event.ext.app.sesId = sessionContext.id;\r\n            }\r\n        }\r\n        if (this.session) {\r\n            // If customer set session info, apply his context; otherwise apply context automatically generated\r\n            if (typeof this.session.id === \"string\") {\r\n                event.ext.app.sesId = this.session.id;\r\n            }\r\n            else {\r\n                event.ext.app.sesId = this.sessionManager.automaticSession.id;\r\n            }\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyOperatingSystemContxt = function (event) {\r\n        if (this.os && this.os.name) {\r\n            event.ext.os = this.os;\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyApplicationContext = function (event) {\r\n        if (this.application) {\r\n            if (typeof this.application.ver === \"string\") {\r\n                event.tags[CtxTagKeys.applicationVersion] = this.application.ver;\r\n            }\r\n            if (typeof this.application.build === \"string\") {\r\n                event.tags[CtxTagKeys.applicationBuild] = this.application.build;\r\n            }\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyDeviceContext = function (event) {\r\n        if (this.device) {\r\n            if (typeof this.device.id === \"string\") {\r\n                event.ext.device.localId = this.device.id;\r\n            }\r\n            if (typeof this.device.ip === \"string\") {\r\n                event.ext.device.ip = this.device.ip;\r\n            }\r\n            if (typeof this.device.model === \"string\") {\r\n                event.ext.device.model = this.device.model;\r\n            }\r\n            if (typeof this.device.deviceClass === \"string\") {\r\n                event.ext.device.deviceClass = this.device.deviceClass;\r\n            }\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyInternalContext = function (event) {\r\n        if (this.internal) {\r\n            if (typeof this.internal.agentVersion === \"string\") {\r\n                event.tags[CtxTagKeys.internalAgentVersion] = this.internal.agentVersion; // not mapped in CS 4.0\r\n            }\r\n            if (typeof this.internal.sdkVersion === \"string\") {\r\n                event.tags[CtxTagKeys.internalSdkVersion] = this.internal.sdkVersion;\r\n            }\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyLocationContext = function (event) {\r\n        if (this.location) {\r\n            if (typeof this.location.ip === \"string\") {\r\n                event.tags[CtxTagKeys.locationIp] = this.location.ip;\r\n            }\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyOperationContext = function (event) {\r\n        if (this.telemetryTrace) {\r\n            var trace = event.ext.trace || { traceID: undefined, parentID: undefined };\r\n            if (typeof this.telemetryTrace.traceID === \"string\") {\r\n                trace.traceID = this.telemetryTrace.traceID;\r\n            }\r\n            if (typeof this.telemetryTrace.name === \"string\") {\r\n                trace.name = this.telemetryTrace.name;\r\n            }\r\n            if (typeof this.telemetryTrace.parentID === \"string\") {\r\n                trace.parentID = this.telemetryTrace.parentID;\r\n            }\r\n            event.ext.trace = trace;\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyWebContext = function (event) {\r\n        if (this.web) {\r\n            event.ext.web = event.ext.web || {};\r\n            event.ext.web = this.web;\r\n        }\r\n    };\r\n    TelemetryContext.prototype.applyUserContext = function (event) {\r\n        if (this.user) {\r\n            if (!event.tags) {\r\n                event.tags = [];\r\n            }\r\n            // stays in tags\r\n            if (typeof this.user.accountId === \"string\") {\r\n                var item = {};\r\n                event.tags[CtxTagKeys.userAccountId] = this.user.accountId;\r\n            }\r\n            // CS 4.0\r\n            if (typeof this.user.id === \"string\") {\r\n                event.ext.user.id = this.user.id;\r\n            }\r\n            if (typeof this.user.authenticatedId === \"string\") {\r\n                event.ext.user.authId = this.user.authenticatedId;\r\n            }\r\n        }\r\n    };\r\n    TelemetryContext.prototype.cleanUp = function (event) {\r\n        if (event.ext[Extensions.DeviceExt] && Object.keys(event.ext[Extensions.DeviceExt]).length === 0) {\r\n            delete event.ext[Extensions.DeviceExt];\r\n        }\r\n        if (event.ext[Extensions.UserExt] && Object.keys(event.ext[Extensions.UserExt]).length === 0) {\r\n            delete event.ext[Extensions.UserExt];\r\n        }\r\n        if (event.ext[Extensions.WebExt] && Object.keys(event.ext[Extensions.WebExt]).length === 0) {\r\n            delete event.ext[Extensions.WebExt];\r\n        }\r\n        if (event.ext[Extensions.OSExt] && Object.keys(event.ext[Extensions.OSExt]).length === 0) {\r\n            delete event.ext[Extensions.OSExt];\r\n        }\r\n        if (event.ext[Extensions.AppExt] && Object.keys(event.ext[Extensions.AppExt]).length === 0) {\r\n            delete event.ext[Extensions.AppExt];\r\n        }\r\n        if (event.ext[Extensions.TraceExt] && Object.keys(event.ext[Extensions.TraceExt]).length === 0) {\r\n            delete event.ext[Extensions.TraceExt];\r\n        }\r\n    };\r\n    return TelemetryContext;\r\n}());\r\nexport { TelemetryContext };\r\n//# sourceMappingURL=TelemetryContext.js.map","/**\r\n * PropertiesPlugin.ts\r\n * @copyright Microsoft 2018\r\n */\r\nimport { CoreUtils } from '@microsoft/applicationinsights-core-js';\r\nimport { TelemetryContext } from './TelemetryContext';\r\nimport { PageView, ConfigurationManager, BreezeChannelIdentifier, PropertiesPluginIdentifier, Extensions, Util } from '@microsoft/applicationinsights-common';\r\nvar PropertiesPlugin = /** @class */ (function () {\r\n    function PropertiesPlugin() {\r\n        this.priority = 110;\r\n        this.identifier = PropertiesPluginIdentifier;\r\n    }\r\n    PropertiesPlugin.getDefaultConfig = function () {\r\n        var defaultConfig = {\r\n            instrumentationKey: function () { return undefined; },\r\n            accountId: function () { return null; },\r\n            sessionRenewalMs: function () { return 30 * 60 * 1000; },\r\n            samplingPercentage: function () { return 100; },\r\n            sessionExpirationMs: function () { return 24 * 60 * 60 * 1000; },\r\n            cookieDomain: function () { return null; },\r\n            sdkExtension: function () { return null; },\r\n            isBrowserLinkTrackingEnabled: function () { return false; },\r\n            appId: function () { return null; },\r\n            namePrefix: function () { return undefined; }\r\n        };\r\n        return defaultConfig;\r\n    };\r\n    PropertiesPlugin.prototype.initialize = function (config, core, extensions) {\r\n        var _this = this;\r\n        var defaultConfig = PropertiesPlugin.getDefaultConfig();\r\n        this._extensionConfig = this._extensionConfig || PropertiesPlugin.getDefaultConfig();\r\n        var _loop_1 = function (field) {\r\n            this_1._extensionConfig[field] = function () { return ConfigurationManager.getConfig(config, field, _this.identifier, defaultConfig[field]()); };\r\n        };\r\n        var this_1 = this;\r\n        for (var field in defaultConfig) {\r\n            _loop_1(field);\r\n        }\r\n        this._logger = core.logger;\r\n        this.context = new TelemetryContext(core.logger, this._extensionConfig);\r\n        this._breezeChannel = Util.getExtension(extensions, BreezeChannelIdentifier);\r\n        this.context.appId = function () { return _this._breezeChannel ? _this._breezeChannel[\"_appId\"] : null; };\r\n    };\r\n    /**\r\n     * Add Part A fields to the event\r\n     * @param event The event that needs to be processed\r\n     */\r\n    PropertiesPlugin.prototype.processTelemetry = function (event) {\r\n        if (CoreUtils.isNullOrUndefined(event)) {\r\n            // TODO(barustum): throw an internal event once we have support for internal logging\r\n        }\r\n        else {\r\n            // If the envelope is PageView, reset the internal message count so that we can send internal telemetry for the new page.\r\n            if (event.name === PageView.envelopeType) {\r\n                this._logger.resetInternalMessageCount();\r\n            }\r\n            if (this.context.session) {\r\n                // If customer did not provide custom session id update the session manager\r\n                if (typeof this.context.session.id !== \"string\") {\r\n                    this.context.sessionManager.update();\r\n                }\r\n            }\r\n            this._processTelemetryInternal(event);\r\n            if (!CoreUtils.isNullOrUndefined(this._nextPlugin)) {\r\n                this._nextPlugin.processTelemetry(event);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the next plugin that comes after this plugin\r\n     * @param nextPlugin The next plugin\r\n     */\r\n    PropertiesPlugin.prototype.setNextPlugin = function (nextPlugin) {\r\n        this._nextPlugin = nextPlugin;\r\n    };\r\n    PropertiesPlugin.prototype._processTelemetryInternal = function (event) {\r\n        // set part A  fields\r\n        if (!event.tags) {\r\n            event.tags = [];\r\n        }\r\n        if (!event.ext) {\r\n            event.ext = {};\r\n        }\r\n        event.ext[Extensions.DeviceExt] = event.ext[Extensions.DeviceExt] || {};\r\n        event.ext[Extensions.WebExt] = event.ext[Extensions.WebExt] || {};\r\n        event.ext[Extensions.UserExt] = event.ext[Extensions.UserExt] || {};\r\n        event.ext[Extensions.OSExt] = event.ext[Extensions.OSExt] || {};\r\n        event.ext[Extensions.AppExt] = event.ext[Extensions.AppExt] || {};\r\n        event.ext[Extensions.TraceExt] = event.ext[Extensions.TraceExt] || {};\r\n        this.context.applySessionContext(event);\r\n        this.context.applyApplicationContext(event);\r\n        this.context.applyDeviceContext(event);\r\n        this.context.applyOperationContext(event);\r\n        this.context.applyUserContext(event);\r\n        this.context.applyOperatingSystemContxt(event);\r\n        this.context.applyWebContext(event);\r\n        this.context.applyLocationContext(event); // legacy tags\r\n        this.context.applyInternalContext(event); // legacy tags\r\n        this.context.cleanUp(event);\r\n    };\r\n    return PropertiesPlugin;\r\n}());\r\nexport default PropertiesPlugin;\r\n//# sourceMappingURL=PropertiesPlugin.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { DataSanitizer, UrlHelper, DateTimeUtils } from '@microsoft/applicationinsights-common';\r\nvar XHRMonitoringState = /** @class */ (function () {\r\n    function XHRMonitoringState() {\r\n        this.openDone = false;\r\n        this.setRequestHeaderDone = false;\r\n        this.sendDone = false;\r\n        this.abortDone = false;\r\n        //<summary>True, if onreadyStateChangeCallback function attached to xhr, otherwise false</summary>\r\n        this.onreadystatechangeCallbackAttached = false;\r\n    }\r\n    return XHRMonitoringState;\r\n}());\r\nexport { XHRMonitoringState };\r\nvar ajaxRecord = /** @class */ (function () {\r\n    function ajaxRecord(id, logger) {\r\n        this.completed = false;\r\n        this.requestHeadersSize = null;\r\n        this.ttfb = null;\r\n        this.responseReceivingDuration = null;\r\n        this.callbackDuration = null;\r\n        this.ajaxTotalDuration = null;\r\n        this.aborted = null;\r\n        this.pageUrl = null;\r\n        this.requestUrl = null;\r\n        this.requestSize = 0;\r\n        this.method = null;\r\n        ///<summary>Returns the HTTP status code.</summary>\r\n        this.status = null;\r\n        //<summary>The timestamp when open method was invoked</summary>\r\n        this.requestSentTime = null;\r\n        //<summary>The timestamps when first byte was received</summary>\r\n        this.responseStartedTime = null;\r\n        //<summary>The timestamp when last byte was received</summary>\r\n        this.responseFinishedTime = null;\r\n        //<summary>The timestamp when onreadystatechange callback in readyState 4 finished</summary>\r\n        this.callbackFinishedTime = null;\r\n        //<summary>The timestamp at which ajax was ended</summary>\r\n        this.endTime = null;\r\n        //<summary>The original xhr onreadystatechange event</summary>\r\n        this.originalOnreadystatechage = null;\r\n        this.xhrMonitoringState = new XHRMonitoringState();\r\n        //<summary>Determines whether or not JavaScript exception occured in xhr.onreadystatechange code. 1 if occured, otherwise 0.</summary>\r\n        this.clientFailure = 0;\r\n        this.CalculateMetrics = function () {\r\n            var self = this;\r\n            // round to 3 decimal points\r\n            self.ajaxTotalDuration = Math.round(DateTimeUtils.GetDuration(self.requestSentTime, self.responseFinishedTime) * 1000) / 1000;\r\n        };\r\n        this.id = id;\r\n        this._logger = logger;\r\n    }\r\n    ajaxRecord.prototype.getAbsoluteUrl = function () {\r\n        return this.requestUrl ? UrlHelper.getAbsoluteUrl(this.requestUrl) : null;\r\n    };\r\n    ajaxRecord.prototype.getPathName = function () {\r\n        return this.requestUrl ? DataSanitizer.sanitizeUrl(this._logger, UrlHelper.getCompleteUrl(this.method, this.requestUrl)) : null;\r\n    };\r\n    return ajaxRecord;\r\n}());\r\nexport { ajaxRecord };\r\n;\r\n//# sourceMappingURL=ajaxRecord.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { CoreUtils } from '@microsoft/applicationinsights-core-js';\r\nvar stringUtils = /** @class */ (function () {\r\n    function stringUtils() {\r\n    }\r\n    stringUtils.GetLength = function (strObject) {\r\n        var res = 0;\r\n        if (!CoreUtils.isNullOrUndefined(strObject)) {\r\n            var stringified = \"\";\r\n            try {\r\n                stringified = strObject.toString();\r\n            }\r\n            catch (ex) {\r\n                // some troubles with complex object\r\n            }\r\n            res = stringified.length;\r\n            res = isNaN(res) ? 0 : res;\r\n        }\r\n        return res;\r\n    };\r\n    return stringUtils;\r\n}());\r\nexport { stringUtils };\r\nvar EventHelper = /** @class */ (function () {\r\n    function EventHelper() {\r\n    }\r\n    ///<summary>Binds the specified function to an event, so that the function gets called whenever the event fires on the object</summary>\r\n    ///<param name=\"obj\">Object to which </param>\r\n    ///<param name=\"eventNameWithoutOn\">String that specifies any of the standard DHTML Events without \"on\" prefix</param>\r\n    ///<param name=\"handlerRef\">Pointer that specifies the function to call when event fires</param>\r\n    ///<returns>True if the function was bound successfully to the event, otherwise false</returns>\r\n    EventHelper.AttachEvent = function (obj, eventNameWithoutOn, handlerRef) {\r\n        var result = false;\r\n        if (!CoreUtils.isNullOrUndefined(obj)) {\r\n            if (!CoreUtils.isNullOrUndefined(obj.attachEvent)) {\r\n                // IE before version 9                    \r\n                obj.attachEvent(\"on\" + eventNameWithoutOn, handlerRef);\r\n                result = true;\r\n            }\r\n            else {\r\n                if (!CoreUtils.isNullOrUndefined(obj.addEventListener)) {\r\n                    // all browsers except IE before version 9\r\n                    obj.addEventListener(eventNameWithoutOn, handlerRef, false);\r\n                    result = true;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    EventHelper.DetachEvent = function (obj, eventNameWithoutOn, handlerRef) {\r\n        if (!CoreUtils.isNullOrUndefined(obj)) {\r\n            if (!CoreUtils.isNullOrUndefined(obj.detachEvent)) {\r\n                obj.detachEvent(\"on\" + eventNameWithoutOn, handlerRef);\r\n            }\r\n            else {\r\n                if (!CoreUtils.isNullOrUndefined(obj.removeEventListener)) {\r\n                    obj.removeEventListener(eventNameWithoutOn, handlerRef, false);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return EventHelper;\r\n}());\r\nexport { EventHelper };\r\n//# sourceMappingURL=ajaxUtils.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { RequestHeaders, Util, CorrelationIdHelper, TelemetryItemCreator, RemoteDependencyData, DateTimeUtils, DisabledPropertyName, ConfigurationManager, PropertiesPluginIdentifier } from '@microsoft/applicationinsights-common';\r\nimport { CoreUtils, LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\r\nimport { ajaxRecord } from './ajaxRecord';\r\nimport { EventHelper } from './ajaxUtils';\r\nvar AjaxMonitor = /** @class */ (function () {\r\n    function AjaxMonitor() {\r\n        this._trackAjaxAttempts = 0;\r\n        this.identifier = AjaxMonitor.identifier;\r\n        this.priority = 120;\r\n        this.currentWindowHost = window && window.location && window.location.host && window.location.host.toLowerCase();\r\n        this.initialized = false;\r\n        this._fetchInitialized = false;\r\n    }\r\n    ///<summary>Verifies that particalar instance of XMLHttpRequest needs to be monitored</summary>\r\n    ///<param name=\"excludeAjaxDataValidation\">Optional parameter. True if ajaxData must be excluded from verification</param>\r\n    ///<returns type=\"bool\">True if instance needs to be monitored, otherwise false</returns>\r\n    AjaxMonitor.prototype.isMonitoredInstance = function (xhr, excludeAjaxDataValidation, request, init) {\r\n        var disabledProperty = false;\r\n        var ajaxValidation = true;\r\n        var initialized = false;\r\n        if (typeof request !== 'undefined') {\r\n            initialized = this._fetchInitialized;\r\n            // Look for DisabledPropertyName in either Request or RequestInit\r\n            disabledProperty = (typeof request === 'object' ? request[DisabledPropertyName] === true : false) ||\r\n                (init ? init[DisabledPropertyName] === true : false);\r\n        }\r\n        else if (typeof xhr !== 'undefined') {\r\n            initialized = this.initialized;\r\n            disabledProperty = xhr[DisabledPropertyName] === true;\r\n            ajaxValidation = excludeAjaxDataValidation === true || !CoreUtils.isNullOrUndefined(xhr.ajaxData);\r\n        }\r\n        // checking to see that all interested functions on xhr were instrumented\r\n        return initialized\r\n            // checking on ajaxData to see that it was not removed in user code\r\n            && ajaxValidation\r\n            // check that this instance is not not used by ajax call performed inside client side monitoring to send data to collector\r\n            && !disabledProperty;\r\n    };\r\n    ///<summary>Determines whether ajax monitoring can be enabled on this document</summary>\r\n    ///<returns>True if Ajax monitoring is supported on this page, otherwise false</returns>\r\n    AjaxMonitor.prototype.supportsAjaxMonitoring = function () {\r\n        var result = true;\r\n        if (CoreUtils.isNullOrUndefined(XMLHttpRequest) ||\r\n            CoreUtils.isNullOrUndefined(XMLHttpRequest.prototype) ||\r\n            CoreUtils.isNullOrUndefined(XMLHttpRequest.prototype.open) ||\r\n            CoreUtils.isNullOrUndefined(XMLHttpRequest.prototype.send) ||\r\n            CoreUtils.isNullOrUndefined(XMLHttpRequest.prototype.abort)) {\r\n            result = false;\r\n        }\r\n        // disable in IE8 or older (https://www.w3schools.com/jsref/jsref_trim_string.asp)\r\n        try {\r\n            \" a \".trim();\r\n        }\r\n        catch (ex) {\r\n            result = false;\r\n        }\r\n        return result;\r\n    };\r\n    AjaxMonitor.prototype.instrumentOpen = function () {\r\n        var originalOpen = XMLHttpRequest.prototype.open;\r\n        var ajaxMonitorInstance = this;\r\n        XMLHttpRequest.prototype.open = function (method, url, async) {\r\n            try {\r\n                if (ajaxMonitorInstance.isMonitoredInstance(this, true) &&\r\n                    (!this.ajaxData ||\r\n                        !this.ajaxData.xhrMonitoringState.openDone)) {\r\n                    ajaxMonitorInstance.openHandler(this, method, url, async);\r\n                }\r\n            }\r\n            catch (e) {\r\n                ajaxMonitorInstance._core.logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedMonitorAjaxOpen, \"Failed to monitor XMLHttpRequest.open, monitoring data for this ajax call may be incorrect.\", {\r\n                    ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n                    exception: Util.dump(e)\r\n                });\r\n            }\r\n            return originalOpen.apply(this, arguments);\r\n        };\r\n    };\r\n    AjaxMonitor.prototype.openHandler = function (xhr, method, url, async) {\r\n        var id;\r\n        if (this._context && this._context.telemetryTrace && this._context.telemetryTrace.traceID) {\r\n            // this format corresponds with activity logic on server-side and is required for the correct correlation\r\n            id = \"|\" + this._context.telemetryTrace.traceID + \".\" + Util.newId();\r\n        }\r\n        else {\r\n            id = Util.newId();\r\n        }\r\n        var ajaxData = new ajaxRecord(id, this._core.logger);\r\n        ajaxData.method = method;\r\n        ajaxData.requestUrl = url;\r\n        ajaxData.xhrMonitoringState.openDone = true;\r\n        xhr.ajaxData = ajaxData;\r\n        this.attachToOnReadyStateChange(xhr);\r\n    };\r\n    AjaxMonitor.getFailedAjaxDiagnosticsMessage = function (xhr) {\r\n        var result = \"\";\r\n        try {\r\n            if (!CoreUtils.isNullOrUndefined(xhr) &&\r\n                !CoreUtils.isNullOrUndefined(xhr.ajaxData) &&\r\n                !CoreUtils.isNullOrUndefined(xhr.ajaxData.requestUrl)) {\r\n                result += \"(url: '\" + xhr.ajaxData.requestUrl + \"')\";\r\n            }\r\n        }\r\n        catch (e) { }\r\n        return result;\r\n    };\r\n    AjaxMonitor.prototype.instrumentSend = function () {\r\n        var originalSend = XMLHttpRequest.prototype.send;\r\n        var ajaxMonitorInstance = this;\r\n        XMLHttpRequest.prototype.send = function (content) {\r\n            try {\r\n                if (ajaxMonitorInstance.isMonitoredInstance(this) && !this.ajaxData.xhrMonitoringState.sendDone) {\r\n                    ajaxMonitorInstance.sendHandler(this, content);\r\n                }\r\n            }\r\n            catch (e) {\r\n                ajaxMonitorInstance._core.logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedMonitorAjaxSend, \"Failed to monitor XMLHttpRequest, monitoring data for this ajax call may be incorrect.\", {\r\n                    ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n                    exception: Util.dump(e)\r\n                });\r\n            }\r\n            return originalSend.apply(this, arguments);\r\n        };\r\n    };\r\n    AjaxMonitor.prototype.sendHandler = function (xhr, content) {\r\n        xhr.ajaxData.requestSentTime = DateTimeUtils.Now();\r\n        xhr = this.includeCorrelationHeaders(xhr.ajaxData, undefined, undefined, xhr);\r\n        xhr.ajaxData.xhrMonitoringState.sendDone = true;\r\n    };\r\n    AjaxMonitor.prototype.instrumentAbort = function () {\r\n        var originalAbort = XMLHttpRequest.prototype.abort;\r\n        var ajaxMonitorInstance = this;\r\n        XMLHttpRequest.prototype.abort = function () {\r\n            try {\r\n                if (ajaxMonitorInstance.isMonitoredInstance(this) && !this.ajaxData.xhrMonitoringState.abortDone) {\r\n                    this.ajaxData.aborted = 1;\r\n                    this.ajaxData.xhrMonitoringState.abortDone = true;\r\n                }\r\n            }\r\n            catch (e) {\r\n                ajaxMonitorInstance._core.logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedMonitorAjaxAbort, \"Failed to monitor XMLHttpRequest.abort, monitoring data for this ajax call may be incorrect.\", {\r\n                    ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(this),\r\n                    exception: Util.dump(e)\r\n                });\r\n            }\r\n            return originalAbort.apply(this, arguments);\r\n        };\r\n    };\r\n    AjaxMonitor.prototype.attachToOnReadyStateChange = function (xhr) {\r\n        var ajaxMonitorInstance = this;\r\n        xhr.ajaxData.xhrMonitoringState.onreadystatechangeCallbackAttached = EventHelper.AttachEvent(xhr, \"readystatechange\", function () {\r\n            try {\r\n                if (ajaxMonitorInstance.isMonitoredInstance(xhr)) {\r\n                    if (xhr.readyState === 4) {\r\n                        ajaxMonitorInstance.onAjaxComplete(xhr);\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                var exceptionText = Util.dump(e);\r\n                // ignore messages with c00c023f, as this a known IE9 XHR abort issue\r\n                if (!exceptionText || exceptionText.toLowerCase().indexOf(\"c00c023f\") == -1) {\r\n                    ajaxMonitorInstance._core.logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedMonitorAjaxRSC, \"Failed to monitor XMLHttpRequest 'readystatechange' event handler, monitoring data for this ajax call may be incorrect.\", {\r\n                        ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(xhr),\r\n                        exception: Util.dump(e)\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    };\r\n    AjaxMonitor.prototype.onAjaxComplete = function (xhr) {\r\n        xhr.ajaxData.responseFinishedTime = DateTimeUtils.Now();\r\n        xhr.ajaxData.status = xhr.status;\r\n        xhr.ajaxData.CalculateMetrics();\r\n        if (xhr.ajaxData.ajaxTotalDuration < 0) {\r\n            this._core.logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedMonitorAjaxDur, \"Failed to calculate the duration of the ajax call, monitoring data for this ajax call won't be sent.\", {\r\n                ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(xhr),\r\n                requestSentTime: xhr.ajaxData.requestSentTime,\r\n                responseFinishedTime: xhr.ajaxData.responseFinishedTime\r\n            });\r\n        }\r\n        else {\r\n            var dependency = {\r\n                id: xhr.ajaxData.id,\r\n                target: xhr.ajaxData.getAbsoluteUrl(),\r\n                name: xhr.ajaxData.getPathName(),\r\n                type: \"Ajax\",\r\n                duration: xhr.ajaxData.ajaxTotalDuration,\r\n                success: (+(xhr.ajaxData.status)) >= 200 && (+(xhr.ajaxData.status)) < 400,\r\n                responseCode: +xhr.ajaxData.status,\r\n                method: xhr.ajaxData.method\r\n            };\r\n            // enrich dependency target with correlation context from the server\r\n            var correlationContext = this.getAjaxCorrelationContext(xhr);\r\n            if (correlationContext) {\r\n                dependency.correlationContext = /* dependency.target + \" | \" + */ correlationContext;\r\n            }\r\n            this.trackDependencyDataInternal(dependency);\r\n            xhr.ajaxData = null;\r\n        }\r\n    };\r\n    AjaxMonitor.prototype.getAjaxCorrelationContext = function (xhr) {\r\n        try {\r\n            var responseHeadersString = xhr.getAllResponseHeaders();\r\n            if (responseHeadersString !== null) {\r\n                var index = responseHeadersString.toLowerCase().indexOf(RequestHeaders.requestContextHeaderLowerCase);\r\n                if (index !== -1) {\r\n                    var responseHeader = xhr.getResponseHeader(RequestHeaders.requestContextHeader);\r\n                    return CorrelationIdHelper.getCorrelationContext(responseHeader);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._core.logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedMonitorAjaxGetCorrelationHeader, \"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.\", {\r\n                ajaxDiagnosticsMessage: AjaxMonitor.getFailedAjaxDiagnosticsMessage(xhr),\r\n                exception: Util.dump(e)\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Logs dependency call\r\n     * @param dependencyData dependency data object\r\n     */\r\n    AjaxMonitor.prototype.trackDependencyDataInternal = function (dependency, properties, systemProperties) {\r\n        if (this._config.maxAjaxCallsPerView === -1 || this._trackAjaxAttempts < this._config.maxAjaxCallsPerView) {\r\n            var item = TelemetryItemCreator.create(dependency, RemoteDependencyData.dataType, RemoteDependencyData.envelopeType, this._core.logger, properties, systemProperties);\r\n            this._core.track(item);\r\n        }\r\n        else if (this._trackAjaxAttempts === this._config.maxAjaxCallsPerView) {\r\n            this._core.logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.MaxAjaxPerPVExceeded, \"Maximum ajax per page view limit reached, ajax monitoring is paused until the next trackPageView(). In order to increase the limit set the maxAjaxCallsPerView configuration parameter.\", true);\r\n        }\r\n        ++this._trackAjaxAttempts;\r\n    };\r\n    AjaxMonitor.prototype.trackDependencyData = function (dependency, properties) {\r\n        this.trackDependencyDataInternal(dependency, properties);\r\n    };\r\n    AjaxMonitor.prototype.processTelemetry = function (item) {\r\n        if (this._nextPlugin && this._nextPlugin.processTelemetry) {\r\n            this._nextPlugin.processTelemetry(item);\r\n        }\r\n    };\r\n    AjaxMonitor.prototype.setNextPlugin = function (next) {\r\n        if (next) {\r\n            this._nextPlugin = next;\r\n        }\r\n    };\r\n    // Fetch Stuff\r\n    AjaxMonitor.prototype.instrumentFetch = function () {\r\n        if (!this.supportsFetch() || this._fetchInitialized) {\r\n            return;\r\n        }\r\n        var originalFetch = window.fetch;\r\n        var fetchMonitorInstance = this;\r\n        window.fetch = function fetch(input, init) {\r\n            var fetchData;\r\n            if (fetchMonitorInstance.isFetchInstrumented(input) && fetchMonitorInstance.isMonitoredInstance(undefined, undefined, input, init)) {\r\n                try {\r\n                    fetchData = fetchMonitorInstance.createFetchRecord(input, init);\r\n                    init = fetchMonitorInstance.includeCorrelationHeaders(fetchData, input, init);\r\n                }\r\n                catch (e) {\r\n                    fetchMonitorInstance._core.logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedMonitorAjaxOpen, \"Failed to monitor Window.fetch, monitoring data for this fetch call may be incorrect.\", {\r\n                        ajaxDiagnosticsMessage: this.getFailedFetchDiagnosticsMessage(input),\r\n                        exception: Util.dump(e)\r\n                    });\r\n                }\r\n            }\r\n            return originalFetch(input, init)\r\n                .then(function (response) {\r\n                fetchMonitorInstance.onFetchComplete(response, fetchData);\r\n                return response;\r\n            })\r\n                .catch(function (reason) {\r\n                fetchMonitorInstance.onFetchFailed(input, fetchData, reason);\r\n                throw reason;\r\n            });\r\n        };\r\n        this._fetchInitialized = true;\r\n    };\r\n    AjaxMonitor.prototype.isFetchInstrumented = function (input) {\r\n        return this._fetchInitialized && input[DisabledPropertyName] !== true;\r\n    };\r\n    AjaxMonitor.prototype.supportsFetch = function () {\r\n        var result = true;\r\n        if (!window || CoreUtils.isNullOrUndefined(window.Request) ||\r\n            CoreUtils.isNullOrUndefined(window.Request.prototype) ||\r\n            CoreUtils.isNullOrUndefined(window.fetch)) {\r\n            result = false;\r\n        }\r\n        return result;\r\n    };\r\n    AjaxMonitor.prototype.createFetchRecord = function (input, init) {\r\n        var id;\r\n        if (this._context && this._context.telemetryTrace && this._context.telemetryTrace.traceID) {\r\n            // this format corresponds with activity logic on server-side and is required for the correct correlation\r\n            id = \"|\" + this._context.telemetryTrace.traceID + \".\" + Util.newId();\r\n        }\r\n        else {\r\n            id = Util.newId();\r\n        }\r\n        var ajaxData = new ajaxRecord(id, this._core.logger);\r\n        ajaxData.requestSentTime = DateTimeUtils.Now();\r\n        if (input instanceof Request) {\r\n            ajaxData.requestUrl = input ? input.url : \"\";\r\n        }\r\n        else {\r\n            ajaxData.requestUrl = input;\r\n        }\r\n        if (init && init.method) {\r\n            ajaxData.method = init.method;\r\n        }\r\n        else if (input && input instanceof Request) {\r\n            ajaxData.method = input.method;\r\n        }\r\n        else {\r\n            ajaxData.method = \"GET\";\r\n        }\r\n        return ajaxData;\r\n    };\r\n    AjaxMonitor.prototype.includeCorrelationHeaders = function (ajaxData, input, init, xhr) {\r\n        if (input) {\r\n            if (CorrelationIdHelper.canIncludeCorrelationHeader(this._config, ajaxData.getAbsoluteUrl(), this.currentWindowHost)) {\r\n                if (!init) {\r\n                    init = {};\r\n                }\r\n                // init headers override original request headers\r\n                // so, if they exist use only them, otherwise use request's because they should have been applied in the first place\r\n                // not using original request headers will result in them being lost\r\n                init.headers = new Headers(init.headers || (input instanceof Request ? (input.headers || {}) : {}));\r\n                init.headers.set(RequestHeaders.requestIdHeader, ajaxData.id);\r\n                var appId_1 = this._config.appId || this._context.appId();\r\n                if (appId_1) {\r\n                    init.headers.set(RequestHeaders.requestContextHeader, RequestHeaders.requestContextAppIdFormat + appId_1);\r\n                }\r\n                return init;\r\n            }\r\n            return init;\r\n        }\r\n        else if (xhr) {\r\n            if (this.currentWindowHost && CorrelationIdHelper.canIncludeCorrelationHeader(this._config, xhr.ajaxData.getAbsoluteUrl(), this.currentWindowHost)) {\r\n                xhr.setRequestHeader(RequestHeaders.requestIdHeader, xhr.ajaxData.id);\r\n                var appId = this._config.appId || this._context.appId();\r\n                if (appId) {\r\n                    xhr.setRequestHeader(RequestHeaders.requestContextHeader, RequestHeaders.requestContextAppIdFormat + appId);\r\n                }\r\n            }\r\n            return xhr;\r\n        }\r\n        return undefined;\r\n    };\r\n    AjaxMonitor.prototype.getFailedFetchDiagnosticsMessage = function (input) {\r\n        var result = \"\";\r\n        try {\r\n            if (!CoreUtils.isNullOrUndefined(input)) {\r\n                if (typeof (input) === \"string\") {\r\n                    result += \"(url: '\" + input + \"')\";\r\n                }\r\n                else {\r\n                    result += \"(url: '\" + input.url + \"')\";\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._core.logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedMonitorAjaxOpen, \"Failed to grab failed fetch diagnostics message\", { exception: Util.dump(e) });\r\n        }\r\n        return result;\r\n    };\r\n    AjaxMonitor.prototype.onFetchComplete = function (response, ajaxData) {\r\n        if (!ajaxData) {\r\n            return;\r\n        }\r\n        try {\r\n            ajaxData.responseFinishedTime = DateTimeUtils.Now();\r\n            ajaxData.CalculateMetrics();\r\n            if (ajaxData.ajaxTotalDuration < 0) {\r\n                this._core.logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedMonitorAjaxDur, \"Failed to calculate the duration of the fetch call, monitoring data for this fetch call won't be sent.\", {\r\n                    fetchDiagnosticsMessage: this.getFailedFetchDiagnosticsMessage(response),\r\n                    requestSentTime: ajaxData.requestSentTime,\r\n                    responseFinishedTime: ajaxData.responseFinishedTime\r\n                });\r\n            }\r\n            else {\r\n                var dependency = {\r\n                    id: ajaxData.id,\r\n                    target: ajaxData.getAbsoluteUrl(),\r\n                    name: ajaxData.getPathName(),\r\n                    type: \"Fetch\",\r\n                    duration: ajaxData.ajaxTotalDuration,\r\n                    success: response.status >= 200 && response.status < 400,\r\n                    responseCode: response.status,\r\n                    properties: { HttpMethod: ajaxData.method }\r\n                };\r\n                // enrich dependency target with correlation context from the server\r\n                var correlationContext = this.getFetchCorrelationContext(response);\r\n                if (correlationContext) {\r\n                    dependency.correlationContext = correlationContext;\r\n                }\r\n                this.trackDependencyDataInternal(dependency);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._core.logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedMonitorAjaxGetCorrelationHeader, \"Failed to calculate the duration of the fetch call, monitoring data for this fetch call won't be sent.\", {\r\n                fetchDiagnosticsMessage: this.getFailedFetchDiagnosticsMessage(response),\r\n                exception: Util.dump(e)\r\n            });\r\n        }\r\n    };\r\n    AjaxMonitor.prototype.onFetchFailed = function (input, ajaxData, reason) {\r\n        if (!ajaxData) {\r\n            return;\r\n        }\r\n        try {\r\n            ajaxData.responseFinishedTime = DateTimeUtils.Now();\r\n            ajaxData.CalculateMetrics();\r\n            if (ajaxData.ajaxTotalDuration < 0) {\r\n                this._core.logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedMonitorAjaxDur, \"Failed to calculate the duration of the failed fetch call, monitoring data for this fetch call won't be sent.\", {\r\n                    fetchDiagnosticsMessage: this.getFailedFetchDiagnosticsMessage(input),\r\n                    requestSentTime: ajaxData.requestSentTime,\r\n                    responseFinishedTime: ajaxData.responseFinishedTime\r\n                });\r\n            }\r\n            else {\r\n                var dependency = {\r\n                    id: ajaxData.id,\r\n                    target: ajaxData.getAbsoluteUrl(),\r\n                    name: ajaxData.getPathName(),\r\n                    type: \"Fetch\",\r\n                    duration: ajaxData.ajaxTotalDuration,\r\n                    success: false,\r\n                    responseCode: 0,\r\n                    properties: { HttpMethod: ajaxData.method }\r\n                };\r\n                this.trackDependencyDataInternal(dependency, { error: reason.message });\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._core.logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedMonitorAjaxGetCorrelationHeader, \"Failed to calculate the duration of the failed fetch call, monitoring data for this fetch call won't be sent.\", {\r\n                fetchDiagnosticsMessage: this.getFailedFetchDiagnosticsMessage(input),\r\n                exception: Util.dump(e)\r\n            });\r\n        }\r\n    };\r\n    AjaxMonitor.prototype.getFetchCorrelationContext = function (response) {\r\n        try {\r\n            var responseHeader = response.headers.get(RequestHeaders.requestContextHeader);\r\n            return CorrelationIdHelper.getCorrelationContext(responseHeader);\r\n        }\r\n        catch (e) {\r\n            this._core.logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.FailedMonitorAjaxGetCorrelationHeader, \"Failed to get Request-Context correlation header as it may be not included in the response or not accessible.\", {\r\n                fetchDiagnosticsMessage: this.getFailedFetchDiagnosticsMessage(response),\r\n                exception: Util.dump(e)\r\n            });\r\n        }\r\n    };\r\n    AjaxMonitor.prototype.instrumentXhr = function () {\r\n        if (this.supportsAjaxMonitoring() && !this.initialized) {\r\n            this.instrumentOpen();\r\n            this.instrumentSend();\r\n            this.instrumentAbort();\r\n            this.initialized = true;\r\n        }\r\n    };\r\n    AjaxMonitor.getDefaultConfig = function () {\r\n        var config = {\r\n            maxAjaxCallsPerView: 500,\r\n            disableAjaxTracking: false,\r\n            disableFetchTracking: true,\r\n            disableCorrelationHeaders: false,\r\n            correlationHeaderExcludedDomains: [\r\n                \"*.blob.core.windows.net\",\r\n                \"*.blob.core.chinacloudapi.cn\",\r\n                \"*.blob.core.cloudapi.de\",\r\n                \"*.blob.core.usgovcloudapi.net\"\r\n            ],\r\n            correlationHeaderDomains: undefined,\r\n            appId: undefined,\r\n            enableCorsCorrelation: false\r\n        };\r\n        return config;\r\n    };\r\n    AjaxMonitor.getEmptyConfig = function () {\r\n        return {\r\n            maxAjaxCallsPerView: undefined,\r\n            disableAjaxTracking: undefined,\r\n            disableFetchTracking: undefined,\r\n            disableCorrelationHeaders: undefined,\r\n            correlationHeaderExcludedDomains: undefined,\r\n            appId: undefined,\r\n            enableCorsCorrelation: undefined,\r\n            correlationHeaderDomains: undefined,\r\n        };\r\n    };\r\n    AjaxMonitor.prototype.initialize = function (config, core, extensions) {\r\n        if (!this.initialized && !this._fetchInitialized) {\r\n            this._core = core;\r\n            var defaultConfig = AjaxMonitor.getDefaultConfig();\r\n            this._config = AjaxMonitor.getEmptyConfig();\r\n            for (var field in defaultConfig) {\r\n                this._config[field] = ConfigurationManager.getConfig(config, field, AjaxMonitor.identifier, defaultConfig[field]);\r\n            }\r\n            if (this._config.disableAjaxTracking === false) {\r\n                this.instrumentXhr();\r\n            }\r\n            if (this._config.disableFetchTracking === false) {\r\n                this.instrumentFetch();\r\n            }\r\n            if (extensions.length > 0 && extensions) {\r\n                var propExt = void 0, extIx = 0;\r\n                while (!propExt && extIx < extensions.length) {\r\n                    if (extensions[extIx] && extensions[extIx].identifier === PropertiesPluginIdentifier) {\r\n                        propExt = extensions[extIx];\r\n                    }\r\n                    extIx++;\r\n                }\r\n                if (propExt) {\r\n                    this._context = propExt.context; // we could move IPropertiesPlugin to common as well\r\n                }\r\n            }\r\n        }\r\n    };\r\n    AjaxMonitor.identifier = \"AjaxDependencyPlugin\";\r\n    return AjaxMonitor;\r\n}());\r\nexport { AjaxMonitor };\r\n//# sourceMappingURL=ajax.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { AppInsightsCore, LoggingSeverity, _InternalMessageId } from \"@microsoft/applicationinsights-core-js\";\r\nimport { ApplicationInsights } from \"@microsoft/applicationinsights-analytics-js\";\r\nimport { Util, PropertiesPluginIdentifier } from \"@microsoft/applicationinsights-common\";\r\nimport { Sender } from \"@microsoft/applicationinsights-channel-js\";\r\nimport { PropertiesPlugin } from \"@microsoft/applicationinsights-properties-js\";\r\nimport { AjaxPlugin as DependenciesPlugin } from '@microsoft/applicationinsights-dependencies-js';\r\n\"use strict\";\r\n;\r\n/**\r\n * Application Insights API\r\n * @class Initialization\r\n * @implements {IApplicationInsights}\r\n */\r\nvar Initialization = /** @class */ (function () {\r\n    function Initialization(snippet) {\r\n        // initialize the queue and config in case they are undefined\r\n        snippet.queue = snippet.queue || [];\r\n        snippet.version = snippet.version || 2.0; // Default to new version\r\n        var config = snippet.config || {};\r\n        // ensure instrumentationKey is specified\r\n        if (config && !config.instrumentationKey) {\r\n            config = snippet;\r\n            ApplicationInsights.Version = \"2.1.1\"; // Not currently used anywhere\r\n        }\r\n        this.appInsights = new ApplicationInsights();\r\n        this.properties = new PropertiesPlugin();\r\n        this.dependencies = new DependenciesPlugin();\r\n        this.core = new AppInsightsCore();\r\n        this.snippet = snippet;\r\n        this.config = config;\r\n        this.getSKUDefaults();\r\n    }\r\n    // Analytics Plugin\r\n    /**\r\n     * Log a user action or other occurrence.\r\n     * @param {IEventTelemetry} event\r\n     * @param {ICustomProperties} [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackEvent = function (event, customProperties) {\r\n        this.appInsights.trackEvent(event, customProperties);\r\n    };\r\n    /**\r\n     * Logs that a page, or similar container was displayed to the user.\r\n     * @param {IPageViewTelemetry} pageView\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackPageView = function (pageView) {\r\n        var inPv = pageView || {};\r\n        this.appInsights.trackPageView(inPv);\r\n    };\r\n    /**\r\n     * Log a bag of performance information via the customProperties field.\r\n     * @param {IPageViewPerformanceTelemetry} pageViewPerformance\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackPageViewPerformance = function (pageViewPerformance) {\r\n        var inPvp = pageViewPerformance || {};\r\n        this.appInsights.trackPageViewPerformance(inPvp);\r\n    };\r\n    /**\r\n     * Log an exception that you have caught.\r\n     * @param {IExceptionTelemetry} exception\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackException = function (exception) {\r\n        if (!exception.exception && exception.error) {\r\n            exception.exception = exception.error;\r\n        }\r\n        this.appInsights.trackException(exception);\r\n    };\r\n    /**\r\n     * Manually send uncaught exception telemetry. This method is automatically triggered\r\n     * on a window.onerror event.\r\n     * @param {IAutoExceptionTelemetry} exception\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype._onerror = function (exception) {\r\n        this.appInsights._onerror(exception);\r\n    };\r\n    /**\r\n     * Log a diagnostic scenario such entering or leaving a function.\r\n     * @param {ITraceTelemetry} trace\r\n     * @param {ICustomProperties} [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackTrace = function (trace, customProperties) {\r\n        this.appInsights.trackTrace(trace, customProperties);\r\n    };\r\n    /**\r\n     * Log a numeric value that is not associated with a specific event. Typically used\r\n     * to send regular reports of performance indicators.\r\n     *\r\n     * To send a single measurement, just use the `name` and `average` fields\r\n     * of {@link IMetricTelemetry}.\r\n     *\r\n     * If you take measurements frequently, you can reduce the telemetry bandwidth by\r\n     * aggregating multiple measurements and sending the resulting average and modifying\r\n     * the `sampleCount` field of {@link IMetricTelemetry}.\r\n     * @param {IMetricTelemetry} metric input object argument. Only `name` and `average` are mandatory.\r\n     * @param {ICustomProperties} [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackMetric = function (metric, customProperties) {\r\n        this.appInsights.trackMetric(metric, customProperties);\r\n    };\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    Initialization.prototype.startTrackPage = function (name) {\r\n        this.appInsights.startTrackPage(name);\r\n    };\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    Initialization.prototype.stopTrackPage = function (name, url, customProperties, measurements) {\r\n        this.appInsights.stopTrackPage(name, url, customProperties, measurements);\r\n    };\r\n    Initialization.prototype.startTrackEvent = function (name) {\r\n        this.appInsights.startTrackEvent(name);\r\n    };\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    Initialization.prototype.stopTrackEvent = function (name, properties, measurements) {\r\n        this.appInsights.stopTrackEvent(name, properties, measurements); // Todo: Fix to pass measurements once type is updated\r\n    };\r\n    Initialization.prototype.addTelemetryInitializer = function (telemetryInitializer) {\r\n        return this.appInsights.addTelemetryInitializer(telemetryInitializer);\r\n    };\r\n    // Properties Plugin\r\n    /**\r\n     * Set the authenticated user id and the account id. Used for identifying a specific signed-in user. Parameters must not contain whitespace or ,;=|\r\n     *\r\n     * The method will only set the `authenicatedUserId` and `accountId` in the curent page view. To set them for the whole sesion, you should set `storeInCookie = true`\r\n     * @param {string} authenticatedUserId\r\n     * @param {string} [accountId]\r\n     * @param {boolean} [storeInCookie=false]\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.setAuthenticatedUserContext = function (authenticatedUserId, accountId, storeInCookie) {\r\n        if (storeInCookie === void 0) { storeInCookie = false; }\r\n        this.properties.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\r\n    };\r\n    /**\r\n     * Clears the authenticated user id and account id. The associated cookie is cleared, if present.\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.clearAuthenticatedUserContext = function () {\r\n        this.properties.context.user.clearAuthenticatedUserContext();\r\n    };\r\n    // Dependencies Plugin\r\n    /**\r\n     * Log a dependency call (e.g. ajax)\r\n     * @param {IDependencyTelemetry} dependency\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.trackDependencyData = function (dependency) {\r\n        this.dependencies.trackDependencyData(dependency);\r\n    };\r\n    // Misc\r\n    /**\r\n     * Manually trigger an immediate send of all telemetry still in the buffer.\r\n     * @param {boolean} [async=true]\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.flush = function (async) {\r\n        if (async === void 0) { async = true; }\r\n        this.core.getTransmissionControls().forEach(function (channels) {\r\n            channels.forEach(function (channel) {\r\n                channel.flush(async);\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Initialize this instance of ApplicationInsights\r\n     * @returns {IApplicationInsights}\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.loadAppInsights = function (legacyMode) {\r\n        if (legacyMode === void 0) { legacyMode = false; }\r\n        // dont allow additional channels/other extensions for legacy mode; legacy mode is only to allow users to switch with no code changes!\r\n        if (legacyMode && this.config.extensions && this.config.extensions.length > 0) {\r\n            throw new Error(\"Extensions not allowed in legacy mode\");\r\n        }\r\n        var extensions = [];\r\n        var appInsightsChannel = new Sender();\r\n        extensions.push(appInsightsChannel);\r\n        extensions.push(this.properties);\r\n        extensions.push(this.dependencies);\r\n        extensions.push(this.appInsights);\r\n        // initialize core\r\n        this.core.initialize(this.config, extensions);\r\n        // Empty queue of all api calls logged prior to sdk download\r\n        this.emptyQueue();\r\n        this.pollInternalLogs();\r\n        this.addHousekeepingBeforeUnload(this);\r\n        this.context = this.properties.context;\r\n        return this;\r\n    };\r\n    /**\r\n     * Overwrite the lazy loaded fields of global window snippet to contain the\r\n     * actual initialized API methods\r\n     * @param {Snippet} snippet\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.updateSnippetDefinitions = function (snippet) {\r\n        // apply full appInsights to the global instance\r\n        // Note: This must be called before loadAppInsights is called\r\n        for (var field in this) {\r\n            if (typeof field === 'string') {\r\n                snippet[field] = this[field];\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Call any functions that were queued before the main script was loaded\r\n     * @memberof Initialization\r\n     */\r\n    Initialization.prototype.emptyQueue = function () {\r\n        // call functions that were queued before the main script was loaded\r\n        try {\r\n            if (Util.isArray(this.snippet.queue)) {\r\n                // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.\r\n                var length = this.snippet.queue.length;\r\n                for (var i = 0; i < length; i++) {\r\n                    var call = this.snippet.queue[i];\r\n                    call();\r\n                }\r\n                this.snippet.queue = undefined;\r\n                delete this.snippet.queue;\r\n            }\r\n        }\r\n        catch (exception) {\r\n            var properties = {};\r\n            if (exception && typeof exception.toString === \"function\") {\r\n                properties.exception = exception.toString();\r\n            }\r\n            // need from core\r\n            // Microsoft.ApplicationInsights._InternalLogging.throwInternal(\r\n            //     LoggingSeverity.WARNING,\r\n            //     _InternalMessageId.FailedToSendQueuedTelemetry,\r\n            //     \"Failed to send queued telemetry\",\r\n            //     properties);\r\n        }\r\n    };\r\n    Initialization.prototype.pollInternalLogs = function () {\r\n        this.core.pollInternalLogs();\r\n    };\r\n    Initialization.prototype.addHousekeepingBeforeUnload = function (appInsightsInstance) {\r\n        // Add callback to push events when the user navigates away\r\n        if (!appInsightsInstance.appInsights.config.disableFlushOnBeforeUnload && ('onbeforeunload' in window)) {\r\n            var performHousekeeping = function () {\r\n                // Adds the ability to flush all data before the page unloads.\r\n                // Note: This approach tries to push an async request with all the pending events onbeforeunload.\r\n                // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.\r\n                // Telemetry here will help us analyze how effective this approach is.\r\n                // Another approach would be to make this call sync with a acceptable timeout to reduce the\r\n                // impact on user experience.\r\n                //appInsightsInstance.context._sender.triggerSend();\r\n                appInsightsInstance.flush(false);\r\n                // Back up the current session to local storage\r\n                // This lets us close expired sessions after the cookies themselves expire\r\n                var ext = appInsightsInstance.appInsights.core['_extensions'][PropertiesPluginIdentifier];\r\n                if (ext && ext.context && ext.context._sessionManager) {\r\n                    ext.context._sessionManager.backup();\r\n                }\r\n            };\r\n            if (!Util.addEventHandler('beforeunload', performHousekeeping)) {\r\n                appInsightsInstance.appInsights.core.logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.FailedToAddHandlerForOnBeforeUnload, 'Could not add handler for beforeunload');\r\n            }\r\n        }\r\n    };\r\n    Initialization.prototype.getSKUDefaults = function () {\r\n        this.config.diagnosticLogInterval =\r\n            this.config.diagnosticLogInterval && this.config.diagnosticLogInterval > 0 ? this.config.diagnosticLogInterval : 10000;\r\n    };\r\n    return Initialization;\r\n}());\r\nexport { Initialization };\r\n//# sourceMappingURL=Initialization.js.map","import { AppInsightsDeprecated } from \"./ApplicationInsightsDeprecated\";\r\nimport { Initialization as ApplicationInsights } from \"./Initialization\";\r\nvar ApplicationInsightsContainer = /** @class */ (function () {\r\n    function ApplicationInsightsContainer() {\r\n    }\r\n    ApplicationInsightsContainer.getAppInsights = function (snippet, version) {\r\n        var initialization = new ApplicationInsights(snippet);\r\n        var legacyMode = version !== 2.0 ? true : false;\r\n        // Two target scenarios:\r\n        // 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work\r\n        // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding\r\n        // and all api signatures are expected to map to new SDK. Note new snippet specifies version\r\n        if (version === 2.0) {\r\n            initialization.updateSnippetDefinitions(snippet);\r\n            initialization.loadAppInsights(legacyMode);\r\n            return initialization; // default behavior with new snippet\r\n        }\r\n        else {\r\n            var legacy = new AppInsightsDeprecated(snippet, initialization); // target scenario old snippet + updated endpoint\r\n            legacy.updateSnippetDefinitions(snippet);\r\n            initialization.loadAppInsights(legacyMode);\r\n            return legacy;\r\n        }\r\n    };\r\n    return ApplicationInsightsContainer;\r\n}());\r\nexport { ApplicationInsightsContainer };\r\n//# sourceMappingURL=ApplicationInsightsContainer.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ApplicationInsightsContainer } from \"./ApplicationInsightsContainer\";\r\nexport { Initialization as ApplicationInsights } from \"./Initialization\";\r\n\"use strict\";\r\n//should be global function that should load as soon as SDK loads\r\ntry {\r\n    // E2E sku on load initializes core and pipeline using snippet as input for configuration\r\n    var aiName;\r\n    if (typeof window !== \"undefined\" && typeof JSON !== \"undefined\") {\r\n        // get snippet or initialize to an empty object\r\n        aiName = window[\"appInsightsSDK\"] || \"appInsights\";\r\n        if (window[aiName] !== undefined) {\r\n            // this is the typical case for browser+snippet\r\n            var snippet = window[aiName] || { version: 2.0 };\r\n            // overwrite snippet with full appInsights\r\n            // for 2.0 initialize only if required\r\n            if ((snippet.version === 2.0 && window[aiName].initialize) || snippet.version === undefined) {\r\n                ApplicationInsightsContainer.getAppInsights(snippet, snippet.version);\r\n            }\r\n        }\r\n    }\r\n}\r\ncatch (e) {\r\n    // TODO: Find better place to warn to console when SDK initialization fails\r\n    if (console) {\r\n        console.warn('Failed to initialize AppInsights JS SDK for instance ' + aiName + e.message);\r\n    }\r\n}\r\n//# sourceMappingURL=Init.js.map"],"names":["StorageType","FieldType","EventsDiscardedReason","CoreUtils","isNullOrUndefined","input","disableCookies","_canUseCookies","newGuid","replace","GuidRegex","c","r","Math","random","toString","LoggingSeverity","NotificationManager","prototype","addNotificationListener","listener","this","listeners","push","removeNotificationListener","index","indexOf","splice","eventsSent","events","_this","_loop_1","i","this_1","setTimeout","length","eventsDiscarded","reason","_loop_2","this_2","_InternalMessageId","_InternalLogMessage","sanitizeDiagnosticText","text","dataType","AiNonUserActionablePrefix","AiUserActionablePrefix","msgId","msg","isUserAct","properties","messageId","message","diagnosticText","JSON","stringify","DiagnosticLogger","throwInternal","severity","enableDebugExceptions","messageKey","_messageLogged","consoleLoggingLevel","WARNING","warnToConsole","logInternalMessage","console","warn","log","resetInternalMessageCount","_messageCount","_areInternalMessagesThrottled","logMessage","AIInternalMessagePrefix","telemetryLoggingLevel","queue","maxInternalMessageLimit","throttleLimitMessage","throttleMessage","config","loggingLevelConsole","loggingLevelTelemetry","maxMessageLimit","ChannelController","processTelemetry","item","channelQueue","forEach","queues","Object","defineProperty","get","enumerable","configurable","initialize","core","extensions","isCookieUseDisabled","Array","channels","invalidChannelIdentifier_1","undefined","sort","a","b","priority","queueItem","identifier","Error","setNextPlugin","arr","plugin","AppInsightsCore","_isInitialized","instrumentationKey","_notificationManager","extensionConfig","logger","_a","_extensions","apply","concat","extension","isValid","_channelController","extA","extB","typeExtA","typeExtB","ext","t","idx","curr","getTransmissionControls","ChannelControls","track","telemetryItem","_notifyInvalidEvent","iKey","time","Date","toISOString","ver","_validateTelmetryItem","pollInternalLogs","interval","diagnosticLogInterval","setInterval","name","baseType","baseData","RequestHeaders","requestContextHeader","requestContextTargetKey","requestContextAppIdFormat","requestIdHeader","sdkContextHeader","sdkContextHeaderAppIdRequest","requestContextHeaderLowerCase","DataSanitizer","sanitizeKeyAndAddUniqueness","key","map","origLength","field","sanitizeKey","uniqueField","substring","MAX_NAME_LENGTH","padNumber","nameTrunc","trim","sanitizeString","value","maxLength","valueTrunc","MAX_STRING_LENGTH","sanitizeUrl","url","sanitizeInput","MAX_URL_LENGTH","sanitizeMessage","messageTrunc","MAX_MESSAGE_LENGTH","sanitizeException","exception","exceptionTrunc","MAX_EXCEPTION_LENGTH","sanitizeProperties","tempProps","prop","e","MAX_PROPERTY_LENGTH","sanitizeMeasurements","measurements","tempMeasurements","measure","sanitizeId","id","MAX_ID_LENGTH","_msgId","inputTrunc","data","num","s","substr","str","Util","disableStorage","_canUseLocalStorage","_canUseSessionStorage","_getLocalStorageObject","canUseLocalStorage","_getVerifiedStorageObject","LocalStorage","storageType","fail","uid","storage","window","localStorage","sessionStorage","setItem","getItem","removeItem","isInternalApplicationInsightsEndpoint","endpointUrl","_internalEndpoints","toLowerCase","getStorage","getExceptionName","dump","setStorage","removeStorage","_getSessionStorageObject","canUseSessionStorage","SessionStorage","getSessionStorageKeys","keys","getSessionStorage","setSessionStorage","removeSessionStorage","canUseCookies","document","cookie","setCookie","domain","domainAttrib","secureAttrib","location","protocol","stringToBoolOrDefault","defaultValue","getCookie","cookieName","cookies","split","deleteCookie","newId","result","charAt","floor","isArray","obj","call","isError","isDate","toISOStringForIE8","date","pad","String","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","slice","getIEVersion","userAgentStr","myNav","navigator","userAgent","parseInt","msToTimeSpan","totalms","isNaN","ms","round","sec","min","hour","days","isCrossOriginError","lineNumber","columnNumber","error","object","objectTypeDump","propertyValueDump","stack","addEventHandler","eventName","callback","verbEventName","addEventListener","IsBeaconApiSupported","sendBeacon","getExtension","extIx","NotSpecified","UrlHelper","parseUrl","htmlAnchorElement","createElement","host","parseHost","href","getAbsoluteUrl","getPathName","pathname","getCompleteUrl","method","absoluteUrl","toUpperCase","match","CorrelationIdHelper","canIncludeCorrelationHeader","requestUrl","currentHost","disableCorrelationHeaders","requestHost","enableCorsCorrelation","matchExists_1","includedDomains","correlationHeaderDomains","regex","RegExp","test","excludedDomains","correlationHeaderExcludedDomains","getCorrelationContext","responseHeader","correlationId","getCorrelationContextValue","correlationIdPrefix","keyValues","keyValue","AjaxHelper","ParseDependencyPath","commandName","target","parsedUrl","pathName","DateTimeUtils","Now","getTime","performance","now","timing","navigationStart","GetDuration","start","end","DisabledPropertyName","ProcessLegacy","HttpMethod","extendStatics","d","setPrototypeOf","__proto__","p","hasOwnProperty","__extends","__","constructor","create","_super","__assign","assign","n","arguments","Data","tslib_1.__extends","Envelope","sampleRate","tags","aiDataContract","Required","Hidden","Domain","EventData","Event","envelopeType","Default","StackFrame","ExceptionData","exceptions","ExceptionDetails","hasFullStack","parsedStack","Exception","CreateFromInterface","ex","_ExceptionDetails","tslib_1.__assign","toInterface","severityLevel","problemGroup","isManual","CreateSimpleException","typeName","assembly","fileName","details","line","frame","outerId","_StackFrame","parseStack","frames","level","totalSizeInBytes","parsedFrame","sizeInBytes","left","right","size","acceptedLeft","acceptedRight","howMany","baseSize","sourceFrame","matches","DataPointType","MetricData","metrics","DataPoint","kind","Measurement","count","max","stdDev","Metric","dataPoint","PageViewData","PageView","durationMs","duration","RemoteDependencyData","success","GeneratedRemoteDependencyData","resultCode","requestAPI","type","dependencyKind","dependencySource","dependencyTypeName","dependencyFields","MessageData","Trace","PageViewPerfData","PageViewPerformance","unused","cs4BaseData","perfTotal","networkConnect","sentRequest","receivedResponse","domProcessing","SeverityLevel","AIData","ConfigurationManager","getConfig","configValue","ContextTagKeys","applicationVersion","applicationBuild","applicationTypeId","applicationId","applicationLayer","deviceId","deviceIp","deviceLanguage","deviceLocale","deviceModel","deviceFriendlyName","deviceNetwork","deviceNetworkName","deviceOEMName","deviceOS","deviceOSVersion","deviceRoleInstance","deviceRoleName","deviceScreenResolution","deviceType","deviceMachineName","deviceVMName","deviceBrowser","deviceBrowserVersion","locationIp","locationCountry","locationProvince","locationCity","operationId","operationName","operationParentId","operationRootId","operationSyntheticSource","operationCorrelationVector","sessionId","sessionIsFirst","sessionIsNew","userAccountAcquisitionDate","userAccountId","userId","userStoreRegion","userAuthUserId","userAnonymousUserAcquisitionDate","userAuthenticatedUserAcquisitionDate","cloudName","cloudRole","cloudRoleVer","cloudRoleInstance","cloudEnvironment","cloudLocation","cloudDeploymentUnit","internalNodeName","internalSdkVersion","internalAgentVersion","TelemetryItemCreator","envelopeName","customProperties","systemProperties","Extensions","UserExt","DeviceExt","TraceExt","WebExt","AppExt","OSExt","SessionExt","SDKExt","CtxTagKeys","PropertiesPluginIdentifier","BreezeChannelIdentifier","AppInsightsDeprecated","addTelemetryInitializers","callBack","_hasLegacyInitializers","appInsightsNew","addTelemetryInitializer","_processLegacyInitializers","_queue","startTrackPage","stopTrackPage","trackPageView","telemetry","uri","trackEvent","trackDependency","totalTime","trackDependencyData","responseCode","trackException","handledAt","trackMetric","average","sampleCount","trackTrace","flush","async","setAuthenticatedUserContext","authenticatedUserId","accountId","storeInCookie","context","user","clearAuthenticatedUserContext","_onerror","startTrackEvent","stopTrackEvent","downloadAndSetup","updateSnippetDefinitions","snippet","loadAppInsights","originalTrackPageView","pagePath","legacyPageView","legacyEvent","props","getDefaultConfig","sessionRenewalMs","sessionExpirationMs","maxBatchSizeInBytes","maxBatchInterval","enableDebug","disableExceptionTracking","disableTelemetry","verboseLogging","emitLineDelimitedJson","autoTrackPageVisitTime","samplingPercentage","disableAjaxTracking","maxAjaxCallsPerView","isBeaconApiDisabled","disableFlushOnBeforeUnload","enableSessionStorageBuffer","isRetryDisabled","isStorageUseDisabled","isBrowserLinkTrackingEnabled","bind","PageViewManager","pageView","title","_pageViewPerformanceManager","isPerformanceTimingSupported","appInsights","sendPageViewInternal","_channel","q","_logger","pageViewSent","customDuration","getPerformanceTiming","shouldCollectDuration","overridePageViewDuration","handle","isPerformanceTimingDataReady","clearInterval","pageViewPerformance","populatePageViewPerformanceEvent","pageViewPerformanceSent","sendPageViewPerformanceInternal","CRITICAL","pageViewPerformanceManager","PageVisitTimeManager","trackPreviousPageVisit","currentPageName","currentPageUrl","prevPageVisitTimeData","restartPageVisitTimer","pageVisitTimeTrackingHandler","pageName","pageUrl","pageVisitTime","prevPageVisitData","stopPageVisitTimer","startPageVisitTimer","prevPageVisitDataKeyName","currPageVisitData","PageVisitData","currPageVisitDataStr","pageVisitEndTime","pageVisitDataJsonStr","parse","pageVisitStartTime","PageViewPerformanceManager","total","loadEventEnd","network","connectEnd","request","requestStart","responseStart","response","responseEnd","dom","domainLookupStart","domLoading","durations","_i","botAgentNames","isGoogleBot","i_1","MAX_DURATION_ALLOWED","durationProperty","ApplicationInsights","enableAutoRouteTracking","namePrefix","env","doNotSendItem","telemetryInitializersCount","_telemetryInitializers","telemetryInitializer","_nextPlugin","next","event","EventTelemetry","_eventTracking","stop","trace","metric","inPv","_pageViewManager","_pageVisitTimeManager","refUri","referrer","_trackAjaxAttempts","trackPageViewPerformance","_pageTracking","measurement","sendExceptionInternal","exceptionPartB","properties_1","URL","_sendCORSException","errorString","_initialize","_globalconfig","defaults","configGetters","cookieDomain","sdkExtension","appId","trackPageVisitTime","_addDefaultTelemetryInitializers","Timing","action","pageViewItem","f","instance","autoExceptionInstrumented","originalOnError_1","onerror","handled","history","pushState","replaceState","_self_1","_properties","ret","dispatchEvent","telemetryTrace","traceID","autoRoutePVDelay","PageName","PageUrl","browserLinkPaths_1","_addTelemetryInitializer","envelope","remoteData","Version","_events","_name","ArraySendBuffer","enqueue","payload","_buffer","clear","getItems","batchPayloads","_config","join","markAsSent","clearSent","SessionStorageSendBuffer","MAX_BUFFER_SIZE","_bufferFullMessageSent","setBuffer","BUFFER_KEY","SENT_BUFFER_KEY","removePayloadsFromBuffer","sentElements","getBuffer","payloads","buffer","remaining","contains","j","prefixedKey","bufferJson","bufferItems","notDeliveredItems","EnvelopeCreator","extractProperties","extractPropsAndMeasurements","createEnvelope","iKeyNoDashes","extractPartAExtensions","authId","localId","app","sesId","device","deviceClass","ip","web","browserLang","browserVer","browser","screenRes","userConsent","model","os","parentID","tgs","tg","DependencyEnvelopeCreator","Create","customMeasurements","bd","command","EventEnvelopeCreator","ExceptionEnvelopeCreator","MetricEnvelopeCreator","PageViewEnvelopeCreator","currentContextId","pageType","isLoggedIn","pageTags","PageViewPerformanceEnvelopeCreator","TraceEnvelopeCreator","Serializer","serialize","output","_serializeObject","source","circularReferenceCheck","_serializeStringMap","_serializeArray","contract","isRequired","isHidden","isPresent","isObject","sources","expectedType","parseFloat","OfflineListener","_onlineStatus","isListening","_setOnline","_setOffline","body","ononline","onoffline","Offline","isOnline","onLine","isOffline","HashCodeScoreGenerator","getHashCodeScore","getHashCode","INT_MAX_VALUE","MIN_INPUT_LENGTH","hash","charCodeAt","abs","SamplingScoreGenerator","getSamplingScore","hashCodeGeneragor","Sample","isSampledIn","samplingScoreGenerator","samplingRate","Sender","pause","resume","triggerSend","teardown","_serializer","_consecutiveErrors","_retryAt","_lastSend","_sender","defaultConfig","_getDefaultAppInsightsChannelConfig","_getEmptyAppInsightsChannelConfig","_sample","_beaconSender","XMLHttpRequest","_xhrSender","_XMLHttpRequestSupported","XDomainRequest","_xdrSender","_isSampledIn","SampleRate","aiEnvelope_1","constructEnvelope","doNotSendItem_1","bufferPayload","batch","_setupTimer","_xhrReadyStateChange","xhr","countOfItemsInPayload","readyState","_appId","_parseResponse","responseText","status","_isRetriable","_resendPayload","_onError","_formatErrorMessageXhr","_onPartialSuccess","_onSuccess","clearTimeout","_timeoutHandle","results","failed","retry","errors_1","errors","reverse","extracted","statusCode","itemsAccepted","itemsReceived","_xdrOnLoad","xdr","_formatErrorMessageXdr","orig","isAsync","plainTextBatch","Blob","open","setRequestHeader","onreadystatechange","send","linearFactor","payload_1","_setRetryTime","delayInSeconds","backOffSlot","pow","backOffDelay","retryAfterTimeSpan","retryInterval","timerValue","onload","hostingProtocol","lastIndexOf","Session","_SessionManager","update","automaticSession","initializeAutomaticSession","acquisitionExpired","acquisitionDate","renewalExpired","renewalDate","renew","cookieUpdatedTimestamp","cookieUpdateInterval","backup","_storageNamePrefix","initializeAutomaticSessionWithData","sessionData","params","acq","renewal","guid","acquisitionExpiry","renewalExpiry","cookieExpiry","setTime","cookieDomnain","toUTCString","acquisitionSpan","renewalSpan","cookieNameConst","Application","Device","Internal","sdkVersion","User","validateUserInput","authenticatedId","authCookie","cookieSeparator","authUserCookieName","encodeURI","userCookieName","acqStr","accountAcquisitionDate","newCookie","name_1","authCookieString","decodeURI","Location","TelemetryTrace","parentId","TelemetryContext","applySessionContext","sessionContext","session","sessionManager","applyOperatingSystemContxt","applyApplicationContext","application","build","applyDeviceContext","applyInternalContext","internal","agentVersion","applyLocationContext","applyOperationContext","applyWebContext","applyUserContext","cleanUp","PropertiesPlugin","_extensionConfig","_breezeChannel","_processTelemetryInternal","nextPlugin","XHRMonitoringState","openDone","setRequestHeaderDone","sendDone","abortDone","onreadystatechangeCallbackAttached","ajaxRecord","completed","requestHeadersSize","ttfb","responseReceivingDuration","callbackDuration","ajaxTotalDuration","aborted","requestSize","requestSentTime","responseStartedTime","responseFinishedTime","callbackFinishedTime","endTime","originalOnreadystatechage","xhrMonitoringState","clientFailure","CalculateMetrics","EventHelper","AttachEvent","eventNameWithoutOn","handlerRef","attachEvent","DetachEvent","detachEvent","removeEventListener","AjaxMonitor","isMonitoredInstance","excludeAjaxDataValidation","init","disabledProperty","ajaxValidation","initialized","_fetchInitialized","ajaxData","supportsAjaxMonitoring","abort","instrumentOpen","originalOpen","ajaxMonitorInstance","openHandler","_core","ajaxDiagnosticsMessage","getFailedAjaxDiagnosticsMessage","_context","attachToOnReadyStateChange","instrumentSend","originalSend","content","sendHandler","includeCorrelationHeaders","instrumentAbort","originalAbort","onAjaxComplete","exceptionText","dependency","correlationContext","getAjaxCorrelationContext","trackDependencyDataInternal","responseHeadersString","getAllResponseHeaders","getResponseHeader","instrumentFetch","supportsFetch","originalFetch","fetch","fetchMonitorInstance","fetchData","isFetchInstrumented","createFetchRecord","getFailedFetchDiagnosticsMessage","then","onFetchComplete","catch","onFetchFailed","Request","currentWindowHost","headers","Headers","set","appId_1","fetchDiagnosticsMessage","getFetchCorrelationContext","instrumentXhr","disableFetchTracking","getEmptyConfig","propExt","Initialization","inPvp","dependencies","channel","legacyMode","appInsightsChannel","emptyQueue","addHousekeepingBeforeUnload","appInsightsInstance","_sessionManager","getSKUDefaults","version","DependenciesPlugin","ApplicationInsightsContainer","getAppInsights","initialization","legacy","aiName"],"mappings":"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"}