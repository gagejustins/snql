{"version":3,"file":"Initialization.js","sourceRoot":"","sources":["../src/Initialization.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { IConfiguration, AppInsightsCore, IAppInsightsCore, LoggingSeverity, _InternalMessageId, ITelemetryItem, ICustomProperties } from \"@microsoft/applicationinsights-core-js\";\r\nimport { ApplicationInsights } from \"@microsoft/applicationinsights-analytics-js\";\r\nimport { Util, IConfig, IDependencyTelemetry, IPageViewPerformanceTelemetry,IPropertiesPlugin,\r\n         IPageViewTelemetry, IExceptionTelemetry, IAutoExceptionTelemetry, ITraceTelemetry, ITelemetryContext,\r\n         IMetricTelemetry, IEventTelemetry, IAppInsights, PropertiesPluginIdentifier } from \"@microsoft/applicationinsights-common\";\r\nimport { Sender } from \"@microsoft/applicationinsights-channel-js\";\r\nimport { PropertiesPlugin, TelemetryContext } from \"@microsoft/applicationinsights-properties-js\";\r\nimport { AjaxPlugin as DependenciesPlugin, IDependenciesPlugin } from '@microsoft/applicationinsights-dependencies-js';\r\n\r\n\"use strict\";\r\n\r\n/**\r\n *\r\n * @export\r\n * @interface Snippet\r\n */\r\nexport interface Snippet {\r\n    config: IConfiguration & IConfig;\r\n    queue?: Array<() => void>;\r\n    version?: number;\r\n}\r\n\r\nexport interface IApplicationInsights extends IAppInsights, IDependenciesPlugin, IPropertiesPlugin {\r\n    appInsights: ApplicationInsights;\r\n    flush: (async?: boolean) => void;\r\n};\r\n\r\n/**\r\n * Application Insights API\r\n * @class Initialization\r\n * @implements {IApplicationInsights}\r\n */\r\nexport class Initialization implements IApplicationInsights {\r\n    public snippet: Snippet;\r\n    public config: IConfiguration & IConfig;\r\n    public appInsights: ApplicationInsights;\r\n    public core: IAppInsightsCore;\r\n    public context: TelemetryContext;\r\n\r\n    private dependencies: DependenciesPlugin;\r\n    private properties: PropertiesPlugin;\r\n\r\n    constructor(snippet: Snippet) {\r\n        // initialize the queue and config in case they are undefined\r\n        snippet.queue = snippet.queue || [];\r\n        snippet.version = snippet.version || 2.0; // Default to new version\r\n        var config: IConfiguration & IConfig = snippet.config || <any>{};\r\n\r\n        // ensure instrumentationKey is specified\r\n        if (config && !config.instrumentationKey) {\r\n            config = <any>snippet;\r\n            ApplicationInsights.Version = \"2.1.1\"; // Not currently used anywhere\r\n        }\r\n\r\n        this.appInsights = new ApplicationInsights();\r\n\r\n        this.properties = new PropertiesPlugin();\r\n        this.dependencies = new DependenciesPlugin();\r\n        this.core = new AppInsightsCore();\r\n\r\n        this.snippet = snippet;\r\n        this.config = config;\r\n        this.getSKUDefaults();\r\n    }\r\n\r\n    // Analytics Plugin\r\n    /**\r\n     * Log a user action or other occurrence.\r\n     * @param {IEventTelemetry} event\r\n     * @param {ICustomProperties} [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    public trackEvent(event: IEventTelemetry, customProperties?: ICustomProperties) {\r\n        this.appInsights.trackEvent(event, customProperties);\r\n    }\r\n\r\n    /**\r\n     * Logs that a page, or similar container was displayed to the user.\r\n     * @param {IPageViewTelemetry} pageView\r\n     * @memberof Initialization\r\n     */\r\n    public trackPageView(pageView?: IPageViewTelemetry) {\r\n        const inPv = pageView || {};\r\n        this.appInsights.trackPageView(inPv);\r\n    }\r\n\r\n    /**\r\n     * Log a bag of performance information via the customProperties field.\r\n     * @param {IPageViewPerformanceTelemetry} pageViewPerformance\r\n     * @memberof Initialization\r\n     */\r\n    public trackPageViewPerformance(pageViewPerformance: IPageViewPerformanceTelemetry): void {\r\n        const inPvp = pageViewPerformance || {};\r\n        this.appInsights.trackPageViewPerformance(inPvp);\r\n    }\r\n\r\n    /**\r\n     * Log an exception that you have caught.\r\n     * @param {IExceptionTelemetry} exception\r\n     * @memberof Initialization\r\n     */\r\n    public trackException(exception: IExceptionTelemetry): void {\r\n        if (!exception.exception && (<any>exception).error) {\r\n            exception.exception = (<any>exception).error;\r\n        }\r\n        this.appInsights.trackException(exception);\r\n    }\r\n\r\n    /**\r\n     * Manually send uncaught exception telemetry. This method is automatically triggered\r\n     * on a window.onerror event.\r\n     * @param {IAutoExceptionTelemetry} exception\r\n     * @memberof Initialization\r\n     */\r\n    public _onerror(exception: IAutoExceptionTelemetry): void {\r\n        this.appInsights._onerror(exception);\r\n    }\r\n\r\n    /**\r\n     * Log a diagnostic scenario such entering or leaving a function.\r\n     * @param {ITraceTelemetry} trace\r\n     * @param {ICustomProperties} [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    public trackTrace(trace: ITraceTelemetry, customProperties?: ICustomProperties): void {\r\n        this.appInsights.trackTrace(trace, customProperties);\r\n    }\r\n\r\n    /**\r\n     * Log a numeric value that is not associated with a specific event. Typically used\r\n     * to send regular reports of performance indicators.\r\n     *\r\n     * To send a single measurement, just use the `name` and `average` fields\r\n     * of {@link IMetricTelemetry}.\r\n     *\r\n     * If you take measurements frequently, you can reduce the telemetry bandwidth by\r\n     * aggregating multiple measurements and sending the resulting average and modifying\r\n     * the `sampleCount` field of {@link IMetricTelemetry}.\r\n     * @param {IMetricTelemetry} metric input object argument. Only `name` and `average` are mandatory.\r\n     * @param {ICustomProperties} [customProperties]\r\n     * @memberof Initialization\r\n     */\r\n    public trackMetric(metric: IMetricTelemetry, customProperties?: ICustomProperties): void {\r\n        this.appInsights.trackMetric(metric, customProperties);\r\n    }\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    public startTrackPage(name?: string): void {\r\n        this.appInsights.startTrackPage(name);\r\n    }\r\n\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    public stopTrackPage(name?: string, url?: string, customProperties?: { [key: string]: any; }, measurements?: { [key: string]: number; }) {\r\n        this.appInsights.stopTrackPage(name, url, customProperties, measurements);\r\n    }\r\n\r\n    public startTrackEvent(name?: string): void {\r\n        this.appInsights.startTrackEvent(name);\r\n    }\r\n\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    public stopTrackEvent(name: string, properties?: { [key: string]: string; }, measurements?: { [key: string]: number; }) {\r\n        this.appInsights.stopTrackEvent(name, properties, measurements); // Todo: Fix to pass measurements once type is updated\r\n    }\r\n\r\n    public addTelemetryInitializer(telemetryInitializer: (item: ITelemetryItem) => boolean | void) {\r\n        return this.appInsights.addTelemetryInitializer(telemetryInitializer);\r\n    }\r\n\r\n    // Properties Plugin\r\n\r\n    /**\r\n     * Set the authenticated user id and the account id. Used for identifying a specific signed-in user. Parameters must not contain whitespace or ,;=|\r\n     *\r\n     * The method will only set the `authenicatedUserId` and `accountId` in the curent page view. To set them for the whole sesion, you should set `storeInCookie = true`\r\n     * @param {string} authenticatedUserId\r\n     * @param {string} [accountId]\r\n     * @param {boolean} [storeInCookie=false]\r\n     * @memberof Initialization\r\n     */\r\n    public setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string, storeInCookie = false): void {\r\n         this.properties.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\r\n    }\r\n\r\n    /**\r\n     * Clears the authenticated user id and account id. The associated cookie is cleared, if present.\r\n     * @memberof Initialization\r\n     */\r\n    public clearAuthenticatedUserContext(): void {\r\n         this.properties.context.user.clearAuthenticatedUserContext();\r\n    }\r\n\r\n    // Dependencies Plugin\r\n\r\n    /**\r\n     * Log a dependency call (e.g. ajax)\r\n     * @param {IDependencyTelemetry} dependency\r\n     * @memberof Initialization\r\n     */\r\n    public trackDependencyData(dependency: IDependencyTelemetry): void {\r\n        this.dependencies.trackDependencyData(dependency);\r\n    }\r\n\r\n    // Misc\r\n\r\n    /**\r\n     * Manually trigger an immediate send of all telemetry still in the buffer.\r\n     * @param {boolean} [async=true]\r\n     * @memberof Initialization\r\n     */\r\n    public flush(async: boolean = true) {\r\n        this.core.getTransmissionControls().forEach(channels => {\r\n            channels.forEach(channel => {\r\n                channel.flush(async);\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Initialize this instance of ApplicationInsights\r\n     * @returns {IApplicationInsights}\r\n     * @memberof Initialization\r\n     */\r\n    public loadAppInsights(legacyMode: boolean = false): IApplicationInsights {\r\n\r\n        // dont allow additional channels/other extensions for legacy mode; legacy mode is only to allow users to switch with no code changes!\r\n        if (legacyMode && this.config.extensions && this.config.extensions.length > 0) {\r\n            throw new Error(\"Extensions not allowed in legacy mode\");\r\n        }\r\n\r\n        let extensions = [];\r\n        let appInsightsChannel: Sender = new Sender();\r\n\r\n        extensions.push(appInsightsChannel);\r\n        extensions.push(this.properties);\r\n        extensions.push(this.dependencies);\r\n        extensions.push(this.appInsights);\r\n\r\n        // initialize core\r\n        this.core.initialize(this.config, extensions);\r\n\r\n        // Empty queue of all api calls logged prior to sdk download\r\n        this.emptyQueue();\r\n        this.pollInternalLogs();\r\n        this.addHousekeepingBeforeUnload(this);\r\n        this.context = this.properties.context;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Overwrite the lazy loaded fields of global window snippet to contain the\r\n     * actual initialized API methods\r\n     * @param {Snippet} snippet\r\n     * @memberof Initialization\r\n     */\r\n    public updateSnippetDefinitions(snippet: Snippet) {\r\n        // apply full appInsights to the global instance\r\n        // Note: This must be called before loadAppInsights is called\r\n        for (var field in this) {\r\n            if (typeof field === 'string') {\r\n                snippet[field as string] = this[field];\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Call any functions that were queued before the main script was loaded\r\n     * @memberof Initialization\r\n     */\r\n    public emptyQueue() {\r\n\r\n        // call functions that were queued before the main script was loaded\r\n        try {\r\n            if (Util.isArray(this.snippet.queue)) {\r\n                // note: do not check length in the for-loop conditional in case something goes wrong and the stub methods are not overridden.\r\n                var length = this.snippet.queue.length;\r\n                for (var i = 0; i < length; i++) {\r\n                    var call = this.snippet.queue[i];\r\n                    call();\r\n                }\r\n\r\n                this.snippet.queue = undefined;\r\n                delete this.snippet.queue;\r\n            }\r\n        } catch (exception) {\r\n            var properties: any = {};\r\n            if (exception && typeof exception.toString === \"function\") {\r\n                properties.exception = exception.toString();\r\n            }\r\n\r\n            // need from core\r\n            // Microsoft.ApplicationInsights._InternalLogging.throwInternal(\r\n            //     LoggingSeverity.WARNING,\r\n            //     _InternalMessageId.FailedToSendQueuedTelemetry,\r\n            //     \"Failed to send queued telemetry\",\r\n            //     properties);\r\n        }\r\n    }\r\n\r\n    public pollInternalLogs(): void {\r\n        this.core.pollInternalLogs();\r\n    }\r\n\r\n    public addHousekeepingBeforeUnload(appInsightsInstance: IApplicationInsights): void {\r\n        // Add callback to push events when the user navigates away\r\n\r\n        if (!appInsightsInstance.appInsights.config.disableFlushOnBeforeUnload && ('onbeforeunload' in window)) {\r\n            var performHousekeeping = function () {\r\n                // Adds the ability to flush all data before the page unloads.\r\n                // Note: This approach tries to push an async request with all the pending events onbeforeunload.\r\n                // Firefox does not respect this.Other browsers DO push out the call with < 100% hit rate.\r\n                // Telemetry here will help us analyze how effective this approach is.\r\n                // Another approach would be to make this call sync with a acceptable timeout to reduce the\r\n                // impact on user experience.\r\n\r\n                //appInsightsInstance.context._sender.triggerSend();\r\n\r\n                appInsightsInstance.flush(false);\r\n\r\n                // Back up the current session to local storage\r\n                // This lets us close expired sessions after the cookies themselves expire\r\n                let ext = appInsightsInstance.appInsights.core['_extensions'][PropertiesPluginIdentifier];\r\n                if (ext && ext.context && ext.context._sessionManager) {\r\n                    ext.context._sessionManager.backup();\r\n                }\r\n            };\r\n\r\n            if (!Util.addEventHandler('beforeunload', performHousekeeping)) {\r\n                appInsightsInstance.appInsights.core.logger.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.FailedToAddHandlerForOnBeforeUnload,\r\n                    'Could not add handler for beforeunload');\r\n            }\r\n        }\r\n    }\r\n\r\n    private getSKUDefaults() {\r\n        this.config.diagnosticLogInterval =\r\n            this.config.diagnosticLogInterval && this.config.diagnosticLogInterval > 0 ? this.config.diagnosticLogInterval : 10000;\r\n    }\r\n}\r\n"]}