{"version":3,"file":"ApplicationInsightsDeprecated.js","sourceRoot":"","sources":["../src/ApplicationInsightsDeprecated.ts"],"names":[],"mappings":"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","sourcesContent":["import { IConfig, PageViewPerformance, SeverityLevel, Util,\r\n    IPageViewTelemetry, ITraceTelemetry, IMetricTelemetry,\r\n    IAutoExceptionTelemetry, IDependencyTelemetry, IExceptionTelemetry,\r\n    IEventTelemetry, IEnvelope, ProcessLegacy, HttpMethod } from \"@microsoft/applicationinsights-common\";\r\nimport { Snippet, Initialization as ApplicationInsights } from \"./Initialization\";\r\nimport { ITelemetryItem, IDiagnosticLogger, IConfiguration } from \"@microsoft/applicationinsights-core-js\";\r\n\r\n// ToDo: fix properties and measurements once updates are done to common\r\nexport class AppInsightsDeprecated implements IAppInsightsDeprecated {\r\n    public config: IConfig & IConfiguration;\r\n    public snippet: Snippet;\r\n    public context: ITelemetryContext;\r\n    public logger: IDiagnosticLogger;\r\n    queue: (() => void)[];\r\n    private appInsightsNew: ApplicationInsights;\r\n    private _hasLegacyInitializers = false;\r\n    private _queue = [];\r\n\r\n    /**\r\n    * The array of telemetry initializers to call before sending each telemetry item.\r\n    */\r\n\r\n    public addTelemetryInitializers(callBack: (env: IEnvelope) => boolean | void) {\r\n\r\n        // Add initializer to current processing only if there is any old telemetry initializer\r\n        if (!this._hasLegacyInitializers) {\r\n\r\n            this.appInsightsNew.addTelemetryInitializer(item => {\r\n                this._processLegacyInitializers(item); // setup call back for each legacy processor\r\n            })\r\n\r\n            this._hasLegacyInitializers = true;\r\n        }\r\n\r\n        this._queue.push(callBack);\r\n    }\r\n\r\n    private _processLegacyInitializers(item: ITelemetryItem): ITelemetryItem {\r\n\r\n        // instead of mapping new to legacy and then back again and repeating in channel, attach callback for channel to call\r\n        item.tags[ProcessLegacy] = this._queue;\r\n        return item;\r\n    }\r\n\r\n    constructor(snippet: Snippet, appInsightsNew: ApplicationInsights) {\r\n        this.config = AppInsightsDeprecated.getDefaultConfig(snippet.config);\r\n        this.appInsightsNew = appInsightsNew;\r\n        this.context = { addTelemetryInitializer: this.addTelemetryInitializers.bind(this) }\r\n    }\r\n\r\n    startTrackPage(name?: string) {\r\n        this.appInsightsNew.startTrackPage(name);\r\n    }\r\n\r\n    stopTrackPage(name?: string, url?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; }) {\r\n        this.appInsightsNew.stopTrackPage(name, url, properties); // update\r\n    }\r\n\r\n    trackPageView(name?: string, url?: string, properties?: {[key: string]: string }, measurements?: {[key: string]: number }, duration?: number) {\r\n        let telemetry: IPageViewTelemetry = {\r\n            name: name,\r\n            uri: url,\r\n            properties: properties,\r\n            measurements: measurements\r\n        };\r\n\r\n        // fix for props, measurements, duration\r\n        this.appInsightsNew.trackPageView(telemetry);\r\n    }\r\n\r\n    trackEvent(name: string, properties?: Object, measurements?: Object) {\r\n        this.appInsightsNew.trackEvent(<IEventTelemetry>{ name: name});\r\n    }\r\n\r\n    trackDependency(id: string, method: string, absoluteUrl: string, pathName: string, totalTime: number, success: boolean, resultCode: number) {\r\n        this.appInsightsNew.trackDependencyData(\r\n            <IDependencyTelemetry>{\r\n                id: id,\r\n                target: absoluteUrl,\r\n                type: pathName,\r\n                duration: totalTime,\r\n                properties: { HttpMethod: method },\r\n                success: success,\r\n                responseCode: resultCode\r\n            });\r\n    }\r\n\r\n    trackException(exception: Error, handledAt?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; }, severityLevel?: any) {\r\n        this.appInsightsNew.trackException(<IExceptionTelemetry>{\r\n            exception: exception\r\n        });\r\n    }\r\n\r\n    trackMetric(name: string, average: number, sampleCount?: number, min?: number, max?: number, properties?: { [name: string]: string; }) {\r\n        this.appInsightsNew.trackMetric(<IMetricTelemetry>{name: name, average: average, sampleCount: sampleCount, min: min, max: max});\r\n    }\r\n\r\n    trackTrace(message: string, properties?: { [name: string]: string; }, severityLevel?: any) {\r\n        this.appInsightsNew.trackTrace(<ITraceTelemetry>{ message: message, severityLevel: severityLevel });\r\n    }\r\n\r\n    flush(async?: boolean) {\r\n        this.appInsightsNew.flush(async);\r\n    }\r\n\r\n    setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string, storeInCookie?: boolean) {\r\n        this.appInsightsNew.context.user.setAuthenticatedUserContext(authenticatedUserId, accountId, storeInCookie);\r\n    }\r\n\r\n    clearAuthenticatedUserContext() {\r\n        this.appInsightsNew.context.user.clearAuthenticatedUserContext();\r\n    }\r\n\r\n    _onerror(message: string, url: string, lineNumber: number, columnNumber: number, error: Error) {\r\n        this.appInsightsNew._onerror(<IAutoExceptionTelemetry>{ message: message, url: url, lineNumber: lineNumber, columnNumber: columnNumber, error: error });\r\n    }\r\n\r\n\r\n    startTrackEvent(name: string) {\r\n        this.appInsightsNew.startTrackEvent(name);\r\n    }\r\n\r\n    stopTrackEvent(name: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; }) {\r\n        this.appInsightsNew.stopTrackEvent(name, properties, measurements);\r\n    }\r\n\r\n    downloadAndSetup?(config: IConfig): void {\r\n        throw new Error(\"downloadAndSetup not implemented in web SKU\");\r\n    }\r\n\r\n    public updateSnippetDefinitions(snippet: Snippet) {\r\n        // apply full appInsights to the global instance\r\n        // Note: This must be called before loadAppInsights is called\r\n        for (var field in this) {\r\n            if (typeof field === 'string') {\r\n                snippet[field as string] = this[field];\r\n            }\r\n        }\r\n    }\r\n\r\n    // note: these are split into methods to enable unit tests\r\n    public loadAppInsights() {\r\n\r\n        // initialize global instance of appInsights\r\n        //var appInsights = new Microsoft.ApplicationInsights.AppInsights(this.config);\r\n\r\n        // implement legacy version of trackPageView for 0.10<\r\n        if (this.config[\"iKey\"]) {\r\n            var originalTrackPageView = this.trackPageView;\r\n            this.trackPageView = (pagePath?: string, properties?: Object, measurements?: Object) => {\r\n                originalTrackPageView.apply(this, [null, pagePath, properties, measurements]);\r\n            }\r\n        }\r\n\r\n        // implement legacy pageView interface if it is present in the snippet\r\n        var legacyPageView = \"logPageView\";\r\n        if (typeof this.snippet[legacyPageView] === \"function\") {\r\n            this[legacyPageView] = (pagePath?: string, properties?: {[key: string]: string }, measurements?: {[key: string]: number }) => {\r\n                this.trackPageView(null, pagePath, properties, measurements);\r\n            }\r\n        }\r\n\r\n        // implement legacy event interface if it is present in the snippet\r\n        var legacyEvent = \"logEvent\";\r\n        if (typeof this.snippet[legacyEvent] === \"function\") {\r\n            this[legacyEvent] = (name: string, props?: Object, measurements?: Object) => {\r\n                this.trackEvent(name, props, measurements);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    private static getDefaultConfig(config?: any): any {\r\n        if (!config) {\r\n            config = <any>{};\r\n        }\r\n\r\n        // set default values\r\n        config.endpointUrl = config.endpointUrl || \"https://dc.services.visualstudio.com/v2/track\";\r\n        config.sessionRenewalMs = 30 * 60 * 1000;\r\n        config.sessionExpirationMs = 24 * 60 * 60 * 1000;\r\n        config.maxBatchSizeInBytes = config.maxBatchSizeInBytes > 0 ? config.maxBatchSizeInBytes : 102400; // 100kb\r\n        config.maxBatchInterval = !isNaN(config.maxBatchInterval) ? config.maxBatchInterval : 15000;\r\n        config.enableDebug = Util.stringToBoolOrDefault(config.enableDebug);\r\n        config.disableExceptionTracking = Util.stringToBoolOrDefault(config.disableExceptionTracking);\r\n        config.disableTelemetry = Util.stringToBoolOrDefault(config.disableTelemetry);\r\n        config.verboseLogging = Util.stringToBoolOrDefault(config.verboseLogging);\r\n        config.emitLineDelimitedJson = Util.stringToBoolOrDefault(config.emitLineDelimitedJson);\r\n        config.diagnosticLogInterval = config.diagnosticLogInterval || 10000;\r\n        config.autoTrackPageVisitTime = Util.stringToBoolOrDefault(config.autoTrackPageVisitTime);\r\n\r\n        if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {\r\n            config.samplingPercentage = 100;\r\n        }\r\n\r\n        config.disableAjaxTracking = Util.stringToBoolOrDefault(config.disableAjaxTracking);\r\n        config.maxAjaxCallsPerView = !isNaN(config.maxAjaxCallsPerView) ? config.maxAjaxCallsPerView : 500;\r\n\r\n        config.isBeaconApiDisabled = Util.stringToBoolOrDefault(config.isBeaconApiDisabled, true);\r\n        config.disableCorrelationHeaders = Util.stringToBoolOrDefault(config.disableCorrelationHeaders);\r\n        config.correlationHeaderExcludedDomains = config.correlationHeaderExcludedDomains || [\r\n            \"*.blob.core.windows.net\",\r\n            \"*.blob.core.chinacloudapi.cn\",\r\n            \"*.blob.core.cloudapi.de\",\r\n            \"*.blob.core.usgovcloudapi.net\"];\r\n        config.disableFlushOnBeforeUnload = Util.stringToBoolOrDefault(config.disableFlushOnBeforeUnload);\r\n        config.enableSessionStorageBuffer = Util.stringToBoolOrDefault(config.enableSessionStorageBuffer, true);\r\n        config.isRetryDisabled = Util.stringToBoolOrDefault(config.isRetryDisabled);\r\n        config.isCookieUseDisabled = Util.stringToBoolOrDefault(config.isCookieUseDisabled);\r\n        config.isStorageUseDisabled = Util.stringToBoolOrDefault(config.isStorageUseDisabled);\r\n        config.isBrowserLinkTrackingEnabled = Util.stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled);\r\n        config.enableCorsCorrelation = Util.stringToBoolOrDefault(config.enableCorsCorrelation);\r\n\r\n        return config;\r\n    }\r\n}\r\n\r\nexport interface IAppInsightsDeprecated {\r\n\r\n    /*\r\n    * Config object used to initialize AppInsights\r\n    */\r\n    config: IConfig;\r\n\r\n    context: ITelemetryContext;\r\n\r\n    /*\r\n    * Initialization queue. Contains functions to run when appInsights initializes\r\n    */\r\n    queue: Array<() => void>;\r\n\r\n    /**\r\n    * Starts timing how long the user views a page or other item. Call this when the page opens.\r\n    * This method doesn't send any telemetry. Call `stopTrackPage` to log the page when it closes.\r\n    * @param   name  A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n    */\r\n    startTrackPage(name?: string);\r\n\r\n    /**\r\n    * Logs how long a page or other item was visible, after `startTrackPage`. Call this when the page closes.\r\n    * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n    * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n    * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n    * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n    * @deprecated API is deprecated; supported only if input configuration specifies deprecated=true\r\n    */\r\n    stopTrackPage(name?: string, url?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; });\r\n\r\n    /**\r\n     * Logs that a page or other item was viewed.\r\n     * @param   name  The string you used as the name in `startTrackPage`. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     * @param   duration    number - the number of milliseconds it took to load the page. Defaults to undefined. If set to default value, page load time is calculated internally.\r\n     */\r\n    trackPageView(name?: string, url?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; }, duration?: number);\r\n\r\n    /**\r\n     * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n     * @param   name    A string that identifies this event uniquely within the document.\r\n     */\r\n    startTrackEvent(name: string);\r\n\r\n\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    stopTrackEvent(name: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; });\r\n\r\n    /**\r\n    * Log a user action or other occurrence.\r\n    * @param   name    A string to identify this event in the portal.\r\n    * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n    * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n    */\r\n    trackEvent(name: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; });\r\n\r\n    /**\r\n     * Log a dependency call\r\n     * @param id    unique id, this is used by the backend o correlate server requests. Use Util.newId() to generate a unique Id.\r\n     * @param method    represents request verb (GET, POST, etc.)\r\n     * @param absoluteUrl   absolute url used to make the dependency request\r\n     * @param pathName  the path part of the absolute url\r\n     * @param totalTime total request time\r\n     * @param success   indicates if the request was sessessful\r\n     * @param resultCode    response code returned by the dependency request\r\n     */\r\n    trackDependency(id: string, method: string, absoluteUrl: string, pathName: string, totalTime: number, success: boolean, resultCode: number);\r\n\r\n    /**\r\n     * Log an exception you have caught.\r\n     * @param   exception   An Error from a catch clause, or the string error message.\r\n     * @param   handledAt   Not used\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     * @param   severityLevel   SeverityLevel - severity level\r\n     */\r\n    trackException(exception: Error, handledAt?: string, properties?: { [name: string]: string; }, measurements?: { [name: string]: number; }, severityLevel?: SeverityLevel);\r\n\r\n    /**\r\n     * Log a numeric value that is not associated with a specific event. Typically used to send regular reports of performance indicators.\r\n     * To send a single measurement, use just the first two parameters. If you take measurements very frequently, you can reduce the\r\n     * telemetry bandwidth by aggregating multiple measurements and sending the resulting average at intervals.\r\n     * @param   name    A string that identifies the metric.\r\n     * @param   average Number representing either a single measurement, or the average of several measurements.\r\n     * @param   sampleCount The number of measurements represented by the average. Defaults to 1.\r\n     * @param   min The smallest measurement in the sample. Defaults to the average.\r\n     * @param   max The largest measurement in the sample. Defaults to the average.\r\n     */\r\n    trackMetric(name: string, average: number, sampleCount?: number, min?: number, max?: number, properties?: { [name: string]: string; });\r\n\r\n    /**\r\n    * Log a diagnostic message.\r\n    * @param   message A message string\r\n    * @param   properties  map[string, string] - additional data used to filter traces in the portal. Defaults to empty.\r\n    * @param   severityLevel   SeverityLevel - severity level\r\n    */\r\n    trackTrace(message: string, properties?: { [name: string]: string; }, severityLevel?: SeverityLevel);\r\n\r\n\r\n    /**\r\n     * Immediately send all queued telemetry.\r\n     * @param {boolean} async - If flush should be call asynchronously\r\n     */\r\n    flush(async?: boolean);\r\n\r\n\r\n    /**\r\n    * Sets the autheticated user id and the account id in this session.\r\n    * User auth id and account id should be of type string. They should not contain commas, semi-colons, equal signs, spaces, or vertical-bars.\r\n    *\r\n    * @param authenticatedUserId {string} - The authenticated user id. A unique and persistent string that represents each authenticated user in the service.\r\n    * @param accountId {string} - An optional string to represent the account associated with the authenticated user.\r\n    */\r\n    setAuthenticatedUserContext(authenticatedUserId: string, accountId?: string, storeInCookie?: boolean);\r\n\r\n\r\n    /**\r\n     * Clears the authenticated user id and the account id from the user context.\r\n     */\r\n    clearAuthenticatedUserContext();\r\n\r\n    /*\r\n    * Downloads and initializes AppInsights. You can override default script download location by specifying url property of `config`.\r\n    */\r\n    downloadAndSetup?(config: IConfig): void;\r\n\r\n    /**\r\n     * The custom error handler for Application Insights\r\n     * @param {string} message - The error message\r\n     * @param {string} url - The url where the error was raised\r\n     * @param {number} lineNumber - The line number where the error was raised\r\n     * @param {number} columnNumber - The column number for the line where the error was raised\r\n     * @param {Error}  error - The Error object\r\n     */\r\n    _onerror(message: string, url: string, lineNumber: number, columnNumber: number, error: Error);\r\n}\r\n\r\nexport interface ITelemetryContext {\r\n\r\n    /**\r\n    * Adds a telemetry initializer to the collection. Telemetry initializers will be called one by one,\r\n    * in the order they were added, before the telemetry item is pushed for sending.\r\n    * If one of the telemetry initializers returns false or throws an error then the telemetry item will not be sent.\r\n    */\r\n   addTelemetryInitializer(telemetryInitializer: (envelope: IEnvelope) => boolean | void);\r\n}\r\n"]}