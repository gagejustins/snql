{"version":3,"file":"ApplicationInsightsContainer.js","sourceRoot":"","sources":["../src/ApplicationInsightsContainer.ts"],"names":[],"mappings":"AAAA,OAAO,EAA0B,qBAAqB,EAAE,MAAM,iCAAiC,CAAC;AAChG,OAAO,EAAE,cAAc,IAAI,mBAAmB,EAAiC,MAAM,kBAAkB,CAAC;AAExG;IAAA;IAsBA,CAAC;IApBiB,2CAAc,GAA5B,UAA6B,OAAgB,EAAE,OAAe;QAC1D,IAAI,cAAc,GAAG,IAAI,mBAAmB,CAAC,OAAO,CAAC,CAAC;QACtD,IAAI,UAAU,GAAG,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAEhD,wBAAwB;QACxB,uIAAuI;QACvI,mHAAmH;QACnH,4FAA4F;QAE5F,EAAE,CAAC,CAAC,OAAO,KAAK,GAAG,CAAC,CAAC,CAAC;YAClB,cAAc,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;YACjD,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAC3C,MAAM,CAAC,cAAc,CAAC,CAAC,oCAAoC;QAC/D,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,MAAM,GAAG,IAAI,qBAAqB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC,CAAC,iDAAiD;YAClH,MAAM,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;YACzC,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;IACL,CAAC;IACL,mCAAC;AAAD,CAAC,AAtBD,IAsBC","sourcesContent":["import { IAppInsightsDeprecated, AppInsightsDeprecated } from \"./ApplicationInsightsDeprecated\";\r\nimport { Initialization as ApplicationInsights, Snippet, IApplicationInsights } from \"./Initialization\";\r\n\r\nexport class ApplicationInsightsContainer {\r\n\r\n    public static getAppInsights(snippet: Snippet, version: number) : IApplicationInsights | IAppInsightsDeprecated {\r\n        let initialization = new ApplicationInsights(snippet);\r\n        let legacyMode = version !== 2.0 ? true : false;\r\n\r\n        // Two target scenarios:\r\n        // 1. Customer runs v1 snippet + runtime. If customer updates just cdn location to new SDK, it will run in compat mode so old apis work\r\n        // 2. Customer updates to new snippet (that uses cdn location to new SDK. This is same as a new customer onboarding\r\n        // and all api signatures are expected to map to new SDK. Note new snippet specifies version\r\n\r\n        if (version === 2.0) {\r\n            initialization.updateSnippetDefinitions(snippet);\r\n            initialization.loadAppInsights(legacyMode);\r\n            return initialization; // default behavior with new snippet\r\n        } else {\r\n            let legacy = new AppInsightsDeprecated(snippet, initialization); // target scenario old snippet + updated endpoint\r\n            legacy.updateSnippetDefinitions(snippet);\r\n            initialization.loadAppInsights(legacyMode);\r\n            return legacy;\r\n        }\r\n    }\r\n}\r\n"]}