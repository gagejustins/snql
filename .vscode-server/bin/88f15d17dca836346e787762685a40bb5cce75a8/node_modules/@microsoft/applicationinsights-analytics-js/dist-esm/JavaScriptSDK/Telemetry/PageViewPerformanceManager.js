// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { Util, DateTimeUtils } from '@microsoft/applicationinsights-common';
import { LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';
/**
* Class encapsulates sending page view performance telemetry.
*/
var PageViewPerformanceManager = /** @class */ (function () {
    function PageViewPerformanceManager(core) {
        this.MAX_DURATION_ALLOWED = 3600000; // 1h
        if (core) {
            this._logger = core.logger;
        }
    }
    PageViewPerformanceManager.prototype.populatePageViewPerformanceEvent = function (pageViewPerformance) {
        pageViewPerformance.isValid = false;
        /*
         * http://www.w3.org/TR/navigation-timing/#processing-model
         *  |-navigationStart
         *  |             |-connectEnd
         *  |             ||-requestStart
         *  |             ||             |-responseStart
         *  |             ||             |              |-responseEnd
         *  |             ||             |              |
         *  |             ||             |              |         |-loadEventEnd
         *  |---network---||---request---|---response---|---dom---|
         *  |--------------------------total----------------------|
         */
        var timing = this.getPerformanceTiming();
        if (timing) {
            var total = DateTimeUtils.GetDuration(timing.navigationStart, timing.loadEventEnd);
            var network = DateTimeUtils.GetDuration(timing.navigationStart, timing.connectEnd);
            var request = DateTimeUtils.GetDuration(timing.requestStart, timing.responseStart);
            var response = DateTimeUtils.GetDuration(timing.responseStart, timing.responseEnd);
            var dom = DateTimeUtils.GetDuration(timing.responseEnd, timing.loadEventEnd);
            if (total == 0) {
                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ErrorPVCalc, "error calculating page view performance.", { total: total, network: network, request: request, response: response, dom: dom });
            }
            else if (!this.shouldCollectDuration(total, network, request, response, dom)) {
                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.InvalidDurationValue, "Invalid page load duration value. Browser perf data won't be sent.", { total: total, network: network, request: request, response: response, dom: dom });
            }
            else if (total < Math.floor(network) + Math.floor(request) + Math.floor(response) + Math.floor(dom)) {
                // some browsers may report individual components incorrectly so that the sum of the parts will be bigger than total PLT
                // in this case, don't report client performance from this page
                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.ClientPerformanceMathError, "client performance math error.", { total: total, network: network, request: request, response: response, dom: dom });
            }
            else {
                pageViewPerformance.durationMs = total;
                // // convert to timespans
                pageViewPerformance.perfTotal = pageViewPerformance.duration = Util.msToTimeSpan(total);
                pageViewPerformance.networkConnect = Util.msToTimeSpan(network);
                pageViewPerformance.sentRequest = Util.msToTimeSpan(request);
                pageViewPerformance.receivedResponse = Util.msToTimeSpan(response);
                pageViewPerformance.domProcessing = Util.msToTimeSpan(dom);
                pageViewPerformance.isValid = true;
            }
        }
    };
    PageViewPerformanceManager.prototype.getPerformanceTiming = function () {
        if (this.isPerformanceTimingSupported()) {
            return window.performance.timing;
        }
        return null;
    };
    /**
    * Returns true is window performance timing API is supported, false otherwise.
    */
    PageViewPerformanceManager.prototype.isPerformanceTimingSupported = function () {
        return typeof window != "undefined" && window.performance && window.performance.timing;
    };
    /**
    * As page loads different parts of performance timing numbers get set. When all of them are set we can report it.
    * Returns true if ready, false otherwise.
    */
    PageViewPerformanceManager.prototype.isPerformanceTimingDataReady = function () {
        var timing = window.performance.timing;
        return timing.domainLookupStart > 0
            && timing.navigationStart > 0
            && timing.responseStart > 0
            && timing.requestStart > 0
            && timing.loadEventEnd > 0
            && timing.responseEnd > 0
            && timing.connectEnd > 0
            && timing.domLoading > 0;
    };
    /**
    * This method tells if given durations should be excluded from collection.
    */
    PageViewPerformanceManager.prototype.shouldCollectDuration = function () {
        var durations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            durations[_i] = arguments[_i];
        }
        // a full list of Google crawlers user agent strings - https://support.google.com/webmasters/answer/1061943?hl=en
        var botAgentNames = ['googlebot', 'adsbot-google', 'apis-google', 'mediapartners-google'];
        var userAgent = navigator.userAgent;
        var isGoogleBot = false;
        if (userAgent) {
            for (var i_1 = 0; i_1 < botAgentNames.length; i_1++) {
                isGoogleBot = isGoogleBot || userAgent.toLowerCase().indexOf(botAgentNames[i_1]) !== -1;
            }
        }
        if (isGoogleBot) {
            // Don't report durations for GoogleBot, it is returning invalid values in performance.timing API.
            return false;
        }
        else {
            // for other page views, don't report if it's outside of a reasonable range
            for (var i = 0; i < durations.length; i++) {
                if (durations[i] >= this.MAX_DURATION_ALLOWED) {
                    return false;
                }
            }
        }
        return true;
    };
    return PageViewPerformanceManager;
}());
export { PageViewPerformanceManager };
//# sourceMappingURL=PageViewPerformanceManager.js.map