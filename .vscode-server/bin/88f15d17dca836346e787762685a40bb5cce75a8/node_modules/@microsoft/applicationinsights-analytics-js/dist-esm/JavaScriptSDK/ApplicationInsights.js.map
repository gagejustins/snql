{"version":3,"file":"ApplicationInsights.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/ApplicationInsights.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,OAAO,EACM,IAAI,EAAE,mBAAmB,EAAgB,QAAQ,EAAE,oBAAoB,EAAE,KAAK,IAAI,cAAc,EACzG,oBAAoB,EAAE,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,KAAK,EAG7D,oBAAoB,EAAE,aAAa,EAEnC,0BAA0B,EAC7B,MAAM,uCAAuC,CAAC;AAE/C,OAAO,EAEe,SAAS,EACR,eAAe,EAAE,kBAAkB,GACzD,MAAM,wCAAwC,CAAC;AAChD,OAAO,EAAE,eAAe,EAAwB,MAAM,6BAA6B,CAAC;AACpF,OAAO,EAAE,oBAAoB,EAAE,MAAM,kCAAkC,CAAC;AACxE,OAAO,EAAE,0BAA0B,EAAE,MAAM,wCAAwC,CAAC;AAMpF,YAAY,CAAC;AAEb,IAAM,gBAAgB,GAAW,UAAU,CAAC;AAE5C;IA4BI;QAzBO,eAAU,GAAW,8BAA8B,CAAC,CAAC,iCAAiC;QACtF,aAAQ,GAAW,GAAG,CAAC,CAAC,6CAA6C;QAIrE,qBAAgB,GAAG,GAAG,CAAC,CAAC,wGAAwG;QAE/H,mBAAc,GAAY,KAAK,CAAC;QAYxC,0CAA0C;QAC1C,0EAA0E;QAC1E,kCAAkC;QAClC,iEAAiE;QACzD,uBAAkB,GAAW,CAAC,CAAC;QAGnC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAEa,oCAAgB,GAA9B,UAA+B,MAAgB;QAC3C,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACV,MAAM,GAAG,EAAE,CAAC;QAChB,CAAC;QAED,qBAAqB;QACrB,MAAM,CAAC,gBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QACzC,MAAM,CAAC,mBAAmB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QACjD,MAAM,CAAC,wBAAwB,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;QAC9F,MAAM,CAAC,sBAAsB,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QAC1F,MAAM,CAAC,wBAAwB,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;QAE9F,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,MAAM,CAAC,kBAAkB,IAAI,CAAC,IAAI,MAAM,CAAC,kBAAkB,IAAI,GAAG,CAAC,CAAC,CAAC;YACzG,MAAM,CAAC,kBAAkB,GAAG,GAAG,CAAC;QACpC,CAAC;QAED,MAAM,CAAC,mBAAmB,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACpF,MAAM,CAAC,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QACtF,MAAM,CAAC,4BAA4B,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;QACtG,MAAM,CAAC,uBAAuB,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;QAC5F,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC;QAE5C,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAEM,8CAAgB,GAAvB,UAAwB,GAAmB;QACvC,IAAI,aAAa,GAAG,KAAK,CAAC;QAC1B,IAAI,0BAA0B,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC;QACpE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,0BAA0B,EAAE,EAAE,CAAC,EAAE,CAAC;YAClD,IAAI,oBAAoB,GAAG,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YAC1D,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC;oBACD,EAAE,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;wBACpD,aAAa,GAAG,IAAI,CAAC;wBACrB,KAAK,CAAC;oBACV,CAAC;gBACL,CAAC;gBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACT,uEAAuE;oBACvE,wBAAwB;oBACxB,IAAI,CAAC,OAAO,CAAC,aAAa,CACtB,eAAe,CAAC,QAAQ,EAAE,kBAAkB,CAAC,0BAA0B,EAAE,yEAAyE,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAC7K,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;gBAC3C,CAAC;YACL,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,aAAa,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACnE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC3C,CAAC;IACL,CAAC;IAEM,2CAAa,GAApB,UAAqB,IAAsB;QACvC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC5B,CAAC;IAEM,wCAAU,GAAjB,UAAkB,KAAsB,EAAE,gBAAoC;QAC1E,IAAI,CAAC;YACD,IAAI,aAAa,GAAG,oBAAoB,CAAC,MAAM,CAC3C,KAAK,EACL,cAAc,CAAC,QAAQ,EACvB,cAAc,CAAC,YAAY,EAC3B,IAAI,CAAC,OAAO,EACZ,gBAAgB,CACnB,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACnC,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,OAAO,EAC9C,kBAAkB,CAAC,gBAAgB,EACnC,kDAAkD,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAC7E,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED;;;MAGE;IACK,6CAAe,GAAtB,UAAuB,IAAY;QAC/B,IAAI,CAAC;YACD,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,EAC/C,kBAAkB,CAAC,qBAAqB,EACxC,uDAAuD,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAClF,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,4CAAc,GAArB,UAAsB,IAAY,EAAE,UAAsC,EAAE,YAAwC;QAChH,IAAI,CAAC;YACD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,sDAAsD;QACjH,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,EAC/C,kBAAkB,CAAC,oBAAoB,EACvC,sDAAsD,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EACjF,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,wCAAU,GAAjB,UAAkB,KAAsB,EAAE,gBAAoC;QAC1E,IAAI,CAAC;YACD,IAAI,aAAa,GAAG,oBAAoB,CAAC,MAAM,CAC3C,KAAK,EACL,KAAK,CAAC,QAAQ,EACd,KAAK,CAAC,YAAY,EAClB,IAAI,CAAC,OAAO,EACZ,gBAAgB,CAAC,CAAC;YAEtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACnC,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,OAAO,EAC9C,kBAAkB,CAAC,gBAAgB,EACnC,kDAAkD,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAC7E,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED;;;;;;;;;;OAUG;IACI,yCAAW,GAAlB,UAAmB,MAAwB,EAAE,gBAAoC;QAC7E,IAAI,CAAC;YACD,IAAI,aAAa,GAAG,oBAAoB,CAAC,MAAM,CAC3C,MAAM,EACN,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,YAAY,EACnB,IAAI,CAAC,OAAO,EACZ,gBAAgB,CACnB,CAAC;YAEF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QACnC,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,EAC/C,kBAAkB,CAAC,iBAAiB,EACpC,oDAAoD,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAC/E,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,2CAAa,GAApB,UAAqB,QAA6B,EAAE,gBAAoC;QACpF,IAAI,CAAC;YACD,IAAM,IAAI,GAAG,QAAQ,IAAI,EAAE,CAAC;YAC5B,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,IAAI,uBAAM,IAAI,CAAC,UAAU,EAAK,IAAI,CAAC,YAAY,EAAK,gBAAgB,EAAE,CAAC;YAE3G,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBACrC,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YAC3E,CAAC;QACL,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,aAAa,CACtB,eAAe,CAAC,QAAQ,EACxB,kBAAkB,CAAC,aAAa,EAChC,yDAAyD,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EACpF,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,kDAAoB,GAA3B,UAA4B,QAAoC,EAAE,UAAmC,EAAE,gBAAyC;QAC5I,EAAE,CAAC,CAAC,OAAO,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC;YAClC,QAAQ,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC1F,CAAC;QAED,IAAI,aAAa,GAAG,oBAAoB,CAAC,MAAM,CAC3C,QAAQ,EACR,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,YAAY,EACrB,IAAI,CAAC,OAAO,EACZ,UAAU,EACV,gBAAgB,CAAC,CAAC;QAEtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAE/B,uBAAuB;QACvB,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACI,6DAA+B,GAAtC,UAAuC,mBAA0D,EAAE,UAAmC,EAAE,gBAAyC;QAC7K,IAAI,aAAa,GAAG,oBAAoB,CAAC,MAAM,CAC3C,mBAAmB,EACnB,mBAAmB,CAAC,QAAQ,EAC5B,mBAAmB,CAAC,YAAY,EAChC,IAAI,CAAC,OAAO,EACZ,UAAU,EACV,gBAAgB,CAAC,CAAC;QAEtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACI,sDAAwB,GAA/B,UAAgC,mBAAkD,EAAE,gBAAoC;QACpH,IAAI,CAAC;YACD,IAAI,CAAC,2BAA2B,CAAC,gCAAgC,CAAC,mBAAmB,CAAC,CAAC;YACvF,IAAI,CAAC,+BAA+B,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;QAChF,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,aAAa,CACtB,eAAe,CAAC,QAAQ,EACxB,kBAAkB,CAAC,aAAa,EAChC,oEAAoE,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAC/F,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,4CAAc,GAArB,UAAsB,IAAa;QAC/B,IAAI,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC3B,IAAI,GAAG,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,CAAC;YAC1D,CAAC;YAED,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,aAAa,CACtB,eAAe,CAAC,QAAQ,EACxB,kBAAkB,CAAC,gBAAgB,EACnC,yDAAyD,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EACpF,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAGD;;;;;;;OAOG;IACI,2CAAa,GAApB,UAAqB,IAAa,EAAE,GAAY,EAAE,UAAsC,EAAE,WAAuC;QAC7H,IAAI,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC3B,IAAI,GAAG,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,CAAC;YAC1D,CAAC;YAED,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC1B,GAAG,GAAG,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC;YACxD,CAAC;YAED,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;YAE5D,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBACrC,IAAI,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YACjE,CAAC;QACL,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,aAAa,CACtB,eAAe,CAAC,QAAQ,EACxB,kBAAkB,CAAC,eAAe,EAClC,yDAAyD,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EACpF,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED;;;;;MAKE;IACK,mDAAqB,GAA5B,UAA6B,SAA8B,EAAE,gBAAyC,EAAE,gBAAyC;QAC7I,IAAM,cAAc,GAAG,IAAI,SAAS,CAChC,IAAI,CAAC,OAAO,EACZ,SAAS,CAAC,SAAS,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EACnD,SAAS,CAAC,UAAU,EACpB,SAAS,CAAC,YAAY,EACtB,SAAS,CAAC,aAAa,EACvB,SAAS,CAAC,EAAE,CACf,CAAC,WAAW,EAAE,CAAC;QAEhB,IAAI,aAAa,GAAmB,oBAAoB,CAAC,MAAM,CAC3D,cAAc,EACd,SAAS,CAAC,QAAQ,EAClB,SAAS,CAAC,YAAY,EACtB,IAAI,CAAC,OAAO,EACZ,gBAAgB,EAChB,gBAAgB,CACnB,CAAC;QACF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACnC,CAAC;IAED;;;;;;;;OAQG;IACI,4CAAc,GAArB,UAAsB,SAA8B,EAAE,gBAAoC;QACtF,IAAI,CAAC;YACD,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;QAC5D,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,OAAO,CAAC,aAAa,CACtB,eAAe,CAAC,QAAQ,EACxB,kBAAkB,CAAC,oBAAoB,EACvC,0DAA0D,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EACrF,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,sCAAQ,GAAf,UAAgB,SAAkC;QAC9C,IAAI,CAAC;YACD,IAAM,YAAU,GAAG;gBACf,GAAG,EAAE,CAAC,SAAS,IAAI,SAAS,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG;gBACjD,UAAU,EAAE,SAAS,CAAC,UAAU;gBAChC,YAAY,EAAE,SAAS,CAAC,YAAY;gBACpC,OAAO,EAAE,SAAS,CAAC,OAAO;aAC7B,CAAC;YAEF,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,YAAY,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC3H,IAAI,CAAC,kBAAkB,CAAC,YAAU,CAAC,GAAG,CAAC,CAAC;YAC5C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACjC,IAAM,KAAK,GAAG,iBAAiB,GAAG,YAAU,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,UAAU,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC;oBACpH,SAAS,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;oBAC/C,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;gBAClC,CAAC;gBACD,IAAI,CAAC,cAAc,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,aAAa,EAAE,aAAa,CAAC,KAAK,EAAE,EAAE,YAAU,CAAC,CAAC;YACxG,CAAC;QACL,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,IAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;gBACjC,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC;gBACvD,CAAC,CAAC,MAAM,CAAC;YAEb,IAAI,CAAC,OAAO,CAAC,aAAa,CACtB,eAAe,CAAC,QAAQ,EACxB,kBAAkB,CAAC,0BAA0B,EAC7C,6EAA6E;kBAC3E,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAC1B,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,CACxD,CAAC;QACN,CAAC;IACL,CAAC;IAEM,qDAAuB,GAA9B,UAA+B,oBAA8D;QACzF,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC3D,CAAC;IAEO,yCAAW,GAAnB,UAAoB,MAAgC,EAAE,IAAsB,EAAE,UAAqB;QAAnG,iBAqKC;QAnKG,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC;QACX,CAAC;QAED,EAAE,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACtC,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAI,CAAC,aAAa,GAAG;YACjB,kBAAkB,EAAE,MAAM,CAAC,kBAAkB;YAC7C,WAAW,EAAE,MAAM,CAAC,WAAW,IAAI,+CAA+C;SACrF,CAAC;QAEF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAU,EAAE,CAAC;QAExI,mCAAmC;QACnC,IAAI,QAAQ,GAAY,mBAAmB,CAAC,gBAAgB,EAAE,CAAC;QAC/D,EAAE,CAAC,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,QAAQ,CAAC,CAAC,CAAC;gBACzB,oDAAoD;gBACpD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,oBAAoB,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;YACzG,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;gBACrB,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,QAAQ,CAAC,CAAC,CAAC;oBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;wBAC1C,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAChD,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QAED,sCAAsC;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1B,CAAC;QAED,sCAAsC;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1B,CAAC;QAED,IAAI,aAAa,GAAqB;YAClC,kBAAkB,EAAE,cAAM,OAAA,MAAM,CAAC,kBAAkB,EAAzB,CAAyB;YACnD,SAAS,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,EAAzC,CAAyC;YAC1D,gBAAgB,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,gBAAgB,EAAvD,CAAuD;YAC/E,mBAAmB,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,mBAAmB,IAAI,MAAM,CAAC,mBAAmB,EAA7D,CAA6D;YACxF,UAAU,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,kBAAkB,IAAI,MAAM,CAAC,kBAAkB,EAA3D,CAA2D;YAC7E,YAAY,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,YAAY,EAA/C,CAA+C;YACnE,YAAY,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,YAAY,EAA/C,CAA+C;YACnE,4BAA4B,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,4BAA4B,IAAI,MAAM,CAAC,4BAA4B,EAA/E,CAA+E;YACnH,KAAK,EAAE,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,EAAjC,CAAiC;SACjD,CAAA;QAED,IAAI,CAAC,2BAA2B,GAAG,IAAI,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7E,IAAI,CAAC,gBAAgB,GAAG,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,wBAAwB,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,2BAA2B,CAAC,CAAC;QACrI,IAAI,CAAC,qBAAqB,GAAG,IAAI,oBAAoB,CAAC,IAAI,CAAC,OAAO,EAAE,UAAC,QAAQ,EAAE,OAAO,EAAE,aAAa,IAAK,OAAA,KAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,OAAO,EAAE,aAAa,CAAC,EAAzD,CAAyD,CAAC,CAAA;QAEpK,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC;QACjC,IAAI,CAAC,gCAAgC,CAAC,aAAa,CAAC,CAAC;QAGrD,IAAI,CAAC,cAAc,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAC7D,IAAI,CAAC,cAAc,CAAC,MAAM;YACtB,UAAC,IAAa,EAAE,GAAY,EAAE,QAAiB,EAAE,UAAsC;gBACnF,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBACd,UAAU,GAAG,EAAE,CAAC;gBACpB,CAAC;gBAED,UAAU,CAAC,gBAAgB,CAAC,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACnD,KAAI,CAAC,UAAU,CAAkB,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC;YAC7E,CAAC,CAAA;QAEL,8BAA8B;QAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;QAC/D,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,UAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY;YAEtE,8EAA8E;YAC9E,EAAE,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC1C,UAAU,GAAG,EAAE,CAAC;YACpB,CAAC;YACD,UAAU,CAAC,gBAAgB,CAAC,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;YAEnD,IAAI,YAAY,GAAuB;gBACnC,IAAI,EAAE,IAAI;gBACV,GAAG,EAAE,GAAG;gBACR,UAAU,EAAE,UAAU;gBACtB,YAAY,EAAE,YAAY;aAC7B,CAAC;YAEF,KAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;QAC5C,CAAC,CAAA;QAED,IAAM,QAAQ,GAAiB,IAAI,CAAC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,wBAAwB,KAAK,KAAK;YAC9C,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,CAAC;YACzC,8EAA8E;YAC9E,IAAM,SAAO,GAAG,SAAS,CAAC;YAC1B,IAAM,iBAAe,GAAG,MAAM,CAAC,SAAO,CAAC,CAAC;YACxC,MAAM,CAAC,OAAO,GAAG,UAAU,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAE,KAAK;gBACpE,IAAM,OAAO,GAAG,iBAAe,IAAS,iBAAe,CAAC,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;gBACvG,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;oBACnB,QAAQ,CAAC,QAAQ,CAAC;wBACd,OAAO,EAAE,OAAO;wBAChB,GAAG,EAAE,GAAG;wBACR,UAAU,EAAE,UAAU;wBACtB,YAAY,EAAE,YAAY;wBAC1B,KAAK,EAAE,KAAK;qBACf,CAAC,CAAC;gBACP,CAAC;gBAED,MAAM,CAAC,OAAO,CAAC;YACnB,CAAC,CAAA;YACD,IAAI,CAAC,MAAM,CAAC,yBAAyB,GAAG,IAAI,CAAC;QACjD,CAAC;QAED;;WAEG;QACH,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,KAAK,IAAI;eACzC,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,SAAS,KAAK,UAAU,IAAI,OAAO,OAAO,CAAC,YAAY,KAAK,UAAU;eACpH,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;YAChC,IAAM,OAAK,GAAG,IAAI,CAAC;YACnB,6BAA6B;YAC7B,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;gBACxB,EAAE,CAAC,CAAC,SAAS,CAAC,UAAU,KAAK,0BAA0B,CAAC,CAAC,CAAC;oBACtD,KAAI,CAAC,WAAW,GAAG,SAAwC,CAAC;gBAChE,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,OAAO,CAAC,SAAS,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA;gBACvB,IAAI,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBACnC,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,OAAK,CAAC,MAAM,CAAC,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC;gBACvE,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,OAAK,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC;gBAC5E,MAAM,CAAC,GAAG,CAAC;YACf,CAAC,EAL0B,CAK1B,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAEtB,OAAO,CAAC,YAAY,GAAG,CAAE,UAAA,CAAC,IAAI,OAAA;gBAC1B,IAAI,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBACnC,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,OAAK,CAAC,MAAM,CAAC,UAAU,GAAG,cAAc,CAAC,CAAC,CAAC;gBAC1E,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,OAAK,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC;gBAC5E,MAAM,CAAC,GAAG,CAAC;YACf,CAAC,EAL6B,CAK7B,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAEzB,MAAM,CAAC,gBAAgB,CAAC,OAAK,CAAC,MAAM,CAAC,UAAU,GAAG,UAAU,EAAC;gBACzD,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,OAAK,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC;YAChF,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,gBAAgB,CAAC,OAAK,CAAC,MAAM,CAAC,UAAU,GAAG,gBAAgB,EAAE;gBAChE,EAAE,CAAC,CAAC,OAAK,CAAC,WAAW,IAAI,OAAK,CAAC,WAAW,CAAC,OAAO,IAAI,OAAK,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;oBAC7F,OAAK,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;oBAChE,OAAK,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAC7E,CAAC;gBACD,UAAU,CAAC;oBACP,2EAA2E;oBAC3E,OAAK,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,8DAA8D;gBACtI,CAAC,EAAE,OAAK,CAAC,gBAAgB,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACK,gDAAkB,GAA1B,UAA2B,QAAgB,EAAE,OAAe,EAAE,aAAqB;QAC/E,IAAI,UAAU,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;QAC1D,IAAI,CAAC,WAAW,CAAC;YACb,IAAI,EAAE,eAAe;YACrB,OAAO,EAAE,aAAa;YACtB,GAAG,EAAE,aAAa;YAClB,GAAG,EAAE,aAAa;YAClB,WAAW,EAAE,CAAC;SACjB,EAAE,UAAU,CAAC,CAAC;IACnB,CAAC;IAEO,8DAAgC,GAAxC,UAAyC,aAA+B;QACpE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC;YAChD,IAAM,kBAAgB,GAAG,CAAC,sBAAsB,EAAE,iBAAiB,CAAC,CAAC;YACrE,IAAI,uBAAuB,GAAG,UAAC,QAAwB;gBACnD,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,KAAK,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACtD,IAAI,UAAU,GAAG,QAAQ,CAAC,QAAgC,CAAC;oBAC3D,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBACb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;4BAC/C,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gCAC3E,MAAM,CAAC,KAAK,CAAC;4BACjB,CAAC;wBACL,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC,CAAA;YAED,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,CAAA;QAC1D,CAAC;IACL,CAAC;IAEO,sDAAwB,GAAhC,UAAiC,oBAAkE;QAC/F,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC3D,CAAC;IAEO,gDAAkB,GAA1B,UAA2B,GAAW;QAClC,IAAM,SAAS,GAA4B;YACvC,OAAO,EAAE,oJAAoJ;YAC7J,GAAG,EAAE,GAAG;YACR,UAAU,EAAE,CAAC;YACb,YAAY,EAAE,CAAC;YACf,KAAK,EAAE,SAAS;SACnB,CAAC;QACF,IAAM,aAAa,GAAmB,oBAAoB,CAAC,MAAM,CAC7D,SAAS,EACT,SAAS,CAAC,QAAQ,EAClB,SAAS,CAAC,YAAY,EACtB,IAAI,CAAC,OAAO,EACZ,EAAE,GAAG,EAAE,GAAG,EAAE,CACf,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACnC,CAAC;IAtoBa,2BAAO,GAAG,OAAO,CAAC,CAAC,8BAA8B;IAuoBnE,0BAAC;CAAA,AAxoBD,IAwoBC;SAxoBY,mBAAmB;AA0oBhC;;GAEG;AACH;IAOI,gBAAY,MAAyB,EAAE,IAAY;QAC/C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAEM,sBAAK,GAAZ,UAAa,IAAY;QACrB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,OAAO,CAAC,aAAa,CACtB,eAAe,CAAC,OAAO,EAAE,kBAAkB,CAAC,uBAAuB,EAAE,sEAAsE,EAC3I,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;QAC/C,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC;IACnC,CAAC;IAEM,qBAAI,GAAX,UAAY,IAAY,EAAE,GAAW,EAAE,UAAsC,EAAE,YAAwC;QACnH,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,OAAO,CAAC,aAAa,CACtB,eAAe,CAAC,OAAO,EAAE,kBAAkB,CAAC,sBAAsB,EAAE,gDAAgD,EACpH,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;QAC/C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC;YACpB,IAAI,QAAQ,GAAG,aAAa,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YACrD,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;QAC/D,CAAC;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;IACnC,CAAC;IAGL,aAAC;AAAD,CAAC,AAxCD,IAwCC","sourcesContent":["/**\r\n * ApplicationInsights.ts\r\n * @copyright Microsoft 2018\r\n */\r\n\r\nimport {\r\n    IConfig, Util, PageViewPerformance, IAppInsights, PageView, RemoteDependencyData, Event as EventTelemetry, IEventTelemetry,\r\n    TelemetryItemCreator, Metric, Exception, SeverityLevel, Trace, IDependencyTelemetry,\r\n    IExceptionTelemetry, ITraceTelemetry, IMetricTelemetry, IAutoExceptionTelemetry,\r\n    IPageViewTelemetryInternal, IPageViewTelemetry, IPageViewPerformanceTelemetry, IPageViewPerformanceTelemetryInternal,\r\n    ConfigurationManager, DateTimeUtils,\r\n    IExceptionInternal,\r\n    PropertiesPluginIdentifier\r\n} from \"@microsoft/applicationinsights-common\";\r\n\r\nimport {\r\n    IPlugin, IConfiguration, IAppInsightsCore,\r\n    ITelemetryPlugin, CoreUtils, ITelemetryItem,\r\n    IDiagnosticLogger, LoggingSeverity, _InternalMessageId, ICustomProperties,\r\n} from \"@microsoft/applicationinsights-core-js\";\r\nimport { PageViewManager, IAppInsightsInternal } from \"./Telemetry/PageViewManager\";\r\nimport { PageVisitTimeManager } from \"./Telemetry/PageVisitTimeManager\";\r\nimport { PageViewPerformanceManager } from './Telemetry/PageViewPerformanceManager';\r\nimport { ITelemetryConfig } from \"../JavaScriptSDK.Interfaces/ITelemetryConfig\";\r\n\r\n// For types only\r\nimport * as properties from \"@microsoft/applicationinsights-properties-js\";\r\n\r\n\"use strict\";\r\n\r\nconst durationProperty: string = \"duration\";\r\n\r\nexport class ApplicationInsights implements IAppInsights, ITelemetryPlugin, IAppInsightsInternal {\r\n    public static Version = \"2.1.1\"; // Not currently used anywhere\r\n    public initialize: (config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[]) => void;\r\n    public identifier: string = \"ApplicationInsightsAnalytics\"; // do not change name or priority\r\n    public priority: number = 180; // take from reserved priority range 100- 200\r\n    public config: IConfig;\r\n    public core: IAppInsightsCore;\r\n    public queue: (() => void)[];\r\n    public autoRoutePVDelay = 500; // ms; Time to wait after a route change before triggering a pageview to allow DOM changes to take place\r\n\r\n    private _isInitialized: boolean = false;\r\n    private _globalconfig: IConfiguration;\r\n    private _eventTracking: Timing;\r\n    private _pageTracking: Timing;\r\n    private _properties: properties.PropertiesPlugin;\r\n    protected _nextPlugin: ITelemetryPlugin;\r\n    protected _logger: IDiagnosticLogger; // Initialized by Core\r\n    protected _telemetryInitializers: { (envelope: ITelemetryItem): boolean | void; }[]; // Internal telemetry initializers.\r\n    protected _pageViewManager: PageViewManager;\r\n    protected _pageViewPerformanceManager: PageViewPerformanceManager;\r\n    protected _pageVisitTimeManager: PageVisitTimeManager;\r\n\r\n    // Counts number of trackAjax invokations.\r\n    // By default we only monitor X ajax call per view to avoid too much load.\r\n    // Default value is set in config.\r\n    // This counter keeps increasing even after the limit is reached.\r\n    private _trackAjaxAttempts: number = 0;\r\n\r\n    constructor() {\r\n        this.initialize = this._initialize.bind(this);\r\n    }\r\n\r\n    public static getDefaultConfig(config?: IConfig): IConfig {\r\n        if (!config) {\r\n            config = {};\r\n        }\r\n\r\n        // set default values\r\n        config.sessionRenewalMs = 30 * 60 * 1000;\r\n        config.sessionExpirationMs = 24 * 60 * 60 * 1000;\r\n        config.disableExceptionTracking = Util.stringToBoolOrDefault(config.disableExceptionTracking);\r\n        config.autoTrackPageVisitTime = Util.stringToBoolOrDefault(config.autoTrackPageVisitTime);\r\n        config.overridePageViewDuration = Util.stringToBoolOrDefault(config.overridePageViewDuration);\r\n\r\n        if (isNaN(config.samplingPercentage) || config.samplingPercentage <= 0 || config.samplingPercentage >= 100) {\r\n            config.samplingPercentage = 100;\r\n        }\r\n\r\n        config.isCookieUseDisabled = Util.stringToBoolOrDefault(config.isCookieUseDisabled);\r\n        config.isStorageUseDisabled = Util.stringToBoolOrDefault(config.isStorageUseDisabled);\r\n        config.isBrowserLinkTrackingEnabled = Util.stringToBoolOrDefault(config.isBrowserLinkTrackingEnabled);\r\n        config.enableAutoRouteTracking = Util.stringToBoolOrDefault(config.enableAutoRouteTracking);\r\n        config.namePrefix = config.namePrefix || \"\";\r\n\r\n        return config;\r\n    }\r\n\r\n    public processTelemetry(env: ITelemetryItem) {\r\n        var doNotSendItem = false;\r\n        var telemetryInitializersCount = this._telemetryInitializers.length;\r\n        for (var i = 0; i < telemetryInitializersCount; ++i) {\r\n            var telemetryInitializer = this._telemetryInitializers[i];\r\n            if (telemetryInitializer) {\r\n                try {\r\n                    if (telemetryInitializer.apply(null, [env]) === false) {\r\n                        doNotSendItem = true;\r\n                        break;\r\n                    }\r\n                } catch (e) {\r\n                    // log error but dont stop executing rest of the telemetry initializers\r\n                    // doNotSendItem = true;\r\n                    this._logger.throwInternal(\r\n                        LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"One of telemetry initializers failed, telemetry item will not be sent: \" + Util.getExceptionName(e),\r\n                        { exception: Util.dump(e) }, true);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!doNotSendItem && !CoreUtils.isNullOrUndefined(this._nextPlugin)) {\r\n            this._nextPlugin.processTelemetry(env);\r\n        }\r\n    }\r\n\r\n    public setNextPlugin(next: ITelemetryPlugin) {\r\n        this._nextPlugin = next;\r\n    }\r\n\r\n    public trackEvent(event: IEventTelemetry, customProperties?: ICustomProperties): void {\r\n        try {\r\n            let telemetryItem = TelemetryItemCreator.create<IEventTelemetry>(\r\n                event,\r\n                EventTelemetry.dataType,\r\n                EventTelemetry.envelopeType,\r\n                this._logger,\r\n                customProperties\r\n            );\r\n\r\n            this.core.track(telemetryItem);\r\n        } catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING,\r\n                _InternalMessageId.TrackTraceFailed,\r\n                \"trackTrace failed, trace will not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    /**\r\n      * Start timing an extended event. Call `stopTrackEvent` to log the event when it ends.\r\n      * @param   name    A string that identifies this event uniquely within the document.\r\n    */\r\n    public startTrackEvent(name: string) {\r\n        try {\r\n            this._eventTracking.start(name);\r\n        } catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.StartTrackEventFailed,\r\n                \"startTrackEvent failed, event will not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Log an extended event that you started timing with `startTrackEvent`.\r\n     * @param   name    The string you used to identify this event in `startTrackEvent`.\r\n     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    public stopTrackEvent(name: string, properties?: { [key: string]: string }, measurements?: { [key: string]: number }) {\r\n        try {\r\n            this._eventTracking.stop(name, undefined, properties); // Todo: Fix to pass measurements once type is updated\r\n        } catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.StopTrackEventFailed,\r\n                \"stopTrackEvent failed, event will not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Log a diagnostic message\r\n     * @param {ITraceTelemetry} trace\r\n     * @param ICustomProperties.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    public trackTrace(trace: ITraceTelemetry, customProperties?: ICustomProperties): void {\r\n        try {\r\n            let telemetryItem = TelemetryItemCreator.create<ITraceTelemetry>(\r\n                trace,\r\n                Trace.dataType,\r\n                Trace.envelopeType,\r\n                this._logger,\r\n                customProperties);\r\n\r\n            this.core.track(telemetryItem);\r\n        } catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.WARNING,\r\n                _InternalMessageId.TrackTraceFailed,\r\n                \"trackTrace failed, trace will not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Log a numeric value that is not associated with a specific event. Typically\r\n     * used to send regular reports of performance indicators. To send single measurement, just\r\n     * use the name and average fields of {@link IMetricTelemetry}. If you take measurements\r\n     * frequently, you can reduce the telemetry bandwidth by aggregating multiple measurements\r\n     * and sending the resulting average at intervals\r\n     * @param {IMetricTelemetry} metric input object argument. Only name and average are mandatory.\r\n     * @param {{[key: string]: any}} customProperties additional data used to filter metrics in the\r\n     * portal. Defaults to empty.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    public trackMetric(metric: IMetricTelemetry, customProperties?: ICustomProperties): void {\r\n        try {\r\n            var telemetryItem = TelemetryItemCreator.create<IMetricTelemetry>(\r\n                metric,\r\n                Metric.dataType,\r\n                Metric.envelopeType,\r\n                this._logger,\r\n                customProperties\r\n            );\r\n\r\n            this.core.track(telemetryItem);\r\n        } catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.TrackMetricFailed,\r\n                \"trackMetric failed, metric will not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logs that a page or other item was viewed.\r\n     * @param IPageViewTelemetry The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param customProperties Additional data used to filter events and metrics. Defaults to empty.\r\n     * If a user wants to provide duration for pageLoad, it'll have to be in pageView.properties.duration\r\n     */\r\n    public trackPageView(pageView?: IPageViewTelemetry, customProperties?: ICustomProperties) {\r\n        try {\r\n            const inPv = pageView || {};\r\n            this._pageViewManager.trackPageView(inPv, {...inPv.properties, ...inPv.measurements, ...customProperties});\r\n\r\n            if (this.config.autoTrackPageVisitTime) {\r\n                this._pageVisitTimeManager.trackPreviousPageVisit(inPv.name, inPv.uri);\r\n            }\r\n        } catch (e) {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.TrackPVFailed,\r\n                \"trackPageView failed, page view will not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a page view telemetry item and send it to the SDK pipeline through the core.track API\r\n     * @param pageView Page view item to be sent\r\n     * @param properties Custom properties (Part C) that a user can add to the telemetry item\r\n     * @param systemProperties System level properties (Part A) that a user can add to the telemetry item\r\n     */\r\n    public sendPageViewInternal(pageView: IPageViewTelemetryInternal, properties?: { [key: string]: any }, systemProperties?: { [key: string]: any }) {\r\n        if (typeof document !== \"undefined\") {\r\n            pageView.refUri = pageView.refUri === undefined ? document.referrer : pageView.refUri;\r\n        }\r\n\r\n        let telemetryItem = TelemetryItemCreator.create<IPageViewTelemetryInternal>(\r\n            pageView,\r\n            PageView.dataType,\r\n            PageView.envelopeType,\r\n            this._logger,\r\n            properties,\r\n            systemProperties);\r\n\r\n        this.core.track(telemetryItem);\r\n\r\n        // reset ajaxes counter\r\n        this._trackAjaxAttempts = 0;\r\n    }\r\n\r\n    /**\r\n     * @ignore INTERNAL ONLY\r\n     * @param pageViewPerformance\r\n     * @param properties\r\n     */\r\n    public sendPageViewPerformanceInternal(pageViewPerformance: IPageViewPerformanceTelemetryInternal, properties?: { [key: string]: any }, systemProperties?: { [key: string]: any }) {\r\n        let telemetryItem = TelemetryItemCreator.create<IPageViewPerformanceTelemetryInternal>(\r\n            pageViewPerformance,\r\n            PageViewPerformance.dataType,\r\n            PageViewPerformance.envelopeType,\r\n            this._logger,\r\n            properties,\r\n            systemProperties);\r\n\r\n        this.core.track(telemetryItem);\r\n    }\r\n\r\n    /**\r\n     * Send browser performance metrics.\r\n     * @param pageViewPerformance\r\n     * @param customProperties\r\n     */\r\n    public trackPageViewPerformance(pageViewPerformance: IPageViewPerformanceTelemetry, customProperties?: ICustomProperties): void {\r\n        try {\r\n            this._pageViewPerformanceManager.populatePageViewPerformanceEvent(pageViewPerformance);\r\n            this.sendPageViewPerformanceInternal(pageViewPerformance, customProperties);\r\n        } catch (e) {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.TrackPVFailed,\r\n                \"trackPageViewPerformance failed, page view will not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the timer for tracking a page load time. Use this instead of `trackPageView` if you want to control when the page view timer starts and stops,\r\n     * but don't want to calculate the duration yourself. This method doesn't send any telemetry. Call `stopTrackPage` to log the end of the page view\r\n     * and send the event.\r\n     * @param name A string that idenfities this item, unique within this HTML document. Defaults to the document title.\r\n     */\r\n    public startTrackPage(name?: string) {\r\n        try {\r\n            if (typeof name !== \"string\") {\r\n                name = window.document && window.document.title || \"\";\r\n            }\r\n\r\n            this._pageTracking.start(name);\r\n        } catch (e) {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.StartTrackFailed,\r\n                \"startTrackPage failed, page view may not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Stops the timer that was started by calling `startTrackPage` and sends the pageview load time telemetry with the specified properties and measurements.\r\n     * The duration of the page view will be the time between calling `startTrackPage` and `stopTrackPage`.\r\n     * @param   name  The string you used as the name in startTrackPage. Defaults to the document title.\r\n     * @param   url   String - a relative or absolute URL that identifies the page or other item. Defaults to the window location.\r\n     * @param   properties  map[string, string] - additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     * @param   measurements    map[string, number] - metrics associated with this page, displayed in Metrics Explorer on the portal. Defaults to empty.\r\n     */\r\n    public stopTrackPage(name?: string, url?: string, properties?: { [key: string]: string }, measurement?: { [key: string]: number }) {\r\n        try {\r\n            if (typeof name !== \"string\") {\r\n                name = window.document && window.document.title || \"\";\r\n            }\r\n\r\n            if (typeof url !== \"string\") {\r\n                url = window.location && window.location.href || \"\";\r\n            }\r\n\r\n            this._pageTracking.stop(name, url, properties, measurement);\r\n\r\n            if (this.config.autoTrackPageVisitTime) {\r\n                this._pageVisitTimeManager.trackPreviousPageVisit(name, url);\r\n            }\r\n        } catch (e) {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.StopTrackFailed,\r\n                \"stopTrackPage failed, page view will not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @ignore INTERNAL ONLY\r\n    * @param exception\r\n    * @param properties\r\n    * @param systemProperties\r\n    */\r\n    public sendExceptionInternal(exception: IExceptionTelemetry, customProperties?: { [key: string]: any }, systemProperties?: { [key: string]: any }) {\r\n        const exceptionPartB = new Exception(\r\n            this._logger,\r\n            exception.exception || new Error(Util.NotSpecified),\r\n            exception.properties,\r\n            exception.measurements,\r\n            exception.severityLevel,\r\n            exception.id\r\n        ).toInterface();\r\n\r\n        let telemetryItem: ITelemetryItem = TelemetryItemCreator.create<IExceptionInternal>(\r\n            exceptionPartB,\r\n            Exception.dataType,\r\n            Exception.envelopeType,\r\n            this._logger,\r\n            customProperties,\r\n            systemProperties\r\n        );\r\n        this.core.track(telemetryItem);\r\n    }\r\n\r\n    /**\r\n     * Log an exception you have caught.\r\n     *\r\n     * @param {IExceptionTelemetry} exception   Object which contains exception to be sent\r\n     * @param {{[key: string]: any}} customProperties   Additional data used to filter pages and metrics in the portal. Defaults to empty.\r\n     *\r\n     * Any property of type double will be considered a measurement, and will be treated by Application Insights as a metric.\r\n     * @memberof ApplicationInsights\r\n     */\r\n    public trackException(exception: IExceptionTelemetry, customProperties?: ICustomProperties): void {\r\n        try {\r\n            this.sendExceptionInternal(exception, customProperties);\r\n        } catch (e) {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.TrackExceptionFailed,\r\n                \"trackException failed, exception will not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description Custom error handler for Application Insights Analytics\r\n     * @param {IAutoExceptionTelemetry} exception\r\n     * @memberof ApplicationInsights\r\n     */\r\n    public _onerror(exception: IAutoExceptionTelemetry): void {\r\n        try {\r\n            const properties = {\r\n                url: (exception && exception.url) || document.URL,\r\n                lineNumber: exception.lineNumber,\r\n                columnNumber: exception.columnNumber,\r\n                message: exception.message\r\n            };\r\n\r\n            if (Util.isCrossOriginError(exception.message, exception.url, exception.lineNumber, exception.columnNumber, exception.error)) {\r\n                this._sendCORSException(properties.url);\r\n            } else {\r\n                if (!Util.isError(exception.error)) {\r\n                    const stack = \"window.onerror@\" + properties.url + \":\" + exception.lineNumber + \":\" + (exception.columnNumber || 0);\r\n                    exception.error = new Error(exception.message);\r\n                    exception.error.stack = stack;\r\n                }\r\n                this.trackException({ exception: exception.error, severityLevel: SeverityLevel.Error }, properties);\r\n            }\r\n        } catch (e) {\r\n            const errorString = exception.error ?\r\n                (exception.error.name + \", \" + exception.error.message)\r\n                : \"null\";\r\n\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.ExceptionWhileLoggingError,\r\n                \"_onError threw exception while logging error, error will not be collected: \"\r\n                + Util.getExceptionName(e),\r\n                { exception: Util.dump(e), errorString: errorString }\r\n            );\r\n        }\r\n    }\r\n\r\n    public addTelemetryInitializer(telemetryInitializer: (item: ITelemetryItem) => boolean | void) {\r\n        this._telemetryInitializers.push(telemetryInitializer);\r\n    }\r\n\r\n    private _initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[]) {\r\n\r\n        if (this._isInitialized) {\r\n            return;\r\n        }\r\n\r\n        if (CoreUtils.isNullOrUndefined(core)) {\r\n            throw Error(\"Error initializing\");\r\n        }\r\n\r\n        this.core = core;\r\n        this._logger = core.logger;\r\n        this._globalconfig = {\r\n            instrumentationKey: config.instrumentationKey,\r\n            endpointUrl: config.endpointUrl || \"https://dc.services.visualstudio.com/v2/track\"\r\n        };\r\n\r\n        this.config = config.extensionConfig && config.extensionConfig[this.identifier] ? config.extensionConfig[this.identifier] : <IConfig>{};\r\n\r\n        // load default values if specified\r\n        var defaults: IConfig = ApplicationInsights.getDefaultConfig();\r\n        if (defaults !== undefined) {\r\n            for (var field in defaults) {\r\n                // for each unspecified field, set the default value\r\n                this.config[field] = ConfigurationManager.getConfig(config, field, this.identifier, defaults[field]);\r\n            }\r\n\r\n            if (this._globalconfig) {\r\n                for (var field in defaults) {\r\n                    if (this._globalconfig[field] === undefined) {\r\n                        this._globalconfig[field] = defaults[field];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Todo: move this out of static state\r\n        if (this.config.isCookieUseDisabled) {\r\n            Util.disableCookies();\r\n        }\r\n\r\n        // Todo: move this out of static state\r\n        if (this.config.isStorageUseDisabled) {\r\n            Util.disableStorage();\r\n        }\r\n\r\n        var configGetters: ITelemetryConfig = {\r\n            instrumentationKey: () => config.instrumentationKey,\r\n            accountId: () => this.config.accountId || config.accountId,\r\n            sessionRenewalMs: () => this.config.sessionRenewalMs || config.sessionRenewalMs,\r\n            sessionExpirationMs: () => this.config.sessionExpirationMs || config.sessionExpirationMs,\r\n            sampleRate: () => this.config.samplingPercentage || config.samplingPercentage,\r\n            cookieDomain: () => this.config.cookieDomain || config.cookieDomain,\r\n            sdkExtension: () => this.config.sdkExtension || config.sdkExtension,\r\n            isBrowserLinkTrackingEnabled: () => this.config.isBrowserLinkTrackingEnabled || config.isBrowserLinkTrackingEnabled,\r\n            appId: () => this.config.appId || config.appId\r\n        }\r\n\r\n        this._pageViewPerformanceManager = new PageViewPerformanceManager(this.core);\r\n        this._pageViewManager = new PageViewManager(this, this.config.overridePageViewDuration, this.core, this._pageViewPerformanceManager);\r\n        this._pageVisitTimeManager = new PageVisitTimeManager(this._logger, (pageName, pageUrl, pageVisitTime) => this.trackPageVisitTime(pageName, pageUrl, pageVisitTime))\r\n\r\n        this._telemetryInitializers = [];\r\n        this._addDefaultTelemetryInitializers(configGetters);\r\n\r\n\r\n        this._eventTracking = new Timing(this._logger, \"trackEvent\");\r\n        this._eventTracking.action =\r\n            (name?: string, url?: string, duration?: number, properties?: { [key: string]: string }) => {\r\n                if (!properties) {\r\n                    properties = {};\r\n                }\r\n\r\n                properties[durationProperty] = duration.toString();\r\n                this.trackEvent(<IEventTelemetry>{ name: name, properties: properties });\r\n            }\r\n\r\n        // initialize page view timing\r\n        this._pageTracking = new Timing(this._logger, \"trackPageView\");\r\n        this._pageTracking.action = (name, url, duration, properties, measurements) => {\r\n\r\n            // duration must be a custom property in order for the collector to extract it\r\n            if (CoreUtils.isNullOrUndefined(properties)) {\r\n                properties = {};\r\n            }\r\n            properties[durationProperty] = duration.toString();\r\n\r\n            let pageViewItem: IPageViewTelemetry = {\r\n                name: name,\r\n                uri: url,\r\n                properties: properties,\r\n                measurements: measurements\r\n            };\r\n\r\n            this.sendPageViewInternal(pageViewItem);\r\n        }\r\n\r\n        const instance: IAppInsights = this;\r\n        if (this.config.disableExceptionTracking === false &&\r\n            !this.config.autoExceptionInstrumented) {\r\n            // We want to enable exception auto collection and it has not been done so yet\r\n            const onerror = \"onerror\";\r\n            const originalOnError = window[onerror];\r\n            window.onerror = function (message, url, lineNumber, columnNumber, error) {\r\n                const handled = originalOnError && <any>originalOnError(message, url, lineNumber, columnNumber, error);\r\n                if (handled !== true) { // handled could be typeof function\r\n                    instance._onerror({\r\n                        message: message,\r\n                        url: url,\r\n                        lineNumber: lineNumber,\r\n                        columnNumber: columnNumber,\r\n                        error: error\r\n                    });\r\n                }\r\n\r\n                return handled;\r\n            }\r\n            this.config.autoExceptionInstrumented = true;\r\n        }\r\n\r\n        /**\r\n         * Create a custom \"locationchange\" event which is triggered each time the history object is changed\r\n         */\r\n        if (this.config.enableAutoRouteTracking === true\r\n            && typeof history === \"object\" && typeof history.pushState === \"function\" && typeof history.replaceState === \"function\"\r\n            && typeof window === \"object\") {\r\n            const _self = this;\r\n            // Find the properties plugin\r\n            extensions.forEach(extension => {\r\n                if (extension.identifier === PropertiesPluginIdentifier) {\r\n                    this._properties = extension as properties.PropertiesPlugin;\r\n                }\r\n            });\r\n\r\n            history.pushState = ( f => function pushState() {\r\n                var ret = f.apply(this, arguments);\r\n                window.dispatchEvent(new Event(_self.config.namePrefix + \"pushState\"));\r\n                window.dispatchEvent(new Event(_self.config.namePrefix + \"locationchange\"));\r\n                return ret;\r\n            })(history.pushState);\r\n\r\n            history.replaceState = ( f => function replaceState(){\r\n                var ret = f.apply(this, arguments);\r\n                window.dispatchEvent(new Event(_self.config.namePrefix + \"replaceState\"));\r\n                window.dispatchEvent(new Event(_self.config.namePrefix + \"locationchange\"));\r\n                return ret;\r\n            })(history.replaceState);\r\n\r\n            window.addEventListener(_self.config.namePrefix + \"popstate\",()=>{\r\n                window.dispatchEvent(new Event(_self.config.namePrefix + \"locationchange\"));\r\n            });\r\n\r\n            window.addEventListener(_self.config.namePrefix + \"locationchange\", () => {\r\n                if (_self._properties && _self._properties.context && _self._properties.context.telemetryTrace) {\r\n                    _self._properties.context.telemetryTrace.traceID = Util.newId();\r\n                    _self._properties.context.telemetryTrace.name = window.location.pathname;\r\n                }\r\n                setTimeout(() => {\r\n                    // todo: override start time so that it is not affected by autoRoutePVDelay\r\n                    _self.trackPageView({ refUri: null, properties: { duration: 0 } }); // SPA route change loading durations are undefined, so send 0\r\n                }, _self.autoRoutePVDelay);\r\n            });\r\n        }\r\n\r\n        this._isInitialized = true;\r\n    }\r\n\r\n    /**\r\n     * Log a page visit time\r\n     * @param    pageName    Name of page\r\n     * @param    pageVisitDuration Duration of visit to the page in milleseconds\r\n     */\r\n    private trackPageVisitTime(pageName: string, pageUrl: string, pageVisitTime: number) {\r\n        var properties = { PageName: pageName, PageUrl: pageUrl };\r\n        this.trackMetric({\r\n            name: \"PageVisitTime\",\r\n            average: pageVisitTime,\r\n            max: pageVisitTime,\r\n            min: pageVisitTime,\r\n            sampleCount: 1\r\n        }, properties);\r\n    }\r\n\r\n    private _addDefaultTelemetryInitializers(configGetters: ITelemetryConfig) {\r\n        if (!configGetters.isBrowserLinkTrackingEnabled()) {\r\n            const browserLinkPaths = ['/browserLinkSignalR/', '/__browserLink/'];\r\n            let dropBrowserLinkRequests = (envelope: ITelemetryItem) => {\r\n                if (envelope.baseType === RemoteDependencyData.dataType) {\r\n                    let remoteData = envelope.baseData as IDependencyTelemetry;\r\n                    if (remoteData) {\r\n                        for (let i = 0; i < browserLinkPaths.length; i++) {\r\n                            if (remoteData.target && remoteData.target.indexOf(browserLinkPaths[i]) >= 0) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            this._addTelemetryInitializer(dropBrowserLinkRequests)\r\n        }\r\n    }\r\n\r\n    private _addTelemetryInitializer(telemetryInitializer: (envelope: ITelemetryItem) => boolean | void) {\r\n        this._telemetryInitializers.push(telemetryInitializer);\r\n    }\r\n\r\n    private _sendCORSException(url: string) {\r\n        const exception: IAutoExceptionTelemetry = {\r\n            message: \"Script error: The browser's same-origin policy prevents us from getting the details of this exception. Consider using the 'crossorigin' attribute.\",\r\n            url: url,\r\n            lineNumber: 0,\r\n            columnNumber: 0,\r\n            error: undefined\r\n        };\r\n        const telemetryItem: ITelemetryItem = TelemetryItemCreator.create<IAutoExceptionTelemetry>(\r\n            exception,\r\n            Exception.dataType,\r\n            Exception.envelopeType,\r\n            this._logger,\r\n            { url: url }\r\n        );\r\n\r\n        this.core.track(telemetryItem);\r\n    }\r\n}\r\n\r\n/**\r\n * Used to record timed events and page views.\r\n */\r\nclass Timing {\r\n    private _name;\r\n    private _events: {\r\n        [key: string]: number;\r\n    };\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    constructor(logger: IDiagnosticLogger, name: string) {\r\n        this._name = name;\r\n        this._events = {};\r\n        this._logger = logger;\r\n    }\r\n\r\n    public start(name: string) {\r\n        if (typeof this._events[name] !== \"undefined\") {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.WARNING, _InternalMessageId.StartCalledMoreThanOnce, \"start was called more than once for this event without calling stop.\",\r\n                { name: this._name, key: name }, true);\r\n        }\r\n\r\n        this._events[name] = +new Date;\r\n    }\r\n\r\n    public stop(name: string, url: string, properties?: { [key: string]: string }, measurements?: { [key: string]: number }) {\r\n        var start = this._events[name];\r\n        if (isNaN(start)) {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.WARNING, _InternalMessageId.StopCalledWithoutStart, \"stop was called without a corresponding start.\",\r\n                { name: this._name, key: name }, true);\r\n        } else {\r\n            var end = +new Date;\r\n            var duration = DateTimeUtils.GetDuration(start, end);\r\n            this.action(name, url, duration, properties, measurements);\r\n        }\r\n\r\n        delete this._events[name];\r\n        this._events[name] = undefined;\r\n    }\r\n\r\n    public action: (name?: string, url?: string, duration?: number, properties?: { [key: string]: string }, measurements?: { [key: string]: number }) => void;\r\n}\r\n"]}