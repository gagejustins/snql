{"version":3,"file":"PageViewManager.js","sourceRoot":"","sources":["../../../src/JavaScriptSDK/Telemetry/PageViewManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    DateTimeUtils, Util, IPageViewTelemetry, IPageViewTelemetryInternal, IPageViewPerformanceTelemetryInternal\r\n} from '@microsoft/applicationinsights-common';\r\nimport {\r\n    IAppInsightsCore, CoreUtils, IDiagnosticLogger, LoggingSeverity,\r\n    _InternalMessageId, IChannelControls\r\n} from '@microsoft/applicationinsights-core-js';\r\nimport { PageViewPerformanceManager } from './PageViewPerformanceManager';\r\n\r\n/**\r\n* Internal interface to pass appInsights object to subcomponents without coupling \r\n*/\r\nexport interface IAppInsightsInternal {\r\n    sendPageViewInternal(pageViewItem: IPageViewTelemetryInternal, properties?: Object, systemProperties?: Object);\r\n    sendPageViewPerformanceInternal(pageViewPerformance: IPageViewPerformanceTelemetryInternal, properties?: Object, systemProperties?: Object);\r\n}\r\n\r\n/**\r\n* Class encapsulates sending page views and page view performance telemetry.\r\n*/\r\nexport class PageViewManager {\r\n    private pageViewPerformanceSent: boolean = false;\r\n\r\n    private overridePageViewDuration: boolean = false;\r\n\r\n    private appInsights: IAppInsightsInternal;\r\n    private _pageViewPerformanceManager: PageViewPerformanceManager;\r\n    private _channel: () => IChannelControls[][];\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    constructor(\r\n        appInsights: IAppInsightsInternal,\r\n        overridePageViewDuration: boolean, core: IAppInsightsCore, pageViewPerformanceManager: PageViewPerformanceManager) {\r\n        this.overridePageViewDuration = overridePageViewDuration;\r\n        this.appInsights = appInsights;\r\n        this._pageViewPerformanceManager = pageViewPerformanceManager;\r\n        if (core) {\r\n            this._channel = () => <IChannelControls[][]>(core.getTransmissionControls());\r\n            this._logger = core.logger;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n    * Currently supported cases:\r\n    * 1) (default case) track page view called with default parameters, overridePageViewDuration = false. Page view is sent with page view performance when navigation timing data is available.\r\n    *    a. If navigation timing is not supported then page view is sent right away with undefined duration. Page view performance is not sent.\r\n    * 2) overridePageViewDuration = true, custom duration provided. Custom duration is used, page view sends right away.\r\n    * 3) overridePageViewDuration = true, custom duration NOT provided. Page view is sent right away, duration is time spent from page load till now (or undefined if navigation timing is not supported). \r\n    * 4) overridePageViewDuration = false, custom duration is provided. Page view is sent right away with custom duration. \r\n    *\r\n    * In all cases page view performance is sent once (only for the 1st call of trackPageView), or not sent if navigation timing is not supported.\r\n    */\r\n    public trackPageView(pageView: IPageViewTelemetry, customProperties?: { [key: string]: any }) {\r\n        let name = pageView.name;\r\n        if (CoreUtils.isNullOrUndefined(name) || typeof name !== \"string\") {\r\n            pageView.name = window.document && window.document.title || \"\";\r\n        }\r\n\r\n        let uri = pageView.uri;\r\n        if (CoreUtils.isNullOrUndefined(uri) || typeof uri !== \"string\") {\r\n            pageView.uri = window.location && window.location.href || \"\";\r\n        }\r\n\r\n        // case 1a. if performance timing is not supported by the browser, send the page view telemetry with the duration provided by the user. If the user\r\n        // do not provide the duration, set duration to undefined\r\n        // Also this is case 4\r\n        if (!this._pageViewPerformanceManager.isPerformanceTimingSupported()) {\r\n            this.appInsights.sendPageViewInternal(\r\n                pageView,\r\n                customProperties\r\n            );\r\n            this._channel().forEach(queues => { queues.forEach(q => q.flush(true)) })\r\n\r\n            // no navigation timing (IE 8, iOS Safari 8.4, Opera Mini 8 - see http://caniuse.com/#feat=nav-timing)\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.NavigationTimingNotSupported,\r\n                \"trackPageView: navigation timing API used for calculation of page duration is not supported in this browser. This page view will be collected without duration and timing info.\");\r\n\r\n            return;\r\n        }\r\n\r\n        var pageViewSent = false;\r\n        var customDuration = undefined;\r\n\r\n        // if the performance timing is supported by the browser, calculate the custom duration\r\n        var start = this._pageViewPerformanceManager.getPerformanceTiming().navigationStart;\r\n        customDuration = DateTimeUtils.GetDuration(start, +new Date);\r\n        if (!this._pageViewPerformanceManager.shouldCollectDuration(customDuration)) {\r\n            customDuration = undefined;\r\n        }\r\n\r\n        // if the user has provided duration, send a page view telemetry with the provided duration. Otherwise, if\r\n        // overridePageViewDuration is set to true, send a page view telemetry with the custom duration calculated earlier\r\n        let duration = undefined;\r\n        if (!CoreUtils.isNullOrUndefined(customProperties) &&\r\n            !CoreUtils.isNullOrUndefined(customProperties.duration)) {\r\n            duration = customProperties.duration;\r\n        }\r\n        if (this.overridePageViewDuration || !isNaN(duration)) {\r\n            if (isNaN(duration)) {\r\n                // case 3\r\n                if (!customProperties) {\r\n                    customProperties = {};\r\n                }\r\n\r\n                customProperties[\"duration\"] = customDuration;\r\n            }\r\n            // case 2\r\n            this.appInsights.sendPageViewInternal(\r\n                pageView,\r\n                customProperties\r\n            );\r\n            this._channel().forEach(queues => { queues.forEach(q => q.flush(true)) })\r\n            pageViewSent = true;\r\n        }\r\n\r\n        // now try to send the page view performance telemetry\r\n        var maxDurationLimit = 60000;\r\n        if (!customProperties) {\r\n            customProperties = {};\r\n        }\r\n        var handle = setInterval((() => {\r\n            try {\r\n                if (this._pageViewPerformanceManager.isPerformanceTimingDataReady()) {\r\n                    clearInterval(handle);\r\n                    let pageViewPerformance: IPageViewPerformanceTelemetryInternal = {\r\n                        name: name,\r\n                        uri: uri\r\n                    };\r\n                    this._pageViewPerformanceManager.populatePageViewPerformanceEvent(pageViewPerformance);\r\n\r\n                    if (!pageViewPerformance.isValid && !pageViewSent) {\r\n                        // If navigation timing gives invalid numbers, then go back to \"override page view duration\" mode.\r\n                        // That's the best value we can get that makes sense.\r\n                        customProperties[\"duration\"] = customDuration;\r\n                        this.appInsights.sendPageViewInternal(\r\n                            pageView,\r\n                            customProperties);\r\n                        this._channel().forEach(queues => { queues.forEach(q => q.flush(true)) })\r\n                    } else {\r\n                        if (!pageViewSent) {\r\n                            customProperties[\"duration\"] = pageViewPerformance.durationMs;\r\n                            this.appInsights.sendPageViewInternal(\r\n                                pageView,\r\n                                customProperties);\r\n                        }\r\n\r\n                        if (!this.pageViewPerformanceSent) {\r\n                            this.appInsights.sendPageViewPerformanceInternal(pageViewPerformance, customProperties);\r\n                            this.pageViewPerformanceSent = true;\r\n                        }\r\n                        this._channel().forEach(queues => { queues.forEach(q => q.flush(true)) })\r\n                    }\r\n                } else if (DateTimeUtils.GetDuration(start, +new Date) > maxDurationLimit) {\r\n                    // if performance timings are not ready but we exceeded the maximum duration limit, just log a page view telemetry\r\n                    // with the maximum duration limit. Otherwise, keep waiting until performance timings are ready\r\n                    clearInterval(handle);\r\n                    if (!pageViewSent) {\r\n                        customProperties[\"duration\"] = maxDurationLimit;\r\n                        this.appInsights.sendPageViewInternal(\r\n                            pageView,\r\n                            customProperties\r\n                        );\r\n                        this._channel().forEach(queues => { queues.forEach(q => q.flush(true)) })\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                this._logger.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.TrackPVFailedCalc,\r\n                    \"trackPageView failed on page load calculation: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }), 100);\r\n    }\r\n}\r\n"]}