{"version":3,"file":"PageVisitTimeManager.js","sourceRoot":"","sources":["../../../src/JavaScriptSDK/Telemetry/PageVisitTimeManager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Util } from '@microsoft/applicationinsights-common';\r\nimport { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\n\r\n/**\r\n * Used to track page visit durations\r\n */\r\nexport class PageVisitTimeManager {\r\n\r\n    private prevPageVisitDataKeyName: string = \"prevPageVisitData\";\r\n    private pageVisitTimeTrackingHandler: (pageName: string, pageUrl: string, pageVisitTime: number) => void;\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    /**\r\n     * Creates a new instance of PageVisitTimeManager\r\n     * @param pageVisitTimeTrackingHandler Delegate that will be called to send telemetry data to AI (when trackPreviousPageVisit is called)\r\n     * @returns {} \r\n     */\r\n    constructor(logger: IDiagnosticLogger, pageVisitTimeTrackingHandler: (pageName: string, pageUrl: string, pageVisitTime: number) => void) {\r\n        this.pageVisitTimeTrackingHandler = pageVisitTimeTrackingHandler;\r\n        this._logger = logger;\r\n    }\r\n\r\n    /**\r\n    * Tracks the previous page visit time telemetry (if exists) and starts timing of new page visit time\r\n    * @param currentPageName Name of page to begin timing for visit duration\r\n    * @param currentPageUrl Url of page to begin timing for visit duration\r\n    */\r\n    public trackPreviousPageVisit(currentPageName: string, currentPageUrl: string) {\r\n\r\n        try {\r\n            // Restart timer for new page view\r\n            var prevPageVisitTimeData = this.restartPageVisitTimer(currentPageName, currentPageUrl);\r\n\r\n            // If there was a page already being timed, track the visit time for it now.\r\n            if (prevPageVisitTimeData) {\r\n                this.pageVisitTimeTrackingHandler(prevPageVisitTimeData.pageName, prevPageVisitTimeData.pageUrl, prevPageVisitTimeData.pageVisitTime);\r\n            }\r\n        } catch (e) {\r\n            this._logger.warnToConsole(\"Auto track page visit time failed, metric will not be collected: \" + Util.dump(e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops timing of current page (if exists) and starts timing for duration of visit to pageName\r\n     * @param pageName Name of page to begin timing visit duration\r\n     * @returns {PageVisitData} Page visit data (including duration) of pageName from last call to start or restart, if exists. Null if not. \r\n     */\r\n    public restartPageVisitTimer(pageName: string, pageUrl: string) {\r\n        try {\r\n            var prevPageVisitData = this.stopPageVisitTimer();\r\n            this.startPageVisitTimer(pageName, pageUrl);\r\n\r\n            return prevPageVisitData;\r\n        } catch (e) {\r\n            this._logger.warnToConsole(\"Call to restart failed: \" + Util.dump(e));\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts timing visit duration of pageName\r\n     * @param pageName \r\n     * @returns {} \r\n     */\r\n    public startPageVisitTimer(pageName: string, pageUrl: string) {\r\n        try {\r\n            if (Util.canUseSessionStorage()) {\r\n                if (Util.getSessionStorage(this._logger, this.prevPageVisitDataKeyName) != null) {\r\n                    throw new Error(\"Cannot call startPageVisit consecutively without first calling stopPageVisit\");\r\n                }\r\n\r\n                var currPageVisitData = new PageVisitData(pageName, pageUrl);\r\n                var currPageVisitDataStr = JSON.stringify(currPageVisitData);\r\n                Util.setSessionStorage(this._logger, this.prevPageVisitDataKeyName, currPageVisitDataStr);\r\n            }\r\n        } catch (e) {\r\n            //TODO: Remove this catch in next phase, since if start is called twice in a row the exception needs to be propagated out\r\n            this._logger.warnToConsole(\"Call to start failed: \" + Util.dump(e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops timing of current page, if exists.\r\n     * @returns {PageVisitData} Page visit data (including duration) of pageName from call to start, if exists. Null if not.  \r\n     */\r\n    public stopPageVisitTimer() {\r\n        try {\r\n            if (Util.canUseSessionStorage()) {\r\n\r\n                // Define end time of page's visit\r\n                var pageVisitEndTime = Date.now();\r\n\r\n                // Try to retrieve  page name and start time from session storage\r\n                var pageVisitDataJsonStr = Util.getSessionStorage(this._logger, this.prevPageVisitDataKeyName);\r\n                if (pageVisitDataJsonStr) {\r\n\r\n                    // if previous page data exists, set end time of visit\r\n                    var prevPageVisitData: PageVisitData = JSON.parse(pageVisitDataJsonStr);\r\n                    prevPageVisitData.pageVisitTime = pageVisitEndTime - prevPageVisitData.pageVisitStartTime;\r\n\r\n                    // Remove data from storage since we already used it\r\n                    Util.removeSessionStorage(this._logger, this.prevPageVisitDataKeyName);\r\n\r\n                    // Return page visit data\r\n                    return prevPageVisitData;\r\n                } else {\r\n                    return null;\r\n                }\r\n\r\n            }\r\n            return null;\r\n        } catch (e) {\r\n            this._logger.warnToConsole(\"Stop page visit timer failed: \" + Util.dump(e));\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\nexport class PageVisitData {\r\n\r\n    public pageName: string;\r\n    public pageUrl: string;\r\n    public pageVisitStartTime: number;\r\n    public pageVisitTime: number;\r\n\r\n    constructor(pageName, pageUrl) {\r\n        this.pageVisitStartTime = Date.now();\r\n        this.pageName = pageName;\r\n        this.pageUrl = pageUrl;\r\n    }\r\n}"]}