import { ISenderConfig, XDomainRequest as IXDomainRequest, IBackendResponse } from './Interfaces';
import { ISendBuffer } from './SendBuffer';
import { IEnvelope, IChannelControlsAI, IConfig } from '@microsoft/applicationinsights-common';
import { ITelemetryPlugin, ITelemetryItem, IConfiguration, IDiagnosticLogger, IAppInsightsCore, IPlugin } from '@microsoft/applicationinsights-core-js';
import { Sample } from './TelemetryProcessors/Sample';
export declare class Sender implements IChannelControlsAI {
    priority: number;
    identifier: string;
    pause(): void;
    resume(): void;
    flush(): void;
    teardown(): void;
    /**
     * The configuration for this sender instance
     */
    _config: ISenderConfig;
    /**
     * A method which will cause data to be send to the url
     */
    _sender: (payload: string[], isAsync: boolean) => void;
    /**
     * A send buffer object
     */
    _buffer: ISendBuffer;
    /**
     * AppId of this component parsed from some backend response.
     */
    _appId: string;
    /**
     * Whether XMLHttpRequest object is supported. Older version of IE (8,9) do not support it.
     */
    _XMLHttpRequestSupported: boolean;
    /**
     * How many times in a row a retryable error condition has occurred.
     */
    private _consecutiveErrors;
    /**
     * The time to retry at in milliseconds from 1970/01/01 (this makes the timer calculation easy).
     */
    private _retryAt;
    /**
     * The time of the last send operation.
     */
    private _lastSend;
    /**
     * Handle to the timer for delayed sending of batches of data.
     */
    private _timeoutHandle;
    private _nextPlugin;
    private _logger;
    private _serializer;
    protected _sample: Sample;
    initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[]): void;
    processTelemetry(telemetryItem: ITelemetryItem): void;
    setNextPlugin(next: ITelemetryPlugin): void;
    /**
     * xhr state changes
     */
    _xhrReadyStateChange(xhr: XMLHttpRequest, payload: string[], countOfItemsInPayload: number): void;
    /**
     * Immediately send buffered data
     * @param async {boolean} - Indicates if the events should be sent asynchronously
     */
    triggerSend(async?: boolean): void;
    /**
     * error handler
     */
    _onError(payload: string[], message: string, event?: ErrorEvent): void;
    /**
     * partial success handler
     */
    _onPartialSuccess(payload: string[], results: IBackendResponse): void;
    /**
     * success handler
     */
    _onSuccess(payload: string[], countOfItemsInPayload: number): void;
    /**
     * xdr state changes
     */
    _xdrOnLoad(xdr: IXDomainRequest, payload: string[]): void;
    static constructEnvelope(orig: ITelemetryItem, iKey: string, logger: IDiagnosticLogger): IEnvelope;
    private static _getDefaultAppInsightsChannelConfig();
    private static _getEmptyAppInsightsChannelConfig();
    private _isSampledIn(envelope);
    /**
     * Send Beacon API request
     * @param payload {string} - The data payload to be sent.
     * @param isAsync {boolean} - not used
     * Note: Beacon API does not support custom headers and we are not able to get
     * appId from the backend for the correct correlation.
     */
    private _beaconSender(payload, isAsync);
    /**
     * Send XMLHttpRequest
     * @param payload {string} - The data payload to be sent.
     * @param isAsync {boolean} - Indicates if the request should be sent asynchronously
     */
    private _xhrSender(payload, isAsync);
    /**
     * Parses the response from the backend.
     * @param response - XMLHttpRequest or XDomainRequest response
     */
    private _parseResponse(response);
    /**
     * Resend payload. Adds payload back to the send buffer and setup a send timer (with exponential backoff).
     * @param payload
     */
    private _resendPayload(payload, linearFactor?);
    /** Calculates the time to wait before retrying in case of an error based on
     * http://en.wikipedia.org/wiki/Exponential_backoff
     */
    private _setRetryTime(linearFactor);
    /**
     * Sets up the timer which triggers actually sending the data.
     */
    private _setupTimer();
    /**
     * Checks if the SDK should resend the payload after receiving this status code from the backend.
     * @param statusCode
     */
    private _isRetriable(statusCode);
    private _formatErrorMessageXhr(xhr, message?);
    /**
     * Send XDomainRequest
     * @param payload {string} - The data payload to be sent.
     * @param isAsync {boolean} - Indicates if the request should be sent asynchronously
     *
     * Note: XDomainRequest does not support sync requests. This 'isAsync' parameter is added
     * to maintain consistency with the xhrSender's contract
     * Note: XDomainRequest does not support custom headers and we are not able to get
     * appId from the backend for the correct correlation.
     */
    private _xdrSender(payload, isAsync);
    private _formatErrorMessageXdr(xdr, message?);
}
