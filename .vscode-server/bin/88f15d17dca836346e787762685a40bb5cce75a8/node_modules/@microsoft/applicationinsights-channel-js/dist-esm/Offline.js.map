{"version":3,"file":"Offline.js","sourceRoot":"","sources":["../src/Offline.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,wCAAwC,CAAC;AAEnE;;;;GAIG;AACH;IAYI;QAVQ,kBAAa,GAAY,IAAI,CAAC;QAWlC,IAAI,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAC7B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC3C,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;gBACrE,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;gBACvE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAC5B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7B,QAAQ,CAAC,IAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACrD,QAAQ,CAAC,IAAK,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAC5D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAC5B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACZ,QAAS,CAAC,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChD,QAAS,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACvD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAC5B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,+CAA+C;gBAC/C,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAC7B,CAAC;QACL,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAET,oCAAoC;YACpC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC7B,CAAC;IACL,CAAC;IAhCO,oCAAU,GAAlB;QACI,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC9B,CAAC;IACO,qCAAW,GAAnB;QACI,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC/B,CAAC;IA6BM,kCAAQ,GAAf;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAA;QAC7B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACrE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,oDAAoD;YACpD,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAEM,mCAAS,GAAhB;QACI,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;IAnDa,uBAAO,GAAG,IAAI,eAAe,CAAC;IAoDhD,sBAAC;CAAA,AArDD,IAqDC;SArDY,eAAe;AAuD5B,MAAM,CAAC,IAAM,OAAO,GAAG,eAAe,CAAC,OAAO,CAAC","sourcesContent":["import { CoreUtils } from '@microsoft/applicationinsights-core-js';\r\n\r\n/**\r\n * @description Monitors browser for offline events\r\n * @export default - Offline: Static instance of OfflineListener\r\n * @class OfflineListener\r\n */\r\nexport class OfflineListener {\r\n    public static Offline = new OfflineListener;\r\n    private _onlineStatus: boolean = true;\r\n    public isListening: boolean;\r\n\r\n    private _setOnline() {\r\n        this._onlineStatus = true;\r\n    }\r\n    private _setOffline() {\r\n        this._onlineStatus = false;\r\n    }\r\n\r\n    constructor() {\r\n        try {\r\n            if (typeof window === 'undefined') {\r\n                this.isListening = false;\r\n            } else if (window && window.addEventListener) {\r\n                window.addEventListener('online', this._setOnline.bind(this), false);\r\n                window.addEventListener('offline', this._setOffline.bind(this), false);\r\n                this.isListening = true;\r\n            } else if (document && document.body) {\r\n                (<any>document.body).ononline = this._setOnline.bind(this);\r\n                (<any>document.body).onoffline = this._setOffline.bind(this)\r\n                this.isListening = true;\r\n            } else if (document) {\r\n                (<any>document).ononline = this._setOnline.bind(this);\r\n                (<any>document).onoffline = this._setOffline.bind(this)\r\n                this.isListening = true;\r\n            } else {\r\n                // Could not find a place to add event listener\r\n                this.isListening = false;\r\n            }\r\n        } catch (e) {\r\n\r\n            //this makes react-native less angry\r\n            this.isListening = false;\r\n        }\r\n    }\r\n\r\n    public isOnline(): boolean {\r\n        if (this.isListening) {\r\n            return this._onlineStatus\r\n        } else if (navigator && !CoreUtils.isNullOrUndefined(navigator.onLine)) { // navigator.onLine is undefined in react-native\r\n            return navigator.onLine;\r\n        } else {\r\n            // Cannot determine online status - report as online\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public isOffline(): boolean {\r\n        return !this.isOnline();\r\n    }\r\n}\r\n\r\nexport const Offline = OfflineListener.Offline;\r\n"]}