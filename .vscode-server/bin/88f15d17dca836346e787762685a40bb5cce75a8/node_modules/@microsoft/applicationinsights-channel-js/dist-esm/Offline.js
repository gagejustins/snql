import { CoreUtils } from '@microsoft/applicationinsights-core-js';
/**
 * @description Monitors browser for offline events
 * @export default - Offline: Static instance of OfflineListener
 * @class OfflineListener
 */
var OfflineListener = /** @class */ (function () {
    function OfflineListener() {
        this._onlineStatus = true;
        try {
            if (typeof window === 'undefined') {
                this.isListening = false;
            }
            else if (window && window.addEventListener) {
                window.addEventListener('online', this._setOnline.bind(this), false);
                window.addEventListener('offline', this._setOffline.bind(this), false);
                this.isListening = true;
            }
            else if (document && document.body) {
                document.body.ononline = this._setOnline.bind(this);
                document.body.onoffline = this._setOffline.bind(this);
                this.isListening = true;
            }
            else if (document) {
                document.ononline = this._setOnline.bind(this);
                document.onoffline = this._setOffline.bind(this);
                this.isListening = true;
            }
            else {
                // Could not find a place to add event listener
                this.isListening = false;
            }
        }
        catch (e) {
            //this makes react-native less angry
            this.isListening = false;
        }
    }
    OfflineListener.prototype._setOnline = function () {
        this._onlineStatus = true;
    };
    OfflineListener.prototype._setOffline = function () {
        this._onlineStatus = false;
    };
    OfflineListener.prototype.isOnline = function () {
        if (this.isListening) {
            return this._onlineStatus;
        }
        else if (navigator && !CoreUtils.isNullOrUndefined(navigator.onLine)) {
            return navigator.onLine;
        }
        else {
            // Cannot determine online status - report as online
            return true;
        }
    };
    OfflineListener.prototype.isOffline = function () {
        return !this.isOnline();
    };
    OfflineListener.Offline = new OfflineListener;
    return OfflineListener;
}());
export { OfflineListener };
export var Offline = OfflineListener.Offline;
//# sourceMappingURL=Offline.js.map