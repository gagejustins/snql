{"version":3,"file":"Sender.js","sourceRoot":"","sources":["../src/Sender.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISenderConfig, XDomainRequest as IXDomainRequest, IBackendResponse } from './Interfaces';\r\nimport { ISendBuffer, SessionStorageSendBuffer, ArraySendBuffer } from './SendBuffer';\r\nimport {\r\n    EnvelopeCreator, DependencyEnvelopeCreator, EventEnvelopeCreator,\r\n    ExceptionEnvelopeCreator, MetricEnvelopeCreator, PageViewEnvelopeCreator,\r\n    PageViewPerformanceEnvelopeCreator, TraceEnvelopeCreator\r\n} from './EnvelopeCreator';\r\nimport { Serializer } from './Serializer'; // todo move to channel\r\nimport {\r\n    DisabledPropertyName, RequestHeaders, Util,\r\n    IEnvelope, PageView, Event,\r\n    Trace, Exception, Metric,\r\n    PageViewPerformance, RemoteDependencyData,\r\n    IChannelControlsAI,\r\n    ConfigurationManager, IConfig,\r\n    ProcessLegacy,\r\n    BreezeChannelIdentifier,\r\n    SampleRate\r\n} from '@microsoft/applicationinsights-common';\r\nimport {\r\n    ITelemetryPlugin, ITelemetryItem, IConfiguration, CoreUtils,\r\n    _InternalMessageId, LoggingSeverity, IDiagnosticLogger, IAppInsightsCore, IPlugin,\r\n} from '@microsoft/applicationinsights-core-js';\r\nimport { Offline } from './Offline';\r\nimport { Sample } from './TelemetryProcessors/Sample'\r\n\r\ndeclare var XDomainRequest: {\r\n    prototype: IXDomainRequest;\r\n    new(): IXDomainRequest;\r\n};\r\n\r\nexport class Sender implements IChannelControlsAI {\r\n    public priority: number = 1001;\r\n\r\n    public identifier: string = BreezeChannelIdentifier;\r\n\r\n\r\n    public pause(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public resume(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public flush() {\r\n        try {\r\n            this.triggerSend();\r\n        } catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.FlushFailed,\r\n                \"flush failed, telemetry will not be collected: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n\r\n    public teardown(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    /**\r\n     * The configuration for this sender instance\r\n     */\r\n    public _config: ISenderConfig;\r\n\r\n    /**\r\n     * A method which will cause data to be send to the url\r\n     */\r\n    public _sender: (payload: string[], isAsync: boolean) => void;\r\n\r\n    /**\r\n     * A send buffer object\r\n     */\r\n    public _buffer: ISendBuffer;\r\n\r\n    /**\r\n     * AppId of this component parsed from some backend response.\r\n     */\r\n    public _appId: string;\r\n\r\n    /**\r\n     * Whether XMLHttpRequest object is supported. Older version of IE (8,9) do not support it.\r\n     */\r\n    public _XMLHttpRequestSupported: boolean = false;\r\n\r\n    /**\r\n     * How many times in a row a retryable error condition has occurred.\r\n     */\r\n    private _consecutiveErrors: number;\r\n\r\n    /**\r\n     * The time to retry at in milliseconds from 1970/01/01 (this makes the timer calculation easy).\r\n     */\r\n    private _retryAt: number;\r\n\r\n    /**\r\n     * The time of the last send operation.\r\n     */\r\n    private _lastSend: number;\r\n\r\n    /**\r\n     * Handle to the timer for delayed sending of batches of data.\r\n     */\r\n    private _timeoutHandle: any;\r\n\r\n    private _nextPlugin: ITelemetryPlugin;\r\n\r\n    private _logger: IDiagnosticLogger;\r\n    private _serializer: Serializer;\r\n    protected _sample: Sample;\r\n\r\n    public initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[]): void {\r\n        this._logger = core.logger;\r\n        this._serializer = new Serializer(core.logger);\r\n\r\n        this._consecutiveErrors = 0;\r\n        this._retryAt = null;\r\n        this._lastSend = 0;\r\n        this._sender = null;\r\n        const defaultConfig = Sender._getDefaultAppInsightsChannelConfig();\r\n        this._config = Sender._getEmptyAppInsightsChannelConfig();\r\n        for (let field in defaultConfig) {\r\n            this._config[field] = () => ConfigurationManager.getConfig(config, field, this.identifier, defaultConfig[field]());\r\n        }\r\n\r\n        this._buffer = (this._config.enableSessionStorageBuffer && Util.canUseSessionStorage())\r\n            ? new SessionStorageSendBuffer(this._logger, this._config) : new ArraySendBuffer(this._config);\r\n        this._sample = new Sample(this._config.samplingPercentage(), this._logger);\r\n\r\n        if (!this._config.isBeaconApiDisabled() && Util.IsBeaconApiSupported()) {\r\n            this._sender = this._beaconSender;\r\n        } else {\r\n            if (typeof XMLHttpRequest != \"undefined\") {\r\n                var testXhr = new XMLHttpRequest();\r\n                if (\"withCredentials\" in testXhr) {\r\n                    this._sender = this._xhrSender;\r\n                    this._XMLHttpRequestSupported = true;\r\n                } else if (typeof XDomainRequest !== \"undefined\") {\r\n                    this._sender = this._xdrSender; //IE 8 and 9\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public processTelemetry(telemetryItem: ITelemetryItem) {\r\n        try {\r\n            // if master off switch is set, don't send any data\r\n            if (this._config.disableTelemetry()) {\r\n                // Do not send/save data\r\n                return;\r\n            }\r\n\r\n            // validate input\r\n            if (!telemetryItem) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CannotSendEmptyTelemetry, \"Cannot send empty telemetry\");\r\n                return;\r\n            }\r\n\r\n            // validate event\r\n            if (telemetryItem.baseData && !telemetryItem.baseType) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.InvalidEvent, \"Cannot send telemetry without baseData and baseType\");\r\n                return;\r\n            }\r\n\r\n            if (!telemetryItem.baseType) {\r\n                // Default\r\n                telemetryItem.baseType = \"EventData\";\r\n            }\r\n\r\n            // ensure a sender was constructed\r\n            if (!this._sender) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.SenderNotInitialized, \"Sender was not initialized\");\r\n                return;\r\n            }\r\n          \r\n            // check if this item should be sampled in, else add sampleRate tag\r\n            if (!this._isSampledIn(telemetryItem)) {\r\n                // Item is sampled out, do not send it\r\n                this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TelemetrySampledAndNotSent,\r\n                    \"Telemetry item was sampled out and not sent\", { SampleRate: this._sample.sampleRate });\r\n                return;\r\n            } else {\r\n                telemetryItem.tags = telemetryItem.tags || <any>{};\r\n                telemetryItem.tags[SampleRate] = this._sample.sampleRate;\r\n            }\r\n\r\n            // construct an envelope that Application Insights endpoint can understand\r\n            let aiEnvelope = Sender.constructEnvelope(telemetryItem, this._config.instrumentationKey(), this._logger);\r\n            if (!aiEnvelope) {\r\n                this._logger.throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.CreateEnvelopeError, \"Unable to create an AppInsights envelope\");\r\n                return;\r\n            }\r\n\r\n            let doNotSendItem = false;\r\n            // this is for running in legacy mode, where customer may already have a custom initializer present\r\n            if (telemetryItem.tags && telemetryItem.tags[ProcessLegacy]) {\r\n                telemetryItem.tags[ProcessLegacy].forEach((callBack: (env: IEnvelope) => boolean | void) => {\r\n                    try {\r\n                        if (callBack && callBack(aiEnvelope) === false) {\r\n                            doNotSendItem = true;\r\n                            this._logger.warnToConsole(\"Telemetry processor check returns false\");\r\n                        }\r\n                    } catch (e) {\r\n                        // log error but dont stop executing rest of the telemetry initializers\r\n                        // doNotSendItem = true;\r\n                        this._logger.throwInternal(\r\n                            LoggingSeverity.CRITICAL, _InternalMessageId.TelemetryInitializerFailed, \"One of telemetry initializers failed, telemetry item will not be sent: \" + Util.getExceptionName(e),\r\n                            { exception: Util.dump(e) }, true);\r\n                    }\r\n                });\r\n\r\n                delete telemetryItem.tags[ProcessLegacy];\r\n            }\r\n            if (doNotSendItem) {\r\n                return; // do not send, no need to execute next plugin\r\n            }\r\n\r\n            // check if the incoming payload is too large, truncate if necessary\r\n            let payload: string = this._serializer.serialize(aiEnvelope);\r\n\r\n            // flush if we would exceed the max-size limit by adding this item\r\n            var bufferPayload = this._buffer.getItems();\r\n            var batch = this._buffer.batchPayloads(bufferPayload);\r\n\r\n            if (batch && (batch.length + payload.length > this._config.maxBatchSizeInBytes())) {\r\n                this.triggerSend();\r\n            }\r\n\r\n            // enqueue the payload\r\n            this._buffer.enqueue(payload);\r\n\r\n            // ensure an invocation timeout is set\r\n            this._setupTimer();\r\n\r\n        } catch (e) {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.FailedAddingTelemetryToBuffer,\r\n                \"Failed adding telemetry to the sender's buffer, some telemetry will be lost: \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n\r\n        // hand off the telemetry item to the next plugin\r\n        if (!CoreUtils.isNullOrUndefined(this._nextPlugin)) {\r\n            this._nextPlugin.processTelemetry(telemetryItem);\r\n        }\r\n    }\r\n\r\n    public setNextPlugin(next: ITelemetryPlugin) {\r\n        this._nextPlugin = next;\r\n    }\r\n\r\n    /**\r\n     * xhr state changes\r\n     */\r\n    public _xhrReadyStateChange(xhr: XMLHttpRequest, payload: string[], countOfItemsInPayload: number) {\r\n        if (xhr.readyState === 4) {\r\n            var response: IBackendResponse = null;\r\n            if (!this._appId) {\r\n                response = this._parseResponse(xhr.responseText || xhr.response);\r\n                if (response && response.appId) {\r\n                    this._appId = response.appId;\r\n                }\r\n            }\r\n\r\n            if ((xhr.status < 200 || xhr.status >= 300) && xhr.status !== 0) {\r\n                if (!this._config.isRetryDisabled() && this._isRetriable(xhr.status)) {\r\n                    this._resendPayload(payload);\r\n\r\n                    this._logger.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.TransmissionFailed, \". \" +\r\n                        \"Response code \" + xhr.status + \". Will retry to send \" + payload.length + \" items.\");\r\n                } else {\r\n                    this._onError(payload, this._formatErrorMessageXhr(xhr));\r\n                }\r\n            } else if (Offline.isOffline()) { // offline\r\n                // Note: Don't check for staus == 0, since adblock gives this code\r\n                if (!this._config.isRetryDisabled()) {\r\n                    const offlineBackOffMultiplier = 10; // arbritrary number\r\n                    this._resendPayload(payload, offlineBackOffMultiplier);\r\n\r\n                    this._logger.throwInternal(\r\n                        LoggingSeverity.WARNING,\r\n                        _InternalMessageId.TransmissionFailed, `. Offline - Response Code: ${xhr.status}. Offline status: ${Offline.isOffline()}. Will retry to send ${payload.length} items.`);\r\n                }\r\n            } else {\r\n                if (xhr.status === 206) {\r\n                    if (!response) {\r\n                        response = this._parseResponse(xhr.responseText || xhr.response);\r\n                    }\r\n\r\n                    if (response && !this._config.isRetryDisabled()) {\r\n                        this._onPartialSuccess(payload, response);\r\n                    } else {\r\n                        this._onError(payload, this._formatErrorMessageXhr(xhr));\r\n                    }\r\n                } else {\r\n                    this._consecutiveErrors = 0;\r\n                    this._onSuccess(payload, countOfItemsInPayload);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Immediately send buffered data\r\n     * @param async {boolean} - Indicates if the events should be sent asynchronously\r\n     */\r\n    public triggerSend(async = true) {\r\n        try {\r\n            // Send data only if disableTelemetry is false\r\n            if (!this._config.disableTelemetry()) {\r\n\r\n                if (this._buffer.count() > 0) {\r\n                    var payload = this._buffer.getItems();\r\n\r\n                    // invoke send\r\n                    this._sender(payload, async);\r\n                }\r\n\r\n                // update lastSend time to enable throttling\r\n                this._lastSend = +new Date;\r\n            } else {\r\n                this._buffer.clear();\r\n            }\r\n\r\n            clearTimeout(this._timeoutHandle);\r\n            this._timeoutHandle = null;\r\n            this._retryAt = null;\r\n        } catch (e) {\r\n            /* Ignore this error for IE under v10 */\r\n            if (!Util.getIEVersion() || Util.getIEVersion() > 9) {\r\n                this._logger.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.TransmissionFailed,\r\n                    \"Telemetry transmission failed, some telemetry will be lost: \" + Util.getExceptionName(e),\r\n                    { exception: Util.dump(e) });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * error handler\r\n     */\r\n    public _onError(payload: string[], message: string, event?: ErrorEvent) {\r\n        this._logger.throwInternal(\r\n            LoggingSeverity.WARNING,\r\n            _InternalMessageId.OnError,\r\n            \"Failed to send telemetry.\",\r\n            { message: message });\r\n\r\n        this._buffer.clearSent(payload);\r\n    }\r\n\r\n    /**\r\n     * partial success handler\r\n     */\r\n    public _onPartialSuccess(payload: string[], results: IBackendResponse) {\r\n        var failed = [];\r\n        var retry = [];\r\n\r\n        // Iterate through the reversed array of errors so that splicing doesn't have invalid indexes after the first item.\r\n        var errors = results.errors.reverse();\r\n        for (var error of errors) {\r\n            var extracted = payload.splice(error.index, 1)[0];\r\n            if (this._isRetriable(error.statusCode)) {\r\n                retry.push(extracted);\r\n            } else {\r\n                // All other errors, including: 402 (Monthly quota exceeded) and 439 (Too many requests and refresh cache).\r\n                failed.push(extracted);\r\n            }\r\n        }\r\n\r\n        if (payload.length > 0) {\r\n            this._onSuccess(payload, results.itemsAccepted);\r\n        }\r\n\r\n        if (failed.length > 0) {\r\n            this._onError(failed, this._formatErrorMessageXhr(null, ['partial success', results.itemsAccepted, 'of', results.itemsReceived].join(' ')));\r\n        }\r\n\r\n        if (retry.length > 0) {\r\n            this._resendPayload(retry);\r\n\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.TransmissionFailed, \"Partial success. \" +\r\n                \"Delivered: \" + payload.length + \", Failed: \" + failed.length +\r\n                \". Will retry to send \" + retry.length + \" our of \" + results.itemsReceived + \" items\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * success handler\r\n     */\r\n    public _onSuccess(payload: string[], countOfItemsInPayload: number) {\r\n        this._buffer.clearSent(payload);\r\n    }\r\n\r\n    /**\r\n     * xdr state changes\r\n     */\r\n    public _xdrOnLoad(xdr: IXDomainRequest, payload: string[]) {\r\n        if (xdr && (xdr.responseText + \"\" === \"200\" || xdr.responseText === \"\")) {\r\n            this._consecutiveErrors = 0;\r\n            this._onSuccess(payload, 0);\r\n        } else {\r\n            var results = this._parseResponse(xdr.responseText);\r\n\r\n            if (results && results.itemsReceived && results.itemsReceived > results.itemsAccepted\r\n                && !this._config.isRetryDisabled()) {\r\n                this._onPartialSuccess(payload, results);\r\n            } else {\r\n                this._onError(payload, this._formatErrorMessageXdr(xdr));\r\n            }\r\n        }\r\n    }\r\n\r\n    public static constructEnvelope(orig: ITelemetryItem, iKey: string, logger: IDiagnosticLogger): IEnvelope {\r\n        let envelope: ITelemetryItem;\r\n        if (iKey !== orig.iKey && !CoreUtils.isNullOrUndefined(iKey)) {\r\n            envelope = {\r\n                ...orig,\r\n                iKey: iKey\r\n            };\r\n        } else {\r\n            envelope = orig;\r\n        }\r\n\r\n        switch (envelope.baseType) {\r\n            case Event.dataType:\r\n                return EventEnvelopeCreator.EventEnvelopeCreator.Create(logger, envelope);\r\n            case Trace.dataType:\r\n                return TraceEnvelopeCreator.TraceEnvelopeCreator.Create(logger, envelope);\r\n            case PageView.dataType:\r\n                return PageViewEnvelopeCreator.PageViewEnvelopeCreator.Create(logger, envelope);\r\n            case PageViewPerformance.dataType:\r\n                return PageViewPerformanceEnvelopeCreator.PageViewPerformanceEnvelopeCreator.Create(logger, envelope);\r\n            case Exception.dataType:\r\n                return ExceptionEnvelopeCreator.ExceptionEnvelopeCreator.Create(logger, envelope);\r\n            case Metric.dataType:\r\n                return MetricEnvelopeCreator.MetricEnvelopeCreator.Create(logger, envelope);\r\n            case RemoteDependencyData.dataType:\r\n                return DependencyEnvelopeCreator.DependencyEnvelopeCreator.Create(logger, envelope);\r\n            default:\r\n\r\n                return EventEnvelopeCreator.EventEnvelopeCreator.Create(logger, envelope);\r\n        }\r\n    }\r\n\r\n    private static _getDefaultAppInsightsChannelConfig(): ISenderConfig {\r\n        // set default values\r\n        return {\r\n            endpointUrl: () => \"https://dc.services.visualstudio.com/v2/track\",\r\n            emitLineDelimitedJson: () => false,\r\n            maxBatchInterval: () => 15000,\r\n            maxBatchSizeInBytes: () => 102400,  // 100kb\r\n            disableTelemetry: () => false,\r\n            enableSessionStorageBuffer: () => true,\r\n            isRetryDisabled: () => false,\r\n            isBeaconApiDisabled: () => true,\r\n            instrumentationKey: () => undefined,  // Channel doesn't need iKey, it should be set already\r\n            namePrefix: () => undefined,\r\n            samplingPercentage: () => 100\r\n        }\r\n    }\r\n\r\n    private static _getEmptyAppInsightsChannelConfig(): ISenderConfig {\r\n        return {\r\n            endpointUrl: undefined,\r\n            emitLineDelimitedJson: undefined,\r\n            maxBatchInterval: undefined,\r\n            maxBatchSizeInBytes: undefined,\r\n            disableTelemetry: undefined,\r\n            enableSessionStorageBuffer: undefined,\r\n            isRetryDisabled: undefined,\r\n            isBeaconApiDisabled: undefined,\r\n            instrumentationKey: undefined,\r\n            namePrefix: undefined,\r\n            samplingPercentage: undefined\r\n        };\r\n    }\r\n\r\n    private _isSampledIn(envelope: ITelemetryItem): boolean {\r\n        return this._sample.isSampledIn(envelope);\r\n    }\r\n\r\n    /**\r\n     * Send Beacon API request\r\n     * @param payload {string} - The data payload to be sent.\r\n     * @param isAsync {boolean} - not used\r\n     * Note: Beacon API does not support custom headers and we are not able to get\r\n     * appId from the backend for the correct correlation.\r\n     */\r\n    private _beaconSender(payload: string[], isAsync: boolean) {\r\n        var url = this._config.endpointUrl();\r\n        var batch = this._buffer.batchPayloads(payload);\r\n\r\n        // Chrome only allows CORS-safelisted values for the sendBeacon data argument\r\n        // see: https://bugs.chromium.org/p/chromium/issues/detail?id=720283\r\n        let plainTextBatch = new Blob([batch], { type: 'text/plain;charset=UTF-8' });\r\n\r\n        // The sendBeacon method returns true if the user agent is able to successfully queue the data for transfer. Otherwise it returns false.\r\n        var queued = navigator.sendBeacon(url, plainTextBatch);\r\n\r\n        if (queued) {\r\n            this._buffer.markAsSent(payload);\r\n            // no response from beaconSender, clear buffer\r\n            this._onSuccess(payload, payload.length);\r\n        } else {\r\n            this._xhrSender(payload, true);\r\n            this._logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.TransmissionFailed, \". \" + \"Failed to send telemetry with Beacon API, retried with xhrSender.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send XMLHttpRequest\r\n     * @param payload {string} - The data payload to be sent.\r\n     * @param isAsync {boolean} - Indicates if the request should be sent asynchronously\r\n     */\r\n    private _xhrSender(payload: string[], isAsync: boolean) {\r\n        var xhr = new XMLHttpRequest();\r\n        xhr[DisabledPropertyName] = true;\r\n        xhr.open(\"POST\", this._config.endpointUrl(), isAsync);\r\n        xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n\r\n        // append Sdk-Context request header only in case of breeze endpoint\r\n        if (Util.isInternalApplicationInsightsEndpoint(this._config.endpointUrl())) {\r\n            xhr.setRequestHeader(RequestHeaders.sdkContextHeader, RequestHeaders.sdkContextHeaderAppIdRequest);\r\n        }\r\n\r\n        xhr.onreadystatechange = () => this._xhrReadyStateChange(xhr, payload, payload.length);\r\n        xhr.onerror = (event: ErrorEvent) => this._onError(payload, this._formatErrorMessageXhr(xhr), event);\r\n\r\n        // compose an array of payloads\r\n        var batch = this._buffer.batchPayloads(payload);\r\n        xhr.send(batch);\r\n\r\n        this._buffer.markAsSent(payload);\r\n    }\r\n\r\n    /**\r\n     * Parses the response from the backend.\r\n     * @param response - XMLHttpRequest or XDomainRequest response\r\n     */\r\n    private _parseResponse(response: any): IBackendResponse {\r\n        try {\r\n            if (response && response !== \"\") {\r\n                var result = JSON.parse(response);\r\n\r\n                if (result && result.itemsReceived && result.itemsReceived >= result.itemsAccepted &&\r\n                    result.itemsReceived - result.itemsAccepted == result.errors.length) {\r\n                    return result;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.InvalidBackendResponse,\r\n                \"Cannot parse the response. \" + Util.getExceptionName(e),\r\n                {\r\n                    response: response\r\n                });\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Resend payload. Adds payload back to the send buffer and setup a send timer (with exponential backoff).\r\n     * @param payload\r\n     */\r\n    private _resendPayload(payload: string[], linearFactor: number = 1) {\r\n        if (!payload || payload.length === 0) {\r\n            return;\r\n        }\r\n\r\n        this._buffer.clearSent(payload);\r\n        this._consecutiveErrors++;\r\n\r\n        for (var item of payload) {\r\n            this._buffer.enqueue(item);\r\n        }\r\n\r\n        // setup timer\r\n        this._setRetryTime(linearFactor);\r\n        this._setupTimer();\r\n    }\r\n\r\n    /** Calculates the time to wait before retrying in case of an error based on\r\n     * http://en.wikipedia.org/wiki/Exponential_backoff\r\n     */\r\n    private _setRetryTime(linearFactor: number) {\r\n        const SlotDelayInSeconds = 10;\r\n        var delayInSeconds: number;\r\n\r\n        if (this._consecutiveErrors <= 1) {\r\n            delayInSeconds = SlotDelayInSeconds;\r\n        } else {\r\n            var backOffSlot = (Math.pow(2, this._consecutiveErrors) - 1) / 2;\r\n            // tslint:disable-next-line:insecure-random\r\n            var backOffDelay = Math.floor(Math.random() * backOffSlot * SlotDelayInSeconds) + 1;\r\n            backOffDelay = linearFactor * backOffDelay;\r\n            delayInSeconds = Math.max(Math.min(backOffDelay, 3600), SlotDelayInSeconds);\r\n        }\r\n\r\n        // TODO: Log the backoff time like the C# version does.\r\n        var retryAfterTimeSpan = Date.now() + (delayInSeconds * 1000);\r\n\r\n        // TODO: Log the retry at time like the C# version does.\r\n        this._retryAt = retryAfterTimeSpan;\r\n    }\r\n\r\n    /**\r\n     * Sets up the timer which triggers actually sending the data.\r\n     */\r\n    private _setupTimer() {\r\n        if (!this._timeoutHandle) {\r\n            var retryInterval = this._retryAt ? Math.max(0, this._retryAt - Date.now()) : 0;\r\n            var timerValue = Math.max(this._config.maxBatchInterval(), retryInterval);\r\n\r\n            this._timeoutHandle = setTimeout(() => {\r\n                this.triggerSend();\r\n            }, timerValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the SDK should resend the payload after receiving this status code from the backend.\r\n     * @param statusCode\r\n     */\r\n    private _isRetriable(statusCode: number): boolean {\r\n        return statusCode == 408 // Timeout\r\n            || statusCode == 429 // Too many requests.\r\n            || statusCode == 500 // Internal server error.\r\n            || statusCode == 503; // Service unavailable.\r\n    }\r\n\r\n    private _formatErrorMessageXhr(xhr: XMLHttpRequest, message?: string): string {\r\n        if (xhr) {\r\n            return \"XMLHttpRequest,Status:\" + xhr.status + \",Response:\" + xhr.responseText || xhr.response || \"\";\r\n        }\r\n\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Send XDomainRequest\r\n     * @param payload {string} - The data payload to be sent.\r\n     * @param isAsync {boolean} - Indicates if the request should be sent asynchronously\r\n     *\r\n     * Note: XDomainRequest does not support sync requests. This 'isAsync' parameter is added\r\n     * to maintain consistency with the xhrSender's contract\r\n     * Note: XDomainRequest does not support custom headers and we are not able to get\r\n     * appId from the backend for the correct correlation.\r\n     */\r\n    private _xdrSender(payload: string[], isAsync: boolean) {\r\n        var xdr = new XDomainRequest();\r\n        xdr.onload = () => this._xdrOnLoad(xdr, payload);\r\n        xdr.onerror = (event: ErrorEvent) => this._onError(payload, this._formatErrorMessageXdr(xdr), event);\r\n\r\n        // XDomainRequest requires the same protocol as the hosting page.\r\n        // If the protocol doesn't match, we can't send the telemetry :(.\r\n        var hostingProtocol = window.location && window.location.protocol\r\n        if (this._config.endpointUrl().lastIndexOf(hostingProtocol, 0) !== 0) {\r\n            this._logger.throwInternal(\r\n                LoggingSeverity.WARNING,\r\n                _InternalMessageId.TransmissionFailed, \". \" +\r\n                \"Cannot send XDomain request. The endpoint URL protocol doesn't match the hosting page protocol.\");\r\n\r\n            this._buffer.clear();\r\n            return;\r\n        }\r\n\r\n        var endpointUrl = this._config.endpointUrl().replace(/^(https?:)/, \"\");\r\n        xdr.open('POST', endpointUrl);\r\n\r\n        // compose an array of payloads\r\n        var batch = this._buffer.batchPayloads(payload);\r\n        xdr.send(batch);\r\n\r\n        this._buffer.markAsSent(payload);\r\n    }\r\n\r\n    private _formatErrorMessageXdr(xdr: IXDomainRequest, message?: string): string {\r\n        if (xdr) {\r\n            return \"XDomainRequest,Response:\" + xdr.responseText || \"\";\r\n        }\r\n\r\n        return message;\r\n    }\r\n}\r\n"]}