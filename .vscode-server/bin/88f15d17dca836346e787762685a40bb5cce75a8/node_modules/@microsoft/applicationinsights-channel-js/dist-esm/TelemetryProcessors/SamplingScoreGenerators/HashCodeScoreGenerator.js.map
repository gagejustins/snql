{"version":3,"file":"HashCodeScoreGenerator.js","sourceRoot":"","sources":["../../../src/TelemetryProcessors/SamplingScoreGenerators/HashCodeScoreGenerator.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC;IAAA;IA+BA,CAAC;IAxBU,iDAAgB,GAAvB,UAAwB,GAAW;QAC/B,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,sBAAsB,CAAC,aAAa,CAAC;QACzE,MAAM,CAAC,KAAK,GAAG,GAAG,CAAC;IACvB,CAAC;IAEM,4CAAW,GAAlB,UAAmB,KAAa;QAC5B,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,CAAC,CAAC;QAAC,CAAC;QAE9B,OAAO,KAAK,CAAC,MAAM,GAAG,sBAAsB,CAAC,gBAAgB,EAAE,CAAC;YAC5D,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;QAED,kHAAkH;QAClH,IAAI,IAAI,GAAW,IAAI,CAAC;QAExB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YAC5C,IAAI,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAClD,kJAAkJ;YAClJ,0FAA0F;YAC1F,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;QACvB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IA7BD,yDAAyD;IAC3C,oCAAa,GAAW,UAAU,CAAC;IAEjD,2FAA2F;IAC5E,uCAAgB,GAAW,CAAC,CAAC;IA0BhD,6BAAC;CAAA,AA/BD,IA+BC;SA/BY,sBAAsB","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport class HashCodeScoreGenerator {\r\n    // We're using 32 bit math, hence max value is (2^31 - 1)\r\n    public static INT_MAX_VALUE: number = 2147483647;\r\n\r\n    // (Magic number) DJB algorithm can't work on shorter strings (results in poor distribution\r\n    private static MIN_INPUT_LENGTH: number = 8;\r\n\r\n    public getHashCodeScore(key: string): number {\r\n        var score = this.getHashCode(key) / HashCodeScoreGenerator.INT_MAX_VALUE;\r\n        return score * 100;\r\n    }\r\n\r\n    public getHashCode(input: string): number {\r\n        if (input == \"\") { return 0; }\r\n\r\n        while (input.length < HashCodeScoreGenerator.MIN_INPUT_LENGTH) {\r\n            input = input.concat(input);\r\n        }\r\n\r\n        // 5381 is a magic number: http://stackoverflow.com/questions/10696223/reason-for-5381-number-in-djb-hash-function\r\n        var hash: number = 5381;\r\n\r\n        for (var i: number = 0; i < input.length; ++i) {\r\n            hash = ((hash << 5) + hash) + input.charCodeAt(i);\r\n            // 'hash' is of number type which means 53 bit integer (http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types-number-type)\r\n            // 'hash & hash' will keep it 32 bit integer - just to make it clearer what the result is.\r\n            hash = hash & hash;\r\n        }\r\n\r\n        return Math.abs(hash);\r\n    }\r\n}"]}