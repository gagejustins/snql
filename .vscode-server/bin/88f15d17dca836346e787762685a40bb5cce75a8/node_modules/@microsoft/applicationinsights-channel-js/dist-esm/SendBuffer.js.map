{"version":3,"file":"SendBuffer.js","sourceRoot":"","sources":["../src/SendBuffer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Util } from '@microsoft/applicationinsights-common';\r\nimport { IDiagnosticLogger, LoggingSeverity, _InternalMessageId } from '@microsoft/applicationinsights-core-js';\r\nimport { ISenderConfig } from './Interfaces';\r\n\r\nexport interface ISendBuffer {\r\n    /**\r\n     * Enqueue the payload\r\n     */\r\n    enqueue: (payload: string) => void;\r\n\r\n    /**\r\n     * Returns the number of elements in the buffer\r\n     */\r\n    count: () => number;\r\n\r\n    /**\r\n     * Clears the buffer\r\n     */\r\n    clear: () => void;\r\n\r\n    /**\r\n     * Returns items stored in the buffer\r\n     */\r\n    getItems: () => string[];\r\n\r\n    /**\r\n     * Build a batch of all elements in the payload array\r\n     */\r\n    batchPayloads: (payload: string[]) => string;\r\n\r\n    /**\r\n     * Moves items to the SENT_BUFFER.\r\n     * The buffer holds items which were sent, but we haven't received any response from the backend yet.\r\n     */\r\n    markAsSent: (payload: string[]) => void;\r\n\r\n    /**\r\n     * Removes items from the SENT_BUFFER. Should be called on successful response from the backend.\r\n     */\r\n    clearSent: (payload: string[]) => void;\r\n}\r\n\r\n/*\r\n * An array based send buffer.\r\n */\r\nexport class ArraySendBuffer implements ISendBuffer {\r\n    private _config: ISenderConfig;\r\n    private _buffer: string[];\r\n\r\n    constructor(config: ISenderConfig) {\r\n        this._config = config;\r\n\r\n        this._buffer = [];\r\n    }\r\n\r\n    public enqueue(payload: string) {\r\n        this._buffer.push(payload);\r\n    }\r\n\r\n    public count(): number {\r\n        return this._buffer.length;\r\n    }\r\n\r\n    public clear() {\r\n        this._buffer.length = 0;\r\n    }\r\n\r\n    public getItems(): string[] {\r\n        return this._buffer.slice(0);\r\n    }\r\n\r\n    public batchPayloads(payload: string[]): string {\r\n        if (payload && payload.length > 0) {\r\n            var batch = this._config.emitLineDelimitedJson() ?\r\n                payload.join(\"\\n\") :\r\n                \"[\" + payload.join(\",\") + \"]\";\r\n\r\n            return batch;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public markAsSent(payload: string[]) {\r\n        this.clear();\r\n    }\r\n\r\n    public clearSent(payload: string[]) {\r\n        // not supported\r\n    }\r\n}\r\n\r\n/*\r\n * Session storege buffer holds a copy of all unsent items in the browser session storage.\r\n */\r\nexport class SessionStorageSendBuffer implements ISendBuffer {\r\n    static BUFFER_KEY = \"AI_buffer\";\r\n    static SENT_BUFFER_KEY = \"AI_sentBuffer\";\r\n\r\n    // Maximum number of payloads stored in the buffer. If the buffer is full, new elements will be dropped.\r\n    static MAX_BUFFER_SIZE = 2000;\r\n    private _bufferFullMessageSent = false;\r\n\r\n    // An in-memory copy of the buffer. A copy is saved to the session storage on enqueue() and clear().\r\n    // The buffer is restored in a constructor and contains unsent events from a previous page.\r\n    private _buffer: string[];\r\n    private _config: ISenderConfig;\r\n\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    constructor(logger: IDiagnosticLogger, config: ISenderConfig) {\r\n        this._logger = logger;\r\n        this._config = config;\r\n\r\n        var bufferItems = this.getBuffer(SessionStorageSendBuffer.BUFFER_KEY);\r\n        var notDeliveredItems = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n\r\n        this._buffer = bufferItems.concat(notDeliveredItems);\r\n\r\n        // If the buffer has too many items, drop items from the end.\r\n        if (this._buffer.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n            this._buffer.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;\r\n        }\r\n\r\n        // update DataLossAnalyzer with the number of recovered items\r\n        // Uncomment if you want to use DataLossanalyzer\r\n        // DataLossAnalyzer.itemsRestoredFromSessionBuffer = this._buffer.length;\r\n\r\n        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n    }\r\n\r\n    public enqueue(payload: string) {\r\n        if (this._buffer.length >= SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n            // sent internal log only once per page view\r\n            if (!this._bufferFullMessageSent) {\r\n                this._logger.throwInternal(\r\n                    LoggingSeverity.WARNING,\r\n                    _InternalMessageId.SessionStorageBufferFull,\r\n                    \"Maximum buffer size reached: \" + this._buffer.length,\r\n                    true);\r\n                this._bufferFullMessageSent = true;\r\n            }\r\n            return;\r\n        }\r\n\r\n        this._buffer.push(payload);\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n    }\r\n\r\n    public count(): number {\r\n        return this._buffer.length;\r\n    }\r\n\r\n    public clear() {\r\n        this._buffer.length = 0;\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, []);\r\n        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, []);\r\n\r\n        this._bufferFullMessageSent = false;\r\n    }\r\n\r\n    public getItems(): string[] {\r\n        return this._buffer.slice(0)\r\n    }\r\n\r\n    public batchPayloads(payload: string[]): string {\r\n        if (payload && payload.length > 0) {\r\n            var batch = this._config.emitLineDelimitedJson() ?\r\n                payload.join(\"\\n\") :\r\n                \"[\" + payload.join(\",\") + \"]\";\r\n\r\n            return batch;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public markAsSent(payload: string[]) {\r\n        this._buffer = this.removePayloadsFromBuffer(payload, this._buffer);\r\n        this.setBuffer(SessionStorageSendBuffer.BUFFER_KEY, this._buffer);\r\n\r\n        var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n        if (sentElements instanceof Array && payload instanceof Array) {\r\n            sentElements = sentElements.concat(payload);\r\n\r\n            if (sentElements.length > SessionStorageSendBuffer.MAX_BUFFER_SIZE) {\r\n                // We send telemetry normally. If the SENT_BUFFER is too big we don't add new elements\r\n                // until we receive a response from the backend and the buffer has free space again (see clearSent method)\r\n                this._logger.throwInternal(\r\n                    LoggingSeverity.CRITICAL,\r\n                    _InternalMessageId.SessionStorageBufferFull,\r\n                    \"Sent buffer reached its maximum size: \" + sentElements.length,\r\n                    true);\r\n\r\n                sentElements.length = SessionStorageSendBuffer.MAX_BUFFER_SIZE;\r\n            }\r\n\r\n            this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\r\n        }\r\n    }\r\n\r\n    public clearSent(payload: string[]) {\r\n        var sentElements = this.getBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY);\r\n        sentElements = this.removePayloadsFromBuffer(payload, sentElements);\r\n\r\n        this.setBuffer(SessionStorageSendBuffer.SENT_BUFFER_KEY, sentElements);\r\n    }\r\n\r\n    private removePayloadsFromBuffer(payloads: string[], buffer: string[]): string[] {\r\n        var remaining: string[] = [];\r\n\r\n        for (var i in buffer) {\r\n            var contains = false;\r\n            for (var j in payloads) {\r\n                if (payloads[j] === buffer[i]) {\r\n                    contains = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!contains) {\r\n                remaining.push(buffer[i]);\r\n            }\r\n        };\r\n\r\n        return remaining;\r\n    }\r\n\r\n    private getBuffer(key: string): string[] {\r\n        let prefixedKey = key;\r\n        try {\r\n            prefixedKey = this._config.namePrefix && this._config.namePrefix() ? this._config.namePrefix() + \"_\" + prefixedKey : prefixedKey;\r\n            var bufferJson = Util.getSessionStorage(this._logger, prefixedKey);\r\n            if (bufferJson) {\r\n                var buffer: string[] = JSON.parse(bufferJson);\r\n                if (buffer) {\r\n                    return buffer;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this._logger.throwInternal(LoggingSeverity.CRITICAL,\r\n                _InternalMessageId.FailedToRestoreStorageBuffer,\r\n                \" storage key: \" + prefixedKey + \", \" + Util.getExceptionName(e),\r\n                { exception: Util.dump(e) });\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    private setBuffer(key: string, buffer: string[]) {\r\n        let prefixedKey = key;\r\n        try {\r\n            prefixedKey = this._config.namePrefix && this._config.namePrefix() ? this._config.namePrefix() + \"_\" + prefixedKey : prefixedKey;\r\n            var bufferJson = JSON.stringify(buffer);\r\n            Util.setSessionStorage(this._logger, prefixedKey, bufferJson);\r\n        } catch (e) {\r\n            // if there was an error, clear the buffer\r\n            // telemetry is stored in the _buffer array so we won't loose any items\r\n            Util.setSessionStorage(this._logger, prefixedKey, JSON.stringify([]));\r\n\r\n            this._logger.throwInternal(LoggingSeverity.WARNING,\r\n                _InternalMessageId.FailedToSetStorageBuffer,\r\n                \" storage key: \" + prefixedKey + \", \" + Util.getExceptionName(e) + \". Buffer cleared\",\r\n                { exception: Util.dump(e) });\r\n        }\r\n    }\r\n}"]}