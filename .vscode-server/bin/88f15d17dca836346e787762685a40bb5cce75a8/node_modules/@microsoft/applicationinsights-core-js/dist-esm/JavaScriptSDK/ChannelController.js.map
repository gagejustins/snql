{"version":3,"file":"ChannelController.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/ChannelController.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { ITelemetryPlugin, IPlugin } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { IChannelControls } from \"../JavaScriptSDK.Interfaces/IChannelControls\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { _InternalLogMessage } from \"./DiagnosticLogger\";\r\n\r\n\"use strict\";\r\n\r\nconst ChannelControllerPriority = 500;\r\nconst ChannelValidationMessage = \"Channel has invalid priority\";\r\n\r\nexport class ChannelController implements ITelemetryPlugin {\r\n\r\n    private channelQueue: Array<IChannelControls[]>;\r\n\r\n    public processTelemetry(item: ITelemetryItem) {\r\n        this.channelQueue.forEach(queues => {\r\n            // pass on to first item in queue\r\n            if (queues.length > 0) {\r\n                queues[0].processTelemetry(item);\r\n            }\r\n        });\r\n    }\r\n\r\n    public get ChannelControls(): Array<IChannelControls[]> {\r\n        return this.channelQueue;\r\n    }\r\n\r\n    identifier: string = \"ChannelControllerPlugin\";\r\n\r\n    setNextPlugin: (next: ITelemetryPlugin) => {}; // channel controller is last in pipeline\r\n\r\n    priority: number = ChannelControllerPriority; // in reserved range 100 to 200\r\n\r\n    initialize(config: IConfiguration, core: IAppInsightsCore, extensions: IPlugin[]) {\r\n        if ((<any>config).isCookieUseDisabled) {\r\n            CoreUtils.disableCookies();\r\n        }\r\n\r\n        this.channelQueue = new Array<IChannelControls[]>();\r\n        if (config.channels) {\r\n            let invalidChannelIdentifier = undefined;\r\n            config.channels.forEach(queue => {\r\n\r\n                if (queue && queue.length > 0) {\r\n                    queue = queue.sort((a, b) => { // sort based on priority within each queue\r\n                        return a.priority - b.priority;\r\n                    });\r\n\r\n                    // Initialize each plugin\r\n                    queue.forEach(queueItem => {\r\n                        if (queueItem.priority < ChannelControllerPriority) {\r\n                            invalidChannelIdentifier = queueItem.identifier;\r\n                        }\r\n                        queueItem.initialize(config, core, extensions)\r\n                    });\r\n\r\n                    if (invalidChannelIdentifier) {\r\n                        throw Error(ChannelValidationMessage + invalidChannelIdentifier);\r\n                    }\r\n\r\n                    for (let i = 1; i < queue.length; i++) {\r\n                        queue[i - 1].setNextPlugin(queue[i]); // setup processing chain\r\n                    }\r\n\r\n                    this.channelQueue.push(queue);\r\n                }\r\n            });\r\n        }\r\n\r\n        let arr = new Array<IChannelControls>();\r\n\r\n        for (let i = 0; i < extensions.length; i++) {\r\n            let plugin = <IChannelControls>extensions[i];\r\n            if (plugin.priority > ChannelControllerPriority) {\r\n                arr.push(plugin);\r\n            }\r\n        }\r\n\r\n        if (arr.length > 0) {\r\n            // sort if not sorted\r\n            arr = arr.sort((a, b) => {\r\n                return a.priority - b.priority;\r\n            });\r\n\r\n            // Initialize each plugin\r\n            arr.forEach(queueItem => queueItem.initialize(config, core, extensions));\r\n\r\n            // setup next plugin\r\n            for (let i = 1; i < arr.length; i++) {\r\n                arr[i - 1].setNextPlugin(arr[i]);\r\n            }\r\n\r\n            this.channelQueue.push(arr);\r\n        }\r\n    }\r\n}\r\n\r\n"]}