{"version":3,"file":"DiagnosticLogger.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/DiagnosticLogger.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\"\r\nimport { _InternalMessageId, LoggingSeverity } from \"../JavaScriptSDK.Enums/LoggingEnums\";\r\nimport { IDiagnosticLogger } from \"../JavaScriptSDK.Interfaces/IDiagnosticLogger\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { AppInsightsCore } from \"./AppInsightsCore\";\r\n\r\nexport class _InternalLogMessage{\r\n    public message: string;\r\n    public messageId: _InternalMessageId;\r\n\r\n    public static dataType: string = \"MessageData\";\r\n\r\n    /**\r\n     * For user non actionable traces use AI Internal prefix.\r\n     */\r\n    private static AiNonUserActionablePrefix = \"AI (Internal): \";\r\n\r\n    /**\r\n     * Prefix of the traces in portal.\r\n     */\r\n    private static AiUserActionablePrefix = \"AI: \";\r\n\r\n    constructor(msgId: _InternalMessageId, msg: string, isUserAct = false, properties?: Object) {\r\n\r\n        this.messageId = msgId;\r\n        this.message =\r\n            (isUserAct ? _InternalLogMessage.AiUserActionablePrefix : _InternalLogMessage.AiNonUserActionablePrefix) +\r\n            msgId;\r\n\r\n        var diagnosticText =\r\n            (msg ? \" message:\" + _InternalLogMessage.sanitizeDiagnosticText(msg) : \"\") +\r\n            (properties ? \" props:\" + _InternalLogMessage.sanitizeDiagnosticText(JSON.stringify(properties)) : \"\");\r\n\r\n        this.message += diagnosticText;\r\n    }\r\n\r\n    private static sanitizeDiagnosticText(text: string) {\r\n        return \"\\\"\" + text.replace(/\\\"/g, \"\") + \"\\\"\";\r\n    }\r\n}\r\n\r\nexport class DiagnosticLogger implements IDiagnosticLogger {\r\n\r\n    /**\r\n    *  Session storage key for the prefix for the key indicating message type already logged\r\n    */\r\n    private AIInternalMessagePrefix: string = \"AITR_\";\r\n\r\n    /**\r\n     * When this is true the SDK will throw exceptions to aid in debugging.\r\n     */\r\n    public enableDebugExceptions = () => false;\r\n\r\n    /**\r\n     * 0: OFF\r\n     * 1: CRITICAL (default)\r\n     * 2: >= WARNING\r\n     */\r\n    public consoleLoggingLevel = () => 1;\r\n\r\n    /**\r\n     * 0: OFF (default)\r\n     * 1: CRITICAL\r\n     * 2: >= WARNING\r\n     */\r\n    public telemetryLoggingLevel = () => 0;\r\n\r\n    /**\r\n     * The maximum number of internal messages allowed to be sent per page view\r\n     */\r\n    public maxInternalMessageLimit = () => { return 25; }\r\n\r\n    /**\r\n     * The internal logging queue\r\n     */\r\n    public queue: Array<_InternalLogMessage> = [];\r\n\r\n    /**\r\n     * Count of internal messages sent\r\n     */\r\n    private _messageCount = 0;\r\n\r\n    /**\r\n     * Holds information about what message types were already logged to console or sent to server.\r\n     */\r\n    private _messageLogged: { [msg: number]: boolean } = {};\r\n\r\n    constructor(config?: IConfiguration) {\r\n        if (CoreUtils.isNullOrUndefined(config)) {\r\n            // TODO: Use default config\r\n            // config = AppInsightsCore.defaultConfig;\r\n\r\n            // For now, use defaults specified in DiagnosticLogger members;\r\n            return;\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelConsole)) {\r\n            this.consoleLoggingLevel = () => { return config.loggingLevelConsole };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelTelemetry)) {\r\n            this.telemetryLoggingLevel = () => { return config.loggingLevelTelemetry };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.maxMessageLimit)) {\r\n            this.maxInternalMessageLimit = () => { return config.maxMessageLimit; }\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.enableDebugExceptions)) {\r\n            this.enableDebugExceptions = () => { return config.enableDebugExceptions };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The log message.\r\n     */\r\n    public throwInternal(severity: LoggingSeverity, msgId: _InternalMessageId, msg: string, properties?: Object, isUserAct = false) {\r\n        let message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n\r\n        if (this.enableDebugExceptions()) {\r\n            throw message;\r\n        } else {\r\n            if (typeof (message) !== \"undefined\" && !!message) {\r\n                if (typeof (message.message) !== \"undefined\") {\r\n                    if (isUserAct) {\r\n                        // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                        var messageKey: number = +message.messageId;\r\n\r\n                        if (!this._messageLogged[messageKey] || this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                            this._messageLogged[messageKey] = true;\r\n                        }\r\n                    } else {\r\n                        // don't log internal AI traces in the console, unless the verbose logging is enabled\r\n                        if (this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                        }\r\n                    }\r\n\r\n                    this.logInternalMessage(severity, message);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This will write a warning to the console if possible\r\n     * @param message {string} - The warning message\r\n     */\r\n    public warnToConsole(message: string) {\r\n        if (typeof console !== \"undefined\" && !!console) {\r\n            if (typeof console.warn === \"function\") {\r\n                console.warn(message);\r\n            } else if (typeof console.log === \"function\") {\r\n                console.log(message);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the internal message count\r\n     */\r\n    public resetInternalMessageCount(): void {\r\n        this._messageCount = 0;\r\n        this._messageLogged = {};\r\n    }\r\n\r\n    /**\r\n     * Logs a message to the internal queue.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The message to log.\r\n     */\r\n    private logInternalMessage(severity: LoggingSeverity, message: _InternalLogMessage): void {\r\n        if (this._areInternalMessagesThrottled()) {\r\n            return;\r\n        }\r\n\r\n        // check if this message type was already logged for this session and if so, don't log it again\r\n        var logMessage = true;\r\n        var messageKey = this.AIInternalMessagePrefix + message.messageId;\r\n\r\n        // if the session storage is not available, limit to only one message type per page view\r\n        if (this._messageLogged[messageKey]) {\r\n            logMessage = false;\r\n        } else {\r\n            this._messageLogged[messageKey] = true;\r\n        }\r\n\r\n        if (logMessage) {\r\n            // Push the event in the internal queue\r\n            if (severity <= this.telemetryLoggingLevel()) {\r\n                this.queue.push(message);\r\n                this._messageCount++;\r\n            }\r\n\r\n            // When throttle limit reached, send a special event\r\n            if (this._messageCount == this.maxInternalMessageLimit()) {\r\n                var throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                var throttleMessage = new _InternalLogMessage(_InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, false);\r\n\r\n                this.queue.push(throttleMessage);\r\n                this.warnToConsole(throttleLimitMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates whether the internal events are throttled\r\n     */\r\n    private _areInternalMessagesThrottled(): boolean {\r\n        return this._messageCount >= this.maxInternalMessageLimit();\r\n    }\r\n}\r\n"]}