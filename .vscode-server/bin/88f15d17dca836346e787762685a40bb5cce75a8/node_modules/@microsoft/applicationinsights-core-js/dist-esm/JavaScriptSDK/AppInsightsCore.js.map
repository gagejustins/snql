{"version":3,"file":"AppInsightsCore.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/AppInsightsCore.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { IAppInsightsCore } from \"../JavaScriptSDK.Interfaces/IAppInsightsCore\"\r\nimport { IConfiguration } from \"../JavaScriptSDK.Interfaces/IConfiguration\";\r\nimport { ITelemetryPlugin, IPlugin } from \"../JavaScriptSDK.Interfaces/ITelemetryPlugin\";\r\nimport { IChannelControls } from \"../JavaScriptSDK.Interfaces/IChannelControls\";\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { INotificationListener } from \"../JavaScriptSDK.Interfaces/INotificationListener\";\r\nimport { EventsDiscardedReason } from \"../JavaScriptSDK.Enums/EventsDiscardedReason\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { NotificationManager } from \"./NotificationManager\";\r\nimport { IDiagnosticLogger } from \"../JavaScriptSDK.Interfaces/IDiagnosticLogger\";\r\nimport { _InternalLogMessage, DiagnosticLogger } from \"./DiagnosticLogger\";\r\nimport { ChannelController } from './ChannelController';\r\n\r\n\"use strict\";\r\n\r\nconst validationError = \"Extensions must provide callback to initialize\";\r\n\r\nexport class AppInsightsCore implements IAppInsightsCore {\r\n\r\n    public config: IConfiguration;\r\n    public static defaultConfig: IConfiguration;\r\n    public logger: IDiagnosticLogger;\r\n\r\n    public _extensions: Array<IPlugin>;\r\n    private _notificationManager: NotificationManager;\r\n    private _isInitialized: boolean = false;\r\n    private _channelController: ChannelController;\r\n\r\n    constructor() {\r\n        this._extensions = new Array<IPlugin>();\r\n        this._channelController = new ChannelController();\r\n    }\r\n\r\n    initialize(config: IConfiguration, extensions: IPlugin[]): void {\r\n\r\n        // Make sure core is only initialized once\r\n        if (this._isInitialized) {\r\n            throw Error(\"Core should not be initialized more than once\");\r\n        }\r\n\r\n        if (!config || CoreUtils.isNullOrUndefined(config.instrumentationKey)) {\r\n            throw Error(\"Please provide instrumentation key\");\r\n        }\r\n\r\n        this.config = config;\r\n\r\n        this._notificationManager = new NotificationManager();\r\n        this.config.extensions = CoreUtils.isNullOrUndefined(this.config.extensions) ? [] : this.config.extensions;\r\n\r\n        // add notification to the extensions in the config so other plugins can access it\r\n        this.config.extensionConfig = CoreUtils.isNullOrUndefined(this.config.extensionConfig) ? {} : this.config.extensionConfig;\r\n        this.config.extensionConfig.NotificationManager = this._notificationManager;\r\n\r\n        this.logger = new DiagnosticLogger(config);\r\n\r\n        // Concat all available extensions \r\n        this._extensions.push(...extensions, ...this.config.extensions);\r\n\r\n        // Initial validation \r\n        this._extensions.forEach((extension: ITelemetryPlugin) => {\r\n            let isValid = true;\r\n            if (CoreUtils.isNullOrUndefined(extension) || CoreUtils.isNullOrUndefined(extension.initialize)) {\r\n                isValid = false;\r\n            }\r\n            if (!isValid) {\r\n                throw Error(validationError);\r\n            }\r\n        });\r\n\r\n        // Initial validation complete\r\n\r\n        this._extensions.push(this._channelController);\r\n        // Sort by priority\r\n        this._extensions = this._extensions.sort((a, b) => {\r\n            let extA = (<ITelemetryPlugin>a);\r\n            let extB = (<ITelemetryPlugin>b);\r\n            let typeExtA = typeof extA.processTelemetry;\r\n            let typeExtB = typeof extB.processTelemetry;\r\n            if (typeExtA === 'function' && typeExtB === 'function') {\r\n                return extA.priority - extB.priority;\r\n            }\r\n\r\n            if (typeExtA === 'function' && typeExtB !== 'function') {\r\n                // keep non telemetryplugin specific extensions at start\r\n                return 1;\r\n            }\r\n\r\n            if (typeExtA !== 'function' && typeExtB === 'function') {\r\n                return -1;\r\n            }\r\n        });\r\n        // sort complete\r\n\r\n        // Check if any two extensions have the same priority, then warn to console\r\n        let priority = {};\r\n        this._extensions.forEach(ext => {\r\n            let t = (<ITelemetryPlugin>ext);\r\n            if (t && t.priority) {\r\n                if (!CoreUtils.isNullOrUndefined(priority[t.priority])) {\r\n                    this.logger.warnToConsole(\"Two extensions have same priority\" + priority[t.priority] + \", \" + t.identifier);\r\n                } else {\r\n                    priority[t.priority] = t.identifier; // set a value\r\n                }\r\n            }\r\n        });\r\n\r\n        let c = -1;\r\n        // Set next plugin for all until channel controller\r\n        for (let idx = 0; idx < this._extensions.length - 1; idx++) {\r\n            let curr = <ITelemetryPlugin>(this._extensions[idx]);\r\n            if (curr && typeof curr.processTelemetry !== 'function') {\r\n                // these are initialized only, allowing an entry point for extensions to be initialized when SDK initializes\r\n                continue;\r\n            }\r\n\r\n            if (curr.priority === this._channelController.priority) {\r\n                c = idx + 1;\r\n                break; // channel controller will set remaining pipeline\r\n            }\r\n\r\n            (<any>this._extensions[idx]).setNextPlugin(this._extensions[idx + 1]); // set next plugin\r\n        }\r\n\r\n        // initialize channel controller first, this will initialize all channel plugins\r\n        this._channelController.initialize(this.config, this, this._extensions);\r\n\r\n        // initialize remaining regular plugins\r\n        this._extensions.forEach(ext => {\r\n            let e = ext as ITelemetryPlugin;\r\n            if (e && e.priority < this._channelController.priority) {\r\n                ext.initialize(this.config, this, this._extensions); // initialize\r\n            }\r\n        });\r\n\r\n        // Remove sender channels from main list\r\n        if (c < this._extensions.length) {\r\n            this._extensions.splice(c);\r\n        }\r\n\r\n        if (this.getTransmissionControls().length === 0) {\r\n            throw new Error(\"No channels available\");\r\n        }\r\n        this._isInitialized = true;\r\n    }\r\n\r\n    getTransmissionControls(): Array<IChannelControls[]> {\r\n        return this._channelController.ChannelControls;\r\n    }\r\n\r\n    track(telemetryItem: ITelemetryItem) {\r\n        if (telemetryItem === null) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            // throw error\r\n            throw Error(\"Invalid telemetry item\");\r\n        }\r\n\r\n        if (!telemetryItem.iKey) {\r\n            // setup default iKey if not passed in\r\n            telemetryItem.iKey = this.config.instrumentationKey;\r\n        }\r\n        if (!telemetryItem.time) {\r\n            // add default timestamp if not passed in\r\n            telemetryItem.time = new Date().toISOString();\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.ver)) {\r\n            // CommonSchema 4.0\r\n            telemetryItem.ver = \"4.0\";\r\n        }\r\n\r\n        // do basic validation before sending it through the pipeline\r\n        this._validateTelmetryItem(telemetryItem);\r\n\r\n        // invoke any common telemetry processors before sending through pipeline\r\n        if (this._extensions.length == 0) {\r\n            this._channelController.processTelemetry(telemetryItem); // Pass to Channel controller so data is sent to correct channel queues\r\n        }\r\n        let i = 0;\r\n        while (i < this._extensions.length) {\r\n            if ((<any>this._extensions[i]).processTelemetry) {\r\n                (<any>this._extensions[i]).processTelemetry(telemetryItem); // pass on to first extension that can support processing\r\n                break;\r\n            }\r\n\r\n            i++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.\r\n     * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be\r\n     * called.\r\n     * @param {INotificationListener} listener - An INotificationListener object.\r\n     */\r\n    addNotificationListener(listener: INotificationListener): void {\r\n        this._notificationManager.addNotificationListener(listener);\r\n    }\r\n\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - INotificationListener to remove.\r\n     */\r\n    removeNotificationListener(listener: INotificationListener): void {\r\n        this._notificationManager.removeNotificationListener(listener);\r\n    }\r\n\r\n    /**\r\n     * Periodically check logger.queue for\r\n     */\r\n    pollInternalLogs(): number {\r\n        let interval = this.config.diagnosticLogInterval;\r\n        if (!(interval > 0)) {\r\n            interval = 10000;\r\n        }\r\n\r\n        return <any>setInterval(() => {\r\n            const queue: Array<_InternalLogMessage> = this.logger.queue;\r\n\r\n            queue.forEach((logMessage: _InternalLogMessage) => {\r\n                const item: ITelemetryItem = {\r\n                    name: \"InternalMessageId: \" + logMessage.messageId,\r\n                    iKey: this.config.instrumentationKey,\r\n                    time: new Date().toISOString(),\r\n                    baseType: _InternalLogMessage.dataType,\r\n                    baseData: { message: logMessage.message }\r\n                };\r\n\r\n                this.track(item);\r\n            });\r\n            queue.length = 0;\r\n        }, interval);\r\n    }\r\n\r\n    private _validateTelmetryItem(telemetryItem: ITelemetryItem) {\r\n\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.name)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry name required\");\r\n        }\r\n\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.time)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry timestamp required\");\r\n        }\r\n\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.iKey)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry instrumentationKey required\");\r\n        }\r\n    }\r\n\r\n    private _notifyInvalidEvent(telemetryItem: ITelemetryItem): void {\r\n        this._notificationManager.eventsDiscarded([telemetryItem], EventsDiscardedReason.InvalidEvent);\r\n    }\r\n}\r\n\r\n"]}