import { CoreUtils } from "./CoreUtils";
"use strict";
var ChannelControllerPriority = 500;
var ChannelValidationMessage = "Channel has invalid priority";
var ChannelController = /** @class */ (function () {
    function ChannelController() {
        this.identifier = "ChannelControllerPlugin";
        this.priority = ChannelControllerPriority; // in reserved range 100 to 200
    }
    ChannelController.prototype.processTelemetry = function (item) {
        this.channelQueue.forEach(function (queues) {
            // pass on to first item in queue
            if (queues.length > 0) {
                queues[0].processTelemetry(item);
            }
        });
    };
    Object.defineProperty(ChannelController.prototype, "ChannelControls", {
        get: function () {
            return this.channelQueue;
        },
        enumerable: true,
        configurable: true
    });
    ChannelController.prototype.initialize = function (config, core, extensions) {
        var _this = this;
        if (config.isCookieUseDisabled) {
            CoreUtils.disableCookies();
        }
        this.channelQueue = new Array();
        if (config.channels) {
            var invalidChannelIdentifier_1 = undefined;
            config.channels.forEach(function (queue) {
                if (queue && queue.length > 0) {
                    queue = queue.sort(function (a, b) {
                        return a.priority - b.priority;
                    });
                    // Initialize each plugin
                    queue.forEach(function (queueItem) {
                        if (queueItem.priority < ChannelControllerPriority) {
                            invalidChannelIdentifier_1 = queueItem.identifier;
                        }
                        queueItem.initialize(config, core, extensions);
                    });
                    if (invalidChannelIdentifier_1) {
                        throw Error(ChannelValidationMessage + invalidChannelIdentifier_1);
                    }
                    for (var i = 1; i < queue.length; i++) {
                        queue[i - 1].setNextPlugin(queue[i]); // setup processing chain
                    }
                    _this.channelQueue.push(queue);
                }
            });
        }
        var arr = new Array();
        for (var i = 0; i < extensions.length; i++) {
            var plugin = extensions[i];
            if (plugin.priority > ChannelControllerPriority) {
                arr.push(plugin);
            }
        }
        if (arr.length > 0) {
            // sort if not sorted
            arr = arr.sort(function (a, b) {
                return a.priority - b.priority;
            });
            // Initialize each plugin
            arr.forEach(function (queueItem) { return queueItem.initialize(config, core, extensions); });
            // setup next plugin
            for (var i = 1; i < arr.length; i++) {
                arr[i - 1].setNextPlugin(arr[i]);
            }
            this.channelQueue.push(arr);
        }
    };
    return ChannelController;
}());
export { ChannelController };
//# sourceMappingURL=ChannelController.js.map