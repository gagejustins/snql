{"version":3,"file":"NotificationManager.js","sourceRoot":"","sources":["../../src/JavaScriptSDK/NotificationManager.ts"],"names":[],"mappings":"AAKA;;GAEG;AACH;IAAA;QACI,cAAS,GAA4B,EAAE,CAAC;IA+C5C,CAAC;IA7CG;;;OAGG;IACH,qDAAuB,GAAvB,UAAwB,QAA+B;QACnD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,wDAA0B,GAA1B,UAA2B,QAA+B;QACtD,IAAI,KAAK,GAAW,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrD,OAAO,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;YAChB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAChC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,wCAAU,GAAV,UAAW,MAAwB;QAAnC,iBAMC;gCALY,CAAC;YACN,EAAE,CAAC,CAAC,OAAK,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC/B,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,EAApC,CAAoC,EAAE,CAAC,CAAC,CAAC;YAC9D,CAAC;QACL,CAAC;;QAJD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC;oBAA7C,CAAC;SAIT;IACL,CAAC;IAED;;;;;OAKG;IACH,6CAAe,GAAf,UAAgB,MAAwB,EAAE,MAAc;QAAxD,iBAMC;gCALY,CAAC;YACN,EAAE,CAAC,CAAC,OAAK,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;gBACpC,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,EAAjD,CAAiD,EAAE,CAAC,CAAC,CAAC;YAC3E,CAAC;QACL,CAAC;;QAJD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC;oBAA7C,CAAC;SAIT;IACL,CAAC;IACL,0BAAC;AAAD,CAAC,AAhDD,IAgDC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ITelemetryItem } from \"../JavaScriptSDK.Interfaces/ITelemetryItem\";\r\nimport { INotificationListener } from \"../JavaScriptSDK.Interfaces/INotificationListener\";\r\n\r\n/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nexport class NotificationManager {\r\n    listeners: INotificationListener[] = [];\r\n\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {INotificationListener} listener - The notification listener to be added.\r\n     */\r\n    addNotificationListener(listener: INotificationListener): void {\r\n        this.listeners.push(listener);\r\n    }\r\n\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n     */\r\n    removeNotificationListener(listener: INotificationListener): void {\r\n        let index: number = this.listeners.indexOf(listener);\r\n        while (index > -1) {\r\n            this.listeners.splice(index, 1);\r\n            index = this.listeners.indexOf(listener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n     */\r\n    eventsSent(events: ITelemetryItem[]): void {\r\n        for (let i: number = 0; i < this.listeners.length; ++i) {\r\n            if (this.listeners[i].eventsSent) {\r\n                setTimeout(() => this.listeners[i].eventsSent(events), 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notification for events being discarded.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n     * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n     * constant should be used to check the different values.\r\n     */\r\n    eventsDiscarded(events: ITelemetryItem[], reason: number): void {\r\n        for (let i: number = 0; i < this.listeners.length; ++i) {\r\n            if (this.listeners[i].eventsDiscarded) {\r\n                setTimeout(() => this.listeners[i].eventsDiscarded(events, reason), 0);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}