{"version":3,"file":"IConfiguration.js","sourceRoot":"","sources":["../../src/JavaScriptSDK.Interfaces/IConfiguration.ts"],"names":[],"mappings":"AAKA,YAAY,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { ITelemetryPlugin } from \"./ITelemetryPlugin\";\r\nimport { IChannelControls } from \"./IChannelControls\";\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * Configuration provided to SDK core\r\n */\r\nexport interface IConfiguration {\r\n\r\n    /**\r\n    * Instrumentation key of resource\r\n    */\r\n    instrumentationKey: string; // todo: update later for multi-tenant?\r\n\r\n    /**\r\n     * Polling interval (in ms) for internal logging queue\r\n     */\r\n    diagnosticLogInterval?: number;\r\n\r\n    /**\r\n     * Maximum number of iKey transmitted logging telemetry per page view\r\n     */\r\n    maxMessageLimit?: number;\r\n\r\n    /**\r\n     * Console logging level. All logs with a severity level higher\r\n     * than the configured level will be printed to console. Otherwise \r\n     * they are suppressed. ie Level 2 will print both CRITICAL and\r\n     * WARNING logs to console, level 1 prints only CRITICAL.\r\n     * \r\n     * Note: Logs sent as telemetry to instrumentation key will also \r\n     * be logged to console if their severity meets the configured loggingConsoleLevel\r\n     * \r\n     * 0: ALL console logging off\r\n     * 1: logs to console: severity >= CRITICAL\r\n     * 2: logs to console: severity >= WARNING\r\n     */\r\n    loggingLevelConsole?: number;\r\n\r\n    /**\r\n     * Telemtry logging level to instrumentation key. All logs with a severity\r\n     * level higher than the configured level will sent as telemetry data to\r\n     * the configured instrumentation key.\r\n     * \r\n     * 0: ALL iKey logging off\r\n     * 1: logs to iKey: severity >= CRITICAL\r\n     * 2: logs to iKey: severity >= WARNING\r\n     */\r\n    loggingLevelTelemetry?: number\r\n\r\n    /**\r\n     * If enabled, uncaught exceptions will be thrown to help with debugging\r\n     */\r\n    enableDebugExceptions?: boolean;\r\n    \r\n    /**\r\n    * Endpoint where telemetry data is sent\r\n    */\r\n    endpointUrl?: string;\r\n\r\n    /**\r\n    * Extension configs loaded in SDK\r\n    */\r\n    extensionConfig?: { [key: string]: any }; // extension configs;\r\n\r\n    /**\r\n     * Additional plugins that should be loaded by core at runtime\r\n     */\r\n    extensions?: ITelemetryPlugin[];\r\n\r\n    /**\r\n     * Channel queues that is setup by caller in desired order. \r\n     * If channels are provided here, core will ignore any channels that are already setup, example if there is a SKU with an initialized channel\r\n     */\r\n    channels?: Array<IChannelControls[]>;\r\n}"]}