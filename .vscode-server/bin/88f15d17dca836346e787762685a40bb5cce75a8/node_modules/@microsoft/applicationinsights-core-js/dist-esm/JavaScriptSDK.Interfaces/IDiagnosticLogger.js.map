{"version":3,"file":"IDiagnosticLogger.js","sourceRoot":"","sources":["../../src/JavaScriptSDK.Interfaces/IDiagnosticLogger.ts"],"names":[],"mappings":"AAKA,YAAY,CAAA","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nimport { _InternalMessageId, LoggingSeverity } from \"../JavaScriptSDK.Enums/LoggingEnums\";\r\nimport { _InternalLogMessage } from \"../JavaScriptSDK/DiagnosticLogger\";\r\n\r\n\"use strict\"\r\n\r\nexport interface IDiagnosticLogger {\r\n    /**\r\n     * When this is true the SDK will throw exceptions to aid in debugging.\r\n     */\r\n    enableDebugExceptions: () => boolean;\r\n    \r\n    /**\r\n     * 0: OFF\r\n     * 1: only critical (default)\r\n     * 2: critical + info\r\n     */\r\n    consoleLoggingLevel: () => number;\r\n\r\n    /**\r\n     * 0: OFF (default)\r\n     * 1: CRITICAL\r\n     * 2: WARNING\r\n     */\r\n    telemetryLoggingLevel: () => number;\r\n\r\n    /**\r\n     * The maximum number of internal messages allowed to be sent per page view\r\n     */\r\n    maxInternalMessageLimit: () => number;\r\n\r\n    /**\r\n     * The internal logging queue\r\n     */\r\n    queue: Array<_InternalLogMessage>;\r\n\r\n    /**\r\n     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The log message.\r\n     */\r\n    throwInternal(severity: LoggingSeverity, msgId: _InternalMessageId, msg: string, properties?: Object, isUserAct?: boolean): void;\r\n\r\n    /**\r\n     * This will write a warning to the console if possible\r\n     * @param message {string} - The warning message\r\n     */\r\n    warnToConsole(message: string): void;\r\n\r\n    /**\r\n     * Resets the internal message count\r\n     */\r\n    resetInternalMessageCount(): void;\r\n}\r\n"]}