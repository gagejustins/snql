import { IConfiguration } from "../JavaScriptSDK.Interfaces/IConfiguration";
import { _InternalMessageId, LoggingSeverity } from "../JavaScriptSDK.Enums/LoggingEnums";
import { IDiagnosticLogger } from "../JavaScriptSDK.Interfaces/IDiagnosticLogger";
export declare class _InternalLogMessage {
    message: string;
    messageId: _InternalMessageId;
    static dataType: string;
    /**
     * For user non actionable traces use AI Internal prefix.
     */
    private static AiNonUserActionablePrefix;
    /**
     * Prefix of the traces in portal.
     */
    private static AiUserActionablePrefix;
    constructor(msgId: _InternalMessageId, msg: string, isUserAct?: boolean, properties?: Object);
    private static sanitizeDiagnosticText(text);
}
export declare class DiagnosticLogger implements IDiagnosticLogger {
    /**
    *  Session storage key for the prefix for the key indicating message type already logged
    */
    private AIInternalMessagePrefix;
    /**
     * When this is true the SDK will throw exceptions to aid in debugging.
     */
    enableDebugExceptions: () => boolean;
    /**
     * 0: OFF
     * 1: CRITICAL (default)
     * 2: >= WARNING
     */
    consoleLoggingLevel: () => number;
    /**
     * 0: OFF (default)
     * 1: CRITICAL
     * 2: >= WARNING
     */
    telemetryLoggingLevel: () => number;
    /**
     * The maximum number of internal messages allowed to be sent per page view
     */
    maxInternalMessageLimit: () => number;
    /**
     * The internal logging queue
     */
    queue: Array<_InternalLogMessage>;
    /**
     * Count of internal messages sent
     */
    private _messageCount;
    /**
     * Holds information about what message types were already logged to console or sent to server.
     */
    private _messageLogged;
    constructor(config?: IConfiguration);
    /**
     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.
     * @param severity {LoggingSeverity} - The severity of the log message
     * @param message {_InternalLogMessage} - The log message.
     */
    throwInternal(severity: LoggingSeverity, msgId: _InternalMessageId, msg: string, properties?: Object, isUserAct?: boolean): void;
    /**
     * This will write a warning to the console if possible
     * @param message {string} - The warning message
     */
    warnToConsole(message: string): void;
    /**
     * Resets the internal message count
     */
    resetInternalMessageCount(): void;
    /**
     * Logs a message to the internal queue.
     * @param severity {LoggingSeverity} - The severity of the log message
     * @param message {_InternalLogMessage} - The message to log.
     */
    private logInternalMessage(severity, message);
    /**
     * Indicates whether the internal events are throttled
     */
    private _areInternalMessagesThrottled();
}
