{"version":3,"file":"applicationinsights-core-js.min.js","sources":["../dist-esm/JavaScriptSDK.Enums/EventsDiscardedReason.js","../dist-esm/JavaScriptSDK/CoreUtils.js","../dist-esm/JavaScriptSDK.Enums/LoggingEnums.js","../dist-esm/JavaScriptSDK/NotificationManager.js","../dist-esm/JavaScriptSDK/DiagnosticLogger.js","../dist-esm/JavaScriptSDK/ChannelController.js","../dist-esm/JavaScriptSDK/AppInsightsCore.js","../dist-esm/JavaScriptSDK.Interfaces/IChannelControls.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n/**\r\n * The EventsDiscardedReason enumeration contains a set of values that specify the reason for discarding an event.\r\n */\r\nexport var EventsDiscardedReason = {\r\n    /**\r\n     * Unknown.\r\n     */\r\n    Unknown: 0,\r\n    /**\r\n     * Status set to non-retryable.\r\n     */\r\n    NonRetryableStatus: 1,\r\n    /**\r\n     * The event is invalid.\r\n     */\r\n    InvalidEvent: 2,\r\n    /**\r\n     * The size of the event is too large.\r\n     */\r\n    SizeLimitExceeded: 3,\r\n    /**\r\n     * The server is not accepting events from this instrumentation key.\r\n     */\r\n    KillSwitch: 4,\r\n    /**\r\n     * The event queue is full.\r\n     */\r\n    QueueFull: 5,\r\n};\r\n//# sourceMappingURL=EventsDiscardedReason.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nvar CoreUtils = /** @class */ (function () {\r\n    function CoreUtils() {\r\n    }\r\n    CoreUtils.isNullOrUndefined = function (input) {\r\n        return input === null || input === undefined;\r\n    };\r\n    /**\r\n* Creates a new GUID.\r\n* @return {string} A GUID.\r\n*/\r\n    CoreUtils.disableCookies = function () {\r\n        CoreUtils._canUseCookies = false;\r\n    };\r\n    CoreUtils.newGuid = function () {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(GuidRegex, function (c) {\r\n            // tslint:disable-next-line:insecure-random\r\n            var r = (Math.random() * 16 | 0), v = (c === 'x' ? r : r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    };\r\n    return CoreUtils;\r\n}());\r\nexport { CoreUtils };\r\nvar GuidRegex = /[xy]/g;\r\n//# sourceMappingURL=CoreUtils.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\nexport var LoggingSeverity;\r\n(function (LoggingSeverity) {\r\n    /**\r\n     * Error will be sent as internal telemetry\r\n     */\r\n    LoggingSeverity[LoggingSeverity[\"CRITICAL\"] = 1] = \"CRITICAL\";\r\n    /**\r\n     * Error will NOT be sent as internal telemetry, and will only be shown in browser console\r\n     */\r\n    LoggingSeverity[LoggingSeverity[\"WARNING\"] = 2] = \"WARNING\";\r\n})(LoggingSeverity || (LoggingSeverity = {}));\r\n/**\r\n * Internal message ID. Please create a new one for every conceptually different message. Please keep alphabetically ordered\r\n */\r\nexport var _InternalMessageId = {\r\n    // Non user actionable\r\n    BrowserDoesNotSupportLocalStorage: 0,\r\n    BrowserCannotReadLocalStorage: 1,\r\n    BrowserCannotReadSessionStorage: 2,\r\n    BrowserCannotWriteLocalStorage: 3,\r\n    BrowserCannotWriteSessionStorage: 4,\r\n    BrowserFailedRemovalFromLocalStorage: 5,\r\n    BrowserFailedRemovalFromSessionStorage: 6,\r\n    CannotSendEmptyTelemetry: 7,\r\n    ClientPerformanceMathError: 8,\r\n    ErrorParsingAISessionCookie: 9,\r\n    ErrorPVCalc: 10,\r\n    ExceptionWhileLoggingError: 11,\r\n    FailedAddingTelemetryToBuffer: 12,\r\n    FailedMonitorAjaxAbort: 13,\r\n    FailedMonitorAjaxDur: 14,\r\n    FailedMonitorAjaxOpen: 15,\r\n    FailedMonitorAjaxRSC: 16,\r\n    FailedMonitorAjaxSend: 17,\r\n    FailedMonitorAjaxGetCorrelationHeader: 18,\r\n    FailedToAddHandlerForOnBeforeUnload: 19,\r\n    FailedToSendQueuedTelemetry: 20,\r\n    FailedToReportDataLoss: 21,\r\n    FlushFailed: 22,\r\n    MessageLimitPerPVExceeded: 23,\r\n    MissingRequiredFieldSpecification: 24,\r\n    NavigationTimingNotSupported: 25,\r\n    OnError: 26,\r\n    SessionRenewalDateIsZero: 27,\r\n    SenderNotInitialized: 28,\r\n    StartTrackEventFailed: 29,\r\n    StopTrackEventFailed: 30,\r\n    StartTrackFailed: 31,\r\n    StopTrackFailed: 32,\r\n    TelemetrySampledAndNotSent: 33,\r\n    TrackEventFailed: 34,\r\n    TrackExceptionFailed: 35,\r\n    TrackMetricFailed: 36,\r\n    TrackPVFailed: 37,\r\n    TrackPVFailedCalc: 38,\r\n    TrackTraceFailed: 39,\r\n    TransmissionFailed: 40,\r\n    FailedToSetStorageBuffer: 41,\r\n    FailedToRestoreStorageBuffer: 42,\r\n    InvalidBackendResponse: 43,\r\n    FailedToFixDepricatedValues: 44,\r\n    InvalidDurationValue: 45,\r\n    TelemetryEnvelopeInvalid: 46,\r\n    CreateEnvelopeError: 47,\r\n    // User actionable\r\n    CannotSerializeObject: 48,\r\n    CannotSerializeObjectNonSerializable: 49,\r\n    CircularReferenceDetected: 50,\r\n    ClearAuthContextFailed: 51,\r\n    ExceptionTruncated: 52,\r\n    IllegalCharsInName: 53,\r\n    ItemNotInArray: 54,\r\n    MaxAjaxPerPVExceeded: 55,\r\n    MessageTruncated: 56,\r\n    NameTooLong: 57,\r\n    SampleRateOutOfRange: 58,\r\n    SetAuthContextFailed: 59,\r\n    SetAuthContextFailedAccountName: 60,\r\n    StringValueTooLong: 61,\r\n    StartCalledMoreThanOnce: 62,\r\n    StopCalledWithoutStart: 63,\r\n    TelemetryInitializerFailed: 64,\r\n    TrackArgumentsNotSpecified: 65,\r\n    UrlTooLong: 66,\r\n    SessionStorageBufferFull: 67,\r\n    CannotAccessCookie: 68,\r\n    IdTooLong: 69,\r\n    InvalidEvent: 70,\r\n};\r\n//# sourceMappingURL=LoggingEnums.js.map","/**\r\n * Class to manage sending notifications to all the listeners.\r\n */\r\nvar NotificationManager = /** @class */ (function () {\r\n    function NotificationManager() {\r\n        this.listeners = [];\r\n    }\r\n    /**\r\n     * Adds a notification listener.\r\n     * @param {INotificationListener} listener - The notification listener to be added.\r\n     */\r\n    NotificationManager.prototype.addNotificationListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - AWTNotificationListener to remove.\r\n     */\r\n    NotificationManager.prototype.removeNotificationListener = function (listener) {\r\n        var index = this.listeners.indexOf(listener);\r\n        while (index > -1) {\r\n            this.listeners.splice(index, 1);\r\n            index = this.listeners.indexOf(listener);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events sent.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been sent.\r\n     */\r\n    NotificationManager.prototype.eventsSent = function (events) {\r\n        var _this = this;\r\n        var _loop_1 = function (i) {\r\n            if (this_1.listeners[i].eventsSent) {\r\n                setTimeout(function () { return _this.listeners[i].eventsSent(events); }, 0);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Notification for events being discarded.\r\n     * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.\r\n     * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason\r\n     * constant should be used to check the different values.\r\n     */\r\n    NotificationManager.prototype.eventsDiscarded = function (events, reason) {\r\n        var _this = this;\r\n        var _loop_2 = function (i) {\r\n            if (this_2.listeners[i].eventsDiscarded) {\r\n                setTimeout(function () { return _this.listeners[i].eventsDiscarded(events, reason); }, 0);\r\n            }\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this.listeners.length; ++i) {\r\n            _loop_2(i);\r\n        }\r\n    };\r\n    return NotificationManager;\r\n}());\r\nexport { NotificationManager };\r\n//# sourceMappingURL=NotificationManager.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\"use strict\";\r\nimport { _InternalMessageId, LoggingSeverity } from \"../JavaScriptSDK.Enums/LoggingEnums\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nvar _InternalLogMessage = /** @class */ (function () {\r\n    function _InternalLogMessage(msgId, msg, isUserAct, properties) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        this.messageId = msgId;\r\n        this.message =\r\n            (isUserAct ? _InternalLogMessage.AiUserActionablePrefix : _InternalLogMessage.AiNonUserActionablePrefix) +\r\n                msgId;\r\n        var diagnosticText = (msg ? \" message:\" + _InternalLogMessage.sanitizeDiagnosticText(msg) : \"\") +\r\n            (properties ? \" props:\" + _InternalLogMessage.sanitizeDiagnosticText(JSON.stringify(properties)) : \"\");\r\n        this.message += diagnosticText;\r\n    }\r\n    _InternalLogMessage.sanitizeDiagnosticText = function (text) {\r\n        return \"\\\"\" + text.replace(/\\\"/g, \"\") + \"\\\"\";\r\n    };\r\n    _InternalLogMessage.dataType = \"MessageData\";\r\n    /**\r\n     * For user non actionable traces use AI Internal prefix.\r\n     */\r\n    _InternalLogMessage.AiNonUserActionablePrefix = \"AI (Internal): \";\r\n    /**\r\n     * Prefix of the traces in portal.\r\n     */\r\n    _InternalLogMessage.AiUserActionablePrefix = \"AI: \";\r\n    return _InternalLogMessage;\r\n}());\r\nexport { _InternalLogMessage };\r\nvar DiagnosticLogger = /** @class */ (function () {\r\n    function DiagnosticLogger(config) {\r\n        /**\r\n        *  Session storage key for the prefix for the key indicating message type already logged\r\n        */\r\n        this.AIInternalMessagePrefix = \"AITR_\";\r\n        /**\r\n         * When this is true the SDK will throw exceptions to aid in debugging.\r\n         */\r\n        this.enableDebugExceptions = function () { return false; };\r\n        /**\r\n         * 0: OFF\r\n         * 1: CRITICAL (default)\r\n         * 2: >= WARNING\r\n         */\r\n        this.consoleLoggingLevel = function () { return 1; };\r\n        /**\r\n         * 0: OFF (default)\r\n         * 1: CRITICAL\r\n         * 2: >= WARNING\r\n         */\r\n        this.telemetryLoggingLevel = function () { return 0; };\r\n        /**\r\n         * The maximum number of internal messages allowed to be sent per page view\r\n         */\r\n        this.maxInternalMessageLimit = function () { return 25; };\r\n        /**\r\n         * The internal logging queue\r\n         */\r\n        this.queue = [];\r\n        /**\r\n         * Count of internal messages sent\r\n         */\r\n        this._messageCount = 0;\r\n        /**\r\n         * Holds information about what message types were already logged to console or sent to server.\r\n         */\r\n        this._messageLogged = {};\r\n        if (CoreUtils.isNullOrUndefined(config)) {\r\n            // TODO: Use default config\r\n            // config = AppInsightsCore.defaultConfig;\r\n            // For now, use defaults specified in DiagnosticLogger members;\r\n            return;\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelConsole)) {\r\n            this.consoleLoggingLevel = function () { return config.loggingLevelConsole; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.loggingLevelTelemetry)) {\r\n            this.telemetryLoggingLevel = function () { return config.loggingLevelTelemetry; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.maxMessageLimit)) {\r\n            this.maxInternalMessageLimit = function () { return config.maxMessageLimit; };\r\n        }\r\n        if (!CoreUtils.isNullOrUndefined(config.enableDebugExceptions)) {\r\n            this.enableDebugExceptions = function () { return config.enableDebugExceptions; };\r\n        }\r\n    }\r\n    /**\r\n     * This method will throw exceptions in debug mode or attempt to log the error as a console warning.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The log message.\r\n     */\r\n    DiagnosticLogger.prototype.throwInternal = function (severity, msgId, msg, properties, isUserAct) {\r\n        if (isUserAct === void 0) { isUserAct = false; }\r\n        var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);\r\n        if (this.enableDebugExceptions()) {\r\n            throw message;\r\n        }\r\n        else {\r\n            if (typeof (message) !== \"undefined\" && !!message) {\r\n                if (typeof (message.message) !== \"undefined\") {\r\n                    if (isUserAct) {\r\n                        // check if this message type was already logged to console for this page view and if so, don't log it again\r\n                        var messageKey = +message.messageId;\r\n                        if (!this._messageLogged[messageKey] || this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                            this._messageLogged[messageKey] = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // don't log internal AI traces in the console, unless the verbose logging is enabled\r\n                        if (this.consoleLoggingLevel() >= LoggingSeverity.WARNING) {\r\n                            this.warnToConsole(message.message);\r\n                        }\r\n                    }\r\n                    this.logInternalMessage(severity, message);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * This will write a warning to the console if possible\r\n     * @param message {string} - The warning message\r\n     */\r\n    DiagnosticLogger.prototype.warnToConsole = function (message) {\r\n        if (typeof console !== \"undefined\" && !!console) {\r\n            if (typeof console.warn === \"function\") {\r\n                console.warn(message);\r\n            }\r\n            else if (typeof console.log === \"function\") {\r\n                console.log(message);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Resets the internal message count\r\n     */\r\n    DiagnosticLogger.prototype.resetInternalMessageCount = function () {\r\n        this._messageCount = 0;\r\n        this._messageLogged = {};\r\n    };\r\n    /**\r\n     * Logs a message to the internal queue.\r\n     * @param severity {LoggingSeverity} - The severity of the log message\r\n     * @param message {_InternalLogMessage} - The message to log.\r\n     */\r\n    DiagnosticLogger.prototype.logInternalMessage = function (severity, message) {\r\n        if (this._areInternalMessagesThrottled()) {\r\n            return;\r\n        }\r\n        // check if this message type was already logged for this session and if so, don't log it again\r\n        var logMessage = true;\r\n        var messageKey = this.AIInternalMessagePrefix + message.messageId;\r\n        // if the session storage is not available, limit to only one message type per page view\r\n        if (this._messageLogged[messageKey]) {\r\n            logMessage = false;\r\n        }\r\n        else {\r\n            this._messageLogged[messageKey] = true;\r\n        }\r\n        if (logMessage) {\r\n            // Push the event in the internal queue\r\n            if (severity <= this.telemetryLoggingLevel()) {\r\n                this.queue.push(message);\r\n                this._messageCount++;\r\n            }\r\n            // When throttle limit reached, send a special event\r\n            if (this._messageCount == this.maxInternalMessageLimit()) {\r\n                var throttleLimitMessage = \"Internal events throttle limit per PageView reached for this app.\";\r\n                var throttleMessage = new _InternalLogMessage(_InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, false);\r\n                this.queue.push(throttleMessage);\r\n                this.warnToConsole(throttleLimitMessage);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Indicates whether the internal events are throttled\r\n     */\r\n    DiagnosticLogger.prototype._areInternalMessagesThrottled = function () {\r\n        return this._messageCount >= this.maxInternalMessageLimit();\r\n    };\r\n    return DiagnosticLogger;\r\n}());\r\nexport { DiagnosticLogger };\r\n//# sourceMappingURL=DiagnosticLogger.js.map","import { CoreUtils } from \"./CoreUtils\";\r\n\"use strict\";\r\nvar ChannelControllerPriority = 500;\r\nvar ChannelValidationMessage = \"Channel has invalid priority\";\r\nvar ChannelController = /** @class */ (function () {\r\n    function ChannelController() {\r\n        this.identifier = \"ChannelControllerPlugin\";\r\n        this.priority = ChannelControllerPriority; // in reserved range 100 to 200\r\n    }\r\n    ChannelController.prototype.processTelemetry = function (item) {\r\n        this.channelQueue.forEach(function (queues) {\r\n            // pass on to first item in queue\r\n            if (queues.length > 0) {\r\n                queues[0].processTelemetry(item);\r\n            }\r\n        });\r\n    };\r\n    Object.defineProperty(ChannelController.prototype, \"ChannelControls\", {\r\n        get: function () {\r\n            return this.channelQueue;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    ChannelController.prototype.initialize = function (config, core, extensions) {\r\n        var _this = this;\r\n        if (config.isCookieUseDisabled) {\r\n            CoreUtils.disableCookies();\r\n        }\r\n        this.channelQueue = new Array();\r\n        if (config.channels) {\r\n            var invalidChannelIdentifier_1 = undefined;\r\n            config.channels.forEach(function (queue) {\r\n                if (queue && queue.length > 0) {\r\n                    queue = queue.sort(function (a, b) {\r\n                        return a.priority - b.priority;\r\n                    });\r\n                    // Initialize each plugin\r\n                    queue.forEach(function (queueItem) {\r\n                        if (queueItem.priority < ChannelControllerPriority) {\r\n                            invalidChannelIdentifier_1 = queueItem.identifier;\r\n                        }\r\n                        queueItem.initialize(config, core, extensions);\r\n                    });\r\n                    if (invalidChannelIdentifier_1) {\r\n                        throw Error(ChannelValidationMessage + invalidChannelIdentifier_1);\r\n                    }\r\n                    for (var i = 1; i < queue.length; i++) {\r\n                        queue[i - 1].setNextPlugin(queue[i]); // setup processing chain\r\n                    }\r\n                    _this.channelQueue.push(queue);\r\n                }\r\n            });\r\n        }\r\n        var arr = new Array();\r\n        for (var i = 0; i < extensions.length; i++) {\r\n            var plugin = extensions[i];\r\n            if (plugin.priority > ChannelControllerPriority) {\r\n                arr.push(plugin);\r\n            }\r\n        }\r\n        if (arr.length > 0) {\r\n            // sort if not sorted\r\n            arr = arr.sort(function (a, b) {\r\n                return a.priority - b.priority;\r\n            });\r\n            // Initialize each plugin\r\n            arr.forEach(function (queueItem) { return queueItem.initialize(config, core, extensions); });\r\n            // setup next plugin\r\n            for (var i = 1; i < arr.length; i++) {\r\n                arr[i - 1].setNextPlugin(arr[i]);\r\n            }\r\n            this.channelQueue.push(arr);\r\n        }\r\n    };\r\n    return ChannelController;\r\n}());\r\nexport { ChannelController };\r\n//# sourceMappingURL=ChannelController.js.map","import { EventsDiscardedReason } from \"../JavaScriptSDK.Enums/EventsDiscardedReason\";\r\nimport { CoreUtils } from \"./CoreUtils\";\r\nimport { NotificationManager } from \"./NotificationManager\";\r\nimport { _InternalLogMessage, DiagnosticLogger } from \"./DiagnosticLogger\";\r\nimport { ChannelController } from './ChannelController';\r\n\"use strict\";\r\nvar validationError = \"Extensions must provide callback to initialize\";\r\nvar AppInsightsCore = /** @class */ (function () {\r\n    function AppInsightsCore() {\r\n        this._isInitialized = false;\r\n        this._extensions = new Array();\r\n        this._channelController = new ChannelController();\r\n    }\r\n    AppInsightsCore.prototype.initialize = function (config, extensions) {\r\n        var _this = this;\r\n        // Make sure core is only initialized once\r\n        if (this._isInitialized) {\r\n            throw Error(\"Core should not be initialized more than once\");\r\n        }\r\n        if (!config || CoreUtils.isNullOrUndefined(config.instrumentationKey)) {\r\n            throw Error(\"Please provide instrumentation key\");\r\n        }\r\n        this.config = config;\r\n        this._notificationManager = new NotificationManager();\r\n        this.config.extensions = CoreUtils.isNullOrUndefined(this.config.extensions) ? [] : this.config.extensions;\r\n        // add notification to the extensions in the config so other plugins can access it\r\n        this.config.extensionConfig = CoreUtils.isNullOrUndefined(this.config.extensionConfig) ? {} : this.config.extensionConfig;\r\n        this.config.extensionConfig.NotificationManager = this._notificationManager;\r\n        this.logger = new DiagnosticLogger(config);\r\n        // Concat all available extensions \r\n        (_a = this._extensions).push.apply(_a, extensions.concat(this.config.extensions));\r\n        // Initial validation \r\n        this._extensions.forEach(function (extension) {\r\n            var isValid = true;\r\n            if (CoreUtils.isNullOrUndefined(extension) || CoreUtils.isNullOrUndefined(extension.initialize)) {\r\n                isValid = false;\r\n            }\r\n            if (!isValid) {\r\n                throw Error(validationError);\r\n            }\r\n        });\r\n        // Initial validation complete\r\n        this._extensions.push(this._channelController);\r\n        // Sort by priority\r\n        this._extensions = this._extensions.sort(function (a, b) {\r\n            var extA = a;\r\n            var extB = b;\r\n            var typeExtA = typeof extA.processTelemetry;\r\n            var typeExtB = typeof extB.processTelemetry;\r\n            if (typeExtA === 'function' && typeExtB === 'function') {\r\n                return extA.priority - extB.priority;\r\n            }\r\n            if (typeExtA === 'function' && typeExtB !== 'function') {\r\n                // keep non telemetryplugin specific extensions at start\r\n                return 1;\r\n            }\r\n            if (typeExtA !== 'function' && typeExtB === 'function') {\r\n                return -1;\r\n            }\r\n        });\r\n        // sort complete\r\n        // Check if any two extensions have the same priority, then warn to console\r\n        var priority = {};\r\n        this._extensions.forEach(function (ext) {\r\n            var t = ext;\r\n            if (t && t.priority) {\r\n                if (!CoreUtils.isNullOrUndefined(priority[t.priority])) {\r\n                    _this.logger.warnToConsole(\"Two extensions have same priority\" + priority[t.priority] + \", \" + t.identifier);\r\n                }\r\n                else {\r\n                    priority[t.priority] = t.identifier; // set a value\r\n                }\r\n            }\r\n        });\r\n        var c = -1;\r\n        // Set next plugin for all until channel controller\r\n        for (var idx = 0; idx < this._extensions.length - 1; idx++) {\r\n            var curr = (this._extensions[idx]);\r\n            if (curr && typeof curr.processTelemetry !== 'function') {\r\n                // these are initialized only, allowing an entry point for extensions to be initialized when SDK initializes\r\n                continue;\r\n            }\r\n            if (curr.priority === this._channelController.priority) {\r\n                c = idx + 1;\r\n                break; // channel controller will set remaining pipeline\r\n            }\r\n            this._extensions[idx].setNextPlugin(this._extensions[idx + 1]); // set next plugin\r\n        }\r\n        // initialize channel controller first, this will initialize all channel plugins\r\n        this._channelController.initialize(this.config, this, this._extensions);\r\n        // initialize remaining regular plugins\r\n        this._extensions.forEach(function (ext) {\r\n            var e = ext;\r\n            if (e && e.priority < _this._channelController.priority) {\r\n                ext.initialize(_this.config, _this, _this._extensions); // initialize\r\n            }\r\n        });\r\n        // Remove sender channels from main list\r\n        if (c < this._extensions.length) {\r\n            this._extensions.splice(c);\r\n        }\r\n        if (this.getTransmissionControls().length === 0) {\r\n            throw new Error(\"No channels available\");\r\n        }\r\n        this._isInitialized = true;\r\n        var _a;\r\n    };\r\n    AppInsightsCore.prototype.getTransmissionControls = function () {\r\n        return this._channelController.ChannelControls;\r\n    };\r\n    AppInsightsCore.prototype.track = function (telemetryItem) {\r\n        if (telemetryItem === null) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            // throw error\r\n            throw Error(\"Invalid telemetry item\");\r\n        }\r\n        if (!telemetryItem.iKey) {\r\n            // setup default iKey if not passed in\r\n            telemetryItem.iKey = this.config.instrumentationKey;\r\n        }\r\n        if (!telemetryItem.time) {\r\n            // add default timestamp if not passed in\r\n            telemetryItem.time = new Date().toISOString();\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.ver)) {\r\n            // CommonSchema 4.0\r\n            telemetryItem.ver = \"4.0\";\r\n        }\r\n        // do basic validation before sending it through the pipeline\r\n        this._validateTelmetryItem(telemetryItem);\r\n        // invoke any common telemetry processors before sending through pipeline\r\n        if (this._extensions.length == 0) {\r\n            this._channelController.processTelemetry(telemetryItem); // Pass to Channel controller so data is sent to correct channel queues\r\n        }\r\n        var i = 0;\r\n        while (i < this._extensions.length) {\r\n            if (this._extensions[i].processTelemetry) {\r\n                this._extensions[i].processTelemetry(telemetryItem); // pass on to first extension that can support processing\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n    };\r\n    /**\r\n     * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.\r\n     * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be\r\n     * called.\r\n     * @param {INotificationListener} listener - An INotificationListener object.\r\n     */\r\n    AppInsightsCore.prototype.addNotificationListener = function (listener) {\r\n        this._notificationManager.addNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Removes all instances of the listener.\r\n     * @param {INotificationListener} listener - INotificationListener to remove.\r\n     */\r\n    AppInsightsCore.prototype.removeNotificationListener = function (listener) {\r\n        this._notificationManager.removeNotificationListener(listener);\r\n    };\r\n    /**\r\n     * Periodically check logger.queue for\r\n     */\r\n    AppInsightsCore.prototype.pollInternalLogs = function () {\r\n        var _this = this;\r\n        var interval = this.config.diagnosticLogInterval;\r\n        if (!(interval > 0)) {\r\n            interval = 10000;\r\n        }\r\n        return setInterval(function () {\r\n            var queue = _this.logger.queue;\r\n            queue.forEach(function (logMessage) {\r\n                var item = {\r\n                    name: \"InternalMessageId: \" + logMessage.messageId,\r\n                    iKey: _this.config.instrumentationKey,\r\n                    time: new Date().toISOString(),\r\n                    baseType: _InternalLogMessage.dataType,\r\n                    baseData: { message: logMessage.message }\r\n                };\r\n                _this.track(item);\r\n            });\r\n            queue.length = 0;\r\n        }, interval);\r\n    };\r\n    AppInsightsCore.prototype._validateTelmetryItem = function (telemetryItem) {\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.name)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry name required\");\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.time)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry timestamp required\");\r\n        }\r\n        if (CoreUtils.isNullOrUndefined(telemetryItem.iKey)) {\r\n            this._notifyInvalidEvent(telemetryItem);\r\n            throw Error(\"telemetry instrumentationKey required\");\r\n        }\r\n    };\r\n    AppInsightsCore.prototype._notifyInvalidEvent = function (telemetryItem) {\r\n        this._notificationManager.eventsDiscarded([telemetryItem], EventsDiscardedReason.InvalidEvent);\r\n    };\r\n    return AppInsightsCore;\r\n}());\r\nexport { AppInsightsCore };\r\n//# sourceMappingURL=AppInsightsCore.js.map","\"use strict\";\r\nexport var MinChannelPriorty = 100;\r\n//# sourceMappingURL=IChannelControls.js.map"],"names":["EventsDiscardedReason","Unknown","NonRetryableStatus","InvalidEvent","SizeLimitExceeded","KillSwitch","QueueFull","CoreUtils","isNullOrUndefined","input","disableCookies","_canUseCookies","newGuid","replace","GuidRegex","c","r","Math","random","toString","LoggingSeverity","NotificationManager","prototype","addNotificationListener","listener","this","listeners","push","removeNotificationListener","index","indexOf","splice","eventsSent","events","_this","_loop_1","i","this_1","setTimeout","length","eventsDiscarded","reason","_loop_2","this_2","_InternalMessageId","BrowserDoesNotSupportLocalStorage","BrowserCannotReadLocalStorage","BrowserCannotReadSessionStorage","BrowserCannotWriteLocalStorage","BrowserCannotWriteSessionStorage","BrowserFailedRemovalFromLocalStorage","BrowserFailedRemovalFromSessionStorage","CannotSendEmptyTelemetry","ClientPerformanceMathError","ErrorParsingAISessionCookie","ErrorPVCalc","ExceptionWhileLoggingError","FailedAddingTelemetryToBuffer","FailedMonitorAjaxAbort","FailedMonitorAjaxDur","FailedMonitorAjaxOpen","FailedMonitorAjaxRSC","FailedMonitorAjaxSend","FailedMonitorAjaxGetCorrelationHeader","FailedToAddHandlerForOnBeforeUnload","FailedToSendQueuedTelemetry","FailedToReportDataLoss","FlushFailed","MessageLimitPerPVExceeded","MissingRequiredFieldSpecification","NavigationTimingNotSupported","OnError","SessionRenewalDateIsZero","SenderNotInitialized","StartTrackEventFailed","StopTrackEventFailed","StartTrackFailed","StopTrackFailed","TelemetrySampledAndNotSent","TrackEventFailed","TrackExceptionFailed","TrackMetricFailed","TrackPVFailed","TrackPVFailedCalc","TrackTraceFailed","TransmissionFailed","FailedToSetStorageBuffer","FailedToRestoreStorageBuffer","InvalidBackendResponse","FailedToFixDepricatedValues","InvalidDurationValue","TelemetryEnvelopeInvalid","CreateEnvelopeError","CannotSerializeObject","CannotSerializeObjectNonSerializable","CircularReferenceDetected","ClearAuthContextFailed","ExceptionTruncated","IllegalCharsInName","ItemNotInArray","MaxAjaxPerPVExceeded","MessageTruncated","NameTooLong","SampleRateOutOfRange","SetAuthContextFailed","SetAuthContextFailedAccountName","StringValueTooLong","StartCalledMoreThanOnce","StopCalledWithoutStart","TelemetryInitializerFailed","TrackArgumentsNotSpecified","UrlTooLong","SessionStorageBufferFull","CannotAccessCookie","IdTooLong","_InternalLogMessage","sanitizeDiagnosticText","text","dataType","AiNonUserActionablePrefix","AiUserActionablePrefix","msgId","msg","isUserAct","properties","messageId","message","diagnosticText","JSON","stringify","DiagnosticLogger","throwInternal","severity","enableDebugExceptions","messageKey","_messageLogged","consoleLoggingLevel","WARNING","warnToConsole","logInternalMessage","console","warn","log","resetInternalMessageCount","_messageCount","_areInternalMessagesThrottled","logMessage","AIInternalMessagePrefix","telemetryLoggingLevel","queue","maxInternalMessageLimit","throttleLimitMessage","throttleMessage","config","loggingLevelConsole","loggingLevelTelemetry","maxMessageLimit","ChannelController","processTelemetry","item","channelQueue","forEach","queues","Object","defineProperty","get","enumerable","configurable","initialize","core","extensions","isCookieUseDisabled","Array","channels","invalidChannelIdentifier_1","undefined","sort","a","b","priority","queueItem","identifier","Error","setNextPlugin","arr","plugin","AppInsightsCore","_isInitialized","instrumentationKey","_notificationManager","extensionConfig","logger","_a","_extensions","apply","concat","extension","isValid","_channelController","extA","extB","typeExtA","typeExtB","ext","t","idx","curr","getTransmissionControls","ChannelControls","track","telemetryItem","_notifyInvalidEvent","iKey","time","Date","toISOString","ver","_validateTelmetryItem","pollInternalLogs","interval","diagnosticLogInterval","setInterval","name","baseType","baseData"],"mappings":"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"}