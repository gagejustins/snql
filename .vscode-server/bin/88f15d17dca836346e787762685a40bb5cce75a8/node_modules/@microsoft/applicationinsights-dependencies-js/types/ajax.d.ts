import { ICorrelationConfig, IDependencyTelemetry, IConfig } from '@microsoft/applicationinsights-common';
import { IAppInsightsCore, ITelemetryPlugin, IConfiguration, IPlugin, ITelemetryItem } from '@microsoft/applicationinsights-core-js';
import { ajaxRecord } from './ajaxRecord';
export interface XMLHttpRequestInstrumented extends XMLHttpRequest {
    ajaxData: ajaxRecord;
}
export interface IDependenciesPlugin {
    trackDependencyData(dependency: IDependencyTelemetry): any;
}
export interface IInstrumentationRequirements extends IDependenciesPlugin {
    includeCorrelationHeaders: (ajaxData: ajaxRecord, input?: Request | string, init?: RequestInit, xhr?: XMLHttpRequestInstrumented) => any;
}
export declare class AjaxMonitor implements ITelemetryPlugin, IDependenciesPlugin, IInstrumentationRequirements {
    private currentWindowHost;
    protected initialized: boolean;
    protected _fetchInitialized: boolean;
    protected _core: IAppInsightsCore;
    protected _config: ICorrelationConfig;
    protected _nextPlugin: ITelemetryPlugin;
    protected _trackAjaxAttempts: number;
    private _context;
    constructor();
    private isMonitoredInstance(xhr?, excludeAjaxDataValidation?, request?, init?);
    private supportsAjaxMonitoring();
    private instrumentOpen();
    private openHandler(xhr, method, url, async);
    private static getFailedAjaxDiagnosticsMessage(xhr);
    private instrumentSend();
    private sendHandler(xhr, content);
    private instrumentAbort();
    private attachToOnReadyStateChange(xhr);
    private onAjaxComplete(xhr);
    private getAjaxCorrelationContext(xhr);
    /**
     * Logs dependency call
     * @param dependencyData dependency data object
     */
    protected trackDependencyDataInternal(dependency: IDependencyTelemetry, properties?: {
        [key: string]: any;
    }, systemProperties?: {
        [key: string]: any;
    }): void;
    trackDependencyData(dependency: IDependencyTelemetry, properties?: {
        [key: string]: any;
    }): void;
    processTelemetry(item: ITelemetryItem): void;
    static identifier: string;
    identifier: string;
    setNextPlugin(next: ITelemetryPlugin): void;
    priority: number;
    protected instrumentFetch(): void;
    private isFetchInstrumented(input);
    private supportsFetch();
    private createFetchRecord(input?, init?);
    includeCorrelationHeaders(ajaxData: ajaxRecord, input?: Request | string, init?: RequestInit, xhr?: XMLHttpRequestInstrumented): any;
    private getFailedFetchDiagnosticsMessage(input);
    private onFetchComplete(response, ajaxData);
    private onFetchFailed(input, ajaxData, reason);
    private getFetchCorrelationContext(response);
    protected instrumentXhr(): void;
    static getDefaultConfig(): ICorrelationConfig;
    static getEmptyConfig(): ICorrelationConfig;
    initialize(config: IConfiguration & IConfig, core: IAppInsightsCore, extensions: IPlugin[]): void;
}
