{"version":3,"file":"ajaxRecord.js","sourceRoot":"","sources":["../src/ajaxRecord.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,uCAAuC,CAAC;AAGhG;IAAA;QACW,aAAQ,GAAY,KAAK,CAAC;QAC1B,yBAAoB,GAAY,KAAK,CAAC;QACtC,aAAQ,GAAY,KAAK,CAAC;QAC1B,cAAS,GAAY,KAAK,CAAC;QAElC,kGAAkG;QAC3F,uCAAkC,GAAG,KAAK,CAAC;IACtD,CAAC;IAAD,yBAAC;AAAD,CAAC,AARD,IAQC;;AAED;IA4CI,oBAAY,EAAU,EAAE,MAAyB;QA3C1C,cAAS,GAAG,KAAK,CAAC;QAClB,uBAAkB,GAAG,IAAI,CAAC;QAC1B,SAAI,GAAG,IAAI,CAAC;QACZ,8BAAyB,GAAG,IAAI,CAAC;QACjC,qBAAgB,GAAG,IAAI,CAAC;QACxB,sBAAiB,GAAG,IAAI,CAAC;QACzB,YAAO,GAAG,IAAI,CAAC;QACf,YAAO,GAAG,IAAI,CAAC;QACf,eAAU,GAAG,IAAI,CAAC;QAClB,gBAAW,GAAG,CAAC,CAAC;QAChB,WAAM,GAAG,IAAI,CAAC;QAErB,mDAAmD;QAC5C,WAAM,GAAG,IAAI,CAAC;QAErB,+DAA+D;QACxD,oBAAe,GAAG,IAAI,CAAC;QAE9B,gEAAgE;QACzD,wBAAmB,GAAG,IAAI,CAAC;QAElC,8DAA8D;QACvD,yBAAoB,GAAG,IAAI,CAAC;QAEnC,4FAA4F;QACrF,yBAAoB,GAAG,IAAI,CAAC;QAEnC,0DAA0D;QACnD,YAAO,GAAG,IAAI,CAAC;QAEtB,8DAA8D;QACvD,8BAAyB,GAAG,IAAI,CAAC;QAEjC,uBAAkB,GAAuB,IAAI,kBAAkB,EAAE,CAAC;QAIzE,sIAAsI;QAC/H,kBAAa,GAAG,CAAC,CAAC;QAmBlB,qBAAgB,GAAG;YACtB,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,4BAA4B;YAC5B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;QAClI,CAAC,CAAA;QAjBG,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAGM,mCAAc,GAArB;QACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9E,CAAC;IAEM,gCAAW,GAAlB;QACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACpI,CAAC;IAOL,iBAAC;AAAD,CAAC,AA/DD,IA+DC;;AAAA,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { DataSanitizer, UrlHelper, DateTimeUtils } from '@microsoft/applicationinsights-common';\r\nimport { IDiagnosticLogger } from '@microsoft/applicationinsights-core-js';\r\n\r\nexport class XHRMonitoringState {\r\n    public openDone: boolean = false;\r\n    public setRequestHeaderDone: boolean = false;\r\n    public sendDone: boolean = false;\r\n    public abortDone: boolean = false;\r\n\r\n    //<summary>True, if onreadyStateChangeCallback function attached to xhr, otherwise false</summary>\r\n    public onreadystatechangeCallbackAttached = false;\r\n}\r\n\r\nexport class ajaxRecord {\r\n    public completed = false;\r\n    public requestHeadersSize = null;\r\n    public ttfb = null;\r\n    public responseReceivingDuration = null;\r\n    public callbackDuration = null;\r\n    public ajaxTotalDuration = null;\r\n    public aborted = null;\r\n    public pageUrl = null;\r\n    public requestUrl = null;\r\n    public requestSize = 0;\r\n    public method = null;\r\n\r\n    ///<summary>Returns the HTTP status code.</summary>\r\n    public status = null;\r\n\r\n    //<summary>The timestamp when open method was invoked</summary>\r\n    public requestSentTime = null;\r\n\r\n    //<summary>The timestamps when first byte was received</summary>\r\n    public responseStartedTime = null;\r\n\r\n    //<summary>The timestamp when last byte was received</summary>\r\n    public responseFinishedTime = null;\r\n\r\n    //<summary>The timestamp when onreadystatechange callback in readyState 4 finished</summary>\r\n    public callbackFinishedTime = null;\r\n\r\n    //<summary>The timestamp at which ajax was ended</summary>\r\n    public endTime = null;\r\n\r\n    //<summary>The original xhr onreadystatechange event</summary>\r\n    public originalOnreadystatechage = null;\r\n\r\n    public xhrMonitoringState: XHRMonitoringState = new XHRMonitoringState();\r\n\r\n    private _logger: IDiagnosticLogger;\r\n\r\n    //<summary>Determines whether or not JavaScript exception occured in xhr.onreadystatechange code. 1 if occured, otherwise 0.</summary>\r\n    public clientFailure = 0;\r\n\r\n\r\n    public id: string;\r\n\r\n    constructor(id: string, logger: IDiagnosticLogger) {\r\n        this.id = id;\r\n        this._logger = logger;\r\n    }\r\n\r\n\r\n    public getAbsoluteUrl() {\r\n        return this.requestUrl ? UrlHelper.getAbsoluteUrl(this.requestUrl) : null;\r\n    }\r\n\r\n    public getPathName() {\r\n        return this.requestUrl ? DataSanitizer.sanitizeUrl(this._logger, UrlHelper.getCompleteUrl(this.method, this.requestUrl)) : null;\r\n    }\r\n\r\n    public CalculateMetrics = function () {\r\n        var self = this;\r\n        // round to 3 decimal points\r\n        self.ajaxTotalDuration = Math.round(DateTimeUtils.GetDuration(self.requestSentTime, self.responseFinishedTime) * 1000) / 1000;\r\n    }\r\n};\r\n\r\n"]}