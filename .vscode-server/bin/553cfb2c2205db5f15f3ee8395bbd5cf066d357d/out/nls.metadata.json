{
	"keys": {
		"vs/platform/environment/node/argv": [
			"optionsUpperCase",
			"extensionsManagement",
			"troubleshooting",
			"diff",
			"add",
			"goto",
			"newWindow",
			"reuseWindow",
			"wait",
			"locale",
			"userDataDir",
			"version",
			"help",
			"folderUri",
			"fileUri",
			"extensionHomePath",
			"listExtensions",
			"showVersions",
			"installExtension",
			"uninstallExtension",
			"experimentalApis",
			"verbose",
			"log",
			"status",
			"prof-modules",
			"prof-startup",
			"disableExtensions",
			"disableExtension",
			"inspect-extensions",
			"inspect-brk-extensions",
			"disableGPU",
			"uploadLogs",
			"maxMemory",
			"usage",
			"options",
			"paths",
			"stdinWindows",
			"stdinUnix",
			"unknownVersion",
			"unknownCommit"
		],
		"vs/platform/request/node/request": [
			"httpConfigurationTitle",
			"proxy",
			"strictSSL",
			"proxyAuthorization",
			"proxySupportOff",
			"proxySupportOn",
			"proxySupportOverride",
			"proxySupport",
			"systemCertificates"
		],
		"vs/platform/extensionManagement/common/extensionManagement": [
			"extensions",
			"preferences"
		],
		"vs/platform/dialogs/common/dialogs": [
			"moreFile",
			"moreFiles"
		],
		"vs/platform/telemetry/common/telemetryService": [
			"telemetryConfigurationTitle",
			"telemetry.enableTelemetry"
		],
		"vs/agent/remoteAgentEnvironmentImpl": [
			"overwritingExtension"
		],
		"vs/code/node/cliProcessMain": [
			"notFound",
			"notInstalled",
			"useId",
			"installingExtensions",
			"installation failed",
			"successVsixInstall",
			"cancelVsixInstall",
			"alreadyInstalled",
			"forceUpdate",
			"updateMessage",
			"forceDowngrade",
			"installing",
			"successInstall",
			"cancelVsixInstall",
			"uninstalling",
			"successUninstall"
		],
		"vs/base/node/processes": [
			"TaskRunner.UNC"
		],
		"vs/platform/configuration/common/configurationRegistry": [
			"defaultConfigurations.title",
			"overrideSettings.description",
			"overrideSettings.defaultDescription",
			"config.property.languageDefault",
			"config.property.duplicate"
		],
		"vs/platform/extensionManagement/node/extensionManagementService": [
			"invalidManifest",
			"incompatible",
			"restartCode",
			"malicious extension",
			"notFoundCompatibleDependency",
			"MarketPlaceDisabled",
			"removeError",
			"Not a Marketplace extension",
			"quitCode",
			"exitCode",
			"errorDeleting",
			"cannot read",
			"renameError",
			"notInstalled",
			"singleDependentError",
			"twoDependentsError",
			"multipleDependentsError",
			"notExists"
		],
		"vs/platform/extensionManagement/node/extensionManagementUtil": [
			"invalidManifest"
		],
		"vs/workbench/api/common/extHostWorkspace": [
			"updateerror"
		],
		"vs/workbench/services/files/node/diskFileSystemProvider": [
			"fileExists",
			"fileNotExists",
			"moveError",
			"copyError"
		],
		"vs/platform/extensions/node/extensionValidator": [
			"versionSyntax",
			"versionSpecificity1",
			"versionSpecificity2",
			"versionMismatch"
		],
		"vs/workbench/api/node/extHostExtensionService": [
			"extensionTestError"
		],
		"vs/workbench/services/extensions/node/extensionPoints": [
			"jsonParseFail",
			"fileReadFail",
			"jsonsParseReportErrors",
			"missingNLSKey",
			"notSemver",
			"extensionDescription.empty",
			"extensionDescription.publisher",
			"extensionDescription.name",
			"extensionDescription.version",
			"extensionDescription.engines",
			"extensionDescription.engines.vscode",
			"extensionDescription.extensionDependencies",
			"extensionDescription.activationEvents1",
			"extensionDescription.activationEvents2",
			"extensionDescription.main1",
			"extensionDescription.main2",
			"extensionDescription.main3"
		],
		"vs/base/node/zip": [
			"invalid file",
			"incompleteExtract",
			"notFound"
		],
		"vs/base/common/errorMessage": [
			"stackTrace.format",
			"error.defaultMessage",
			"nodeExceptionMessage",
			"error.defaultMessage",
			"error.moreErrors",
			"error.defaultMessage"
		],
		"vs/base/common/jsonErrorMessages": [
			"error.invalidSymbol",
			"error.invalidNumberFormat",
			"error.propertyNameExpected",
			"error.valueExpected",
			"error.colonExpected",
			"error.commaExpected",
			"error.closeBraceExpected",
			"error.closeBracketExpected",
			"error.endOfFileExpected"
		],
		"vs/workbench/api/common/extHostExtensionActivator": [
			"failedDep1",
			"activationError"
		],
		"vs/base/common/severity": [
			"sev.error",
			"sev.warning",
			"sev.info"
		],
		"vs/workbench/common/views": [
			"duplicateId"
		],
		"vs/platform/workspaces/common/workspaces": [
			"codeWorkspace"
		],
		"vs/workbench/api/node/extHost.api.impl": [
			"remote extension host Log",
			"extension host Log"
		],
		"vs/workbench/api/common/extHostProgress": [
			"extensionSource"
		],
		"vs/workbench/api/common/extHostDiagnostics": [
			{
				"key": "limitHit",
				"comment": [
					"amount of errors/warning skipped due to limits"
				]
			}
		],
		"vs/workbench/api/common/extHostTreeViews": [
			"treeView.notRegistered",
			"treeView.notRegistered",
			"treeView.notRegistered",
			"treeView.notRegistered",
			"treeView.duplicateElement"
		],
		"vs/workbench/api/node/extHostDebugService": [
			"debug.terminal.title"
		],
		"vs/platform/markers/common/markers": [
			"sev.error",
			"sev.warning",
			"sev.info"
		],
		"vs/editor/common/config/editorOptions": [
			"accessibilityOffAriaLabel",
			"editorViewAccessibleLabel"
		],
		"vs/workbench/services/configurationResolver/common/variableResolver": [
			"canNotResolveFile",
			"canNotFindFolder",
			"canNotResolveWorkspaceFolderMultiRoot",
			"canNotResolveWorkspaceFolder",
			"missingEnvVarName",
			"configNotFound",
			"configNoString",
			"missingConfigName",
			"canNotResolveLineNumber",
			"canNotResolveSelectedText",
			"noValueForCommand"
		],
		"vs/workbench/contrib/debug/node/debugAdapter": [
			"debugAdapterBinNotFound",
			{
				"key": "debugAdapterCannotDetermineExecutable",
				"comment": [
					"Adapter executable file not found"
				]
			},
			"unableToLaunchDebugAdapter",
			"unableToLaunchDebugAdapterNoArgs"
		],
		"vs/workbench/contrib/debug/node/terminals": [
			"console.title",
			"mac.terminal.script.failed",
			"mac.terminal.type.not.supported",
			"press.any.key",
			"linux.term.failed",
			"ext.term.app.not.found"
		]
	},
	"messages": {
		"vs/platform/environment/node/argv": [
			"Options",
			"Extensions Management",
			"Troubleshooting",
			"Compare two files with each other.",
			"Add folder(s) to the last active window.",
			"Open a file at the path on the specified line and character position.",
			"Force to open a new window.",
			"Force to open a file or folder in an already opened window.",
			"Wait for the files to be closed before returning.",
			"The locale to use (e.g. en-US or zh-TW).",
			"Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code.",
			"Print version.",
			"Print usage.",
			"Opens a window with given folder uri(s)",
			"Opens a window with given file uri(s)",
			"Set the root path for extensions.",
			"List the installed extensions.",
			"Show versions of installed extensions, when using --list-extension.",
			"Installs or updates the extension. Use `--force` argument to avoid prompts.",
			"Uninstalls an extension.",
			"Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually.",
			"Print verbose output (implies --wait).",
			"Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'.",
			"Print process usage and diagnostics information.",
			"Capture performance markers while loading JS modules and print them with 'F1 > Developer: Startup Performance",
			"Run CPU profiler during startup",
			"Disable all installed extensions.",
			"Disable an extension.",
			"Allow debugging and profiling of extensions. Check the developer tools for the connection URI.",
			"Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI.",
			"Disable GPU hardware acceleration.",
			"Uploads logs from current session to a secure endpoint.",
			"Max memory size for a window (in Mbytes).",
			"Usage",
			"options",
			"paths",
			"To read output from another program, append '-' (e.g. 'echo Hello World | {0} -')",
			"To read from stdin, append '-' (e.g. 'ps aux | grep code | {0} -')",
			"Unknown version",
			"Unknown commit"
		],
		"vs/platform/request/node/request": [
			"HTTP",
			"The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables.",
			"Controls whether the proxy server certificate should be verified against the list of supplied CAs.",
			"The value to send as the 'Proxy-Authorization' header for every network request.",
			"Disable proxy support for extensions.",
			"Enable proxy support for extensions.",
			"Enable proxy support for extensions, override request options.",
			"Use the proxy support for extensions.",
			"Controls whether CA certificates should be loaded from the OS. (On Windows and macOS a reload of the window is required after turning this off.)"
		],
		"vs/platform/extensionManagement/common/extensionManagement": [
			"Extensions",
			"Preferences"
		],
		"vs/platform/dialogs/common/dialogs": [
			"...1 additional file not shown",
			"...{0} additional files not shown"
		],
		"vs/platform/telemetry/common/telemetryService": [
			"Telemetry",
			"Enable usage data and errors to be sent to a Microsoft online service."
		],
		"vs/agent/remoteAgentEnvironmentImpl": [
			"Overwriting extension {0} with {1}."
		],
		"vs/code/node/cliProcessMain": [
			"Extension '{0}' not found.",
			"Extension '{0}' is not installed.",
			"Make sure you use the full extension ID, including the publisher, eg: {0}",
			"Installing extensions...",
			"Failed Installing Extensions: {0}",
			"Extension '{0}' was successfully installed.",
			"Cancelled installing extension '{0}'.",
			"Extension '{0}' is already installed.",
			"Extension '{0}' v{1} is already installed, but a newer version {2} is available in the marketplace. Use '--force' option to update to newer version.",
			"Updating the extension '{0}' to the version {1}",
			"A newer version of extension '{0}' v{1} is already installed. Use '--force' option to downgrade to older version.",
			"Installing extension '{0}' v{1}...",
			"Extension '{0}' v{1} was successfully installed.",
			"Cancelled installing extension '{0}'.",
			"Uninstalling {0}...",
			"Extension '{0}' was successfully uninstalled!"
		],
		"vs/base/node/processes": [
			"Can't execute a shell command on a UNC drive."
		],
		"vs/platform/configuration/common/configurationRegistry": [
			"Default Configuration Overrides",
			"Configure editor settings to be overridden for {0} language.",
			"Configure editor settings to be overridden for a language.",
			"Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.",
			"Cannot register '{0}'. This property is already registered."
		],
		"vs/platform/extensionManagement/node/extensionManagementService": [
			"Extension invalid: package.json is not a JSON file.",
			"Unable to install extension '{0}' as it is not compatible with VS Code '{1}'.",
			"Please restart VS Code before reinstalling {0}.",
			"Can't install extension since it was reported to be problematic.",
			"Unable to install '{0}' extension because it is not compatible with the current version of VS Code (version {1}).",
			"Marketplace is not enabled",
			"Error while removing the extension: {0}. Please Quit and Start VS Code before trying again.",
			"Only Marketplace Extensions can be reinstalled",
			"Unable to install the extension. Please Quit and Start VS Code before reinstalling.",
			"Unable to install the extension. Please Exit and Start VS Code before reinstalling.",
			"Unable to delete the existing folder '{0}' while installing the extension '{1}'. Please delete the folder manually and try again",
			"Cannot read the extension from {0}",
			"Unknown error while renaming {0} to {1}",
			"Extension '{0}' is not installed.",
			"Cannot uninstall extension '{0}'. Extension '{1}' depends on this.",
			"Cannot uninstall extension '{0}'. Extensions '{1}' and '{2}' depend on this.",
			"Cannot uninstall extension '{0}'. Extensions '{1}', '{2}' and others depend on this.",
			"Could not find extension"
		],
		"vs/platform/extensionManagement/node/extensionManagementUtil": [
			"VSIX invalid: package.json is not a JSON file."
		],
		"vs/workbench/api/common/extHostWorkspace": [
			"Extension '{0}' failed to update workspace folders: {1}"
		],
		"vs/workbench/services/files/node/diskFileSystemProvider": [
			"File already exists",
			"File does not exist",
			"Unable to move '{0}' into '{1}' ({2}).",
			"Unable to copy '{0}' into '{1}' ({2})."
		],
		"vs/platform/extensions/node/extensionValidator": [
			"Could not parse `engines.vscode` value {0}. Please use, for example: ^1.22.0, ^1.22.x, etc.",
			"Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions before 1.0.0, please define at a minimum the major and minor desired version. E.g. ^0.10.0, 0.10.x, 0.11.0, etc.",
			"Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions after 1.0.0, please define at a minimum the major desired version. E.g. ^1.10.0, 1.10.x, 1.x.x, 2.x.x, etc.",
			"Extension is not compatible with Code {0}. Extension requires: {1}."
		],
		"vs/workbench/api/node/extHostExtensionService": [
			"Path {0} does not point to a valid extension test runner."
		],
		"vs/workbench/services/extensions/node/extensionPoints": [
			"Failed to parse {0}: {1}.",
			"Cannot read file {0}: {1}.",
			"Failed to parse {0}: {1}.",
			"Couldn't find message for key {0}.",
			"Extension version is not semver compatible.",
			"Got empty extension description",
			"property publisher must be of type `string`.",
			"property `{0}` is mandatory and must be of type `string`",
			"property `{0}` is mandatory and must be of type `string`",
			"property `{0}` is mandatory and must be of type `object`",
			"property `{0}` is mandatory and must be of type `string`",
			"property `{0}` can be omitted or must be of type `string[]`",
			"property `{0}` can be omitted or must be of type `string[]`",
			"properties `{0}` and `{1}` must both be specified or must both be omitted",
			"property `{0}` can be omitted or must be of type `string`",
			"Expected `main` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.",
			"properties `{0}` and `{1}` must both be specified or must both be omitted"
		],
		"vs/base/node/zip": [
			"Error extracting {0}. Invalid file.",
			"Incomplete. Found {0} of {1} entries",
			"{0} not found inside zip."
		],
		"vs/base/common/errorMessage": [
			"{0}: {1}",
			"An unknown error occurred. Please consult the log for more details.",
			"A system error occurred ({0})",
			"An unknown error occurred. Please consult the log for more details.",
			"{0} ({1} errors in total)",
			"An unknown error occurred. Please consult the log for more details."
		],
		"vs/base/common/jsonErrorMessages": [
			"Invalid symbol",
			"Invalid number format",
			"Property name expected",
			"Value expected",
			"Colon expected",
			"Comma expected",
			"Closing brace expected",
			"Closing bracket expected",
			"End of file expected"
		],
		"vs/workbench/api/common/extHostExtensionActivator": [
			"Cannot activate extension '{0}' because it depends on extension '{1}', which failed to activate.",
			"Activating extension '{0}' failed: {1}."
		],
		"vs/base/common/severity": [
			"Error",
			"Warning",
			"Info"
		],
		"vs/workbench/common/views": [
			"A view with id '{0}' is already registered in the container '{1}'"
		],
		"vs/platform/workspaces/common/workspaces": [
			"Code Workspace"
		],
		"vs/workbench/api/node/extHost.api.impl": [
			"Remote Extension Host",
			"Extension Host"
		],
		"vs/workbench/api/common/extHostProgress": [
			"{0} (Extension)"
		],
		"vs/workbench/api/common/extHostDiagnostics": [
			"Not showing {0} further errors and warnings."
		],
		"vs/workbench/api/common/extHostTreeViews": [
			"No tree view with id '{0}' registered.",
			"No tree view with id '{0}' registered.",
			"No tree view with id '{0}' registered.",
			"No tree view with id '{0}' registered.",
			"Element with id {0} is already registered"
		],
		"vs/workbench/api/node/extHostDebugService": [
			"debuggee"
		],
		"vs/platform/markers/common/markers": [
			"Error",
			"Warning",
			"Info"
		],
		"vs/editor/common/config/editorOptions": [
			"The editor is not accessible at this time. Press Alt+F1 for options.",
			"Editor content"
		],
		"vs/workbench/services/configurationResolver/common/variableResolver": [
			"'{0}' can not be resolved. Please open an editor.",
			"'{0}' can not be resolved. No such folder '{1}'.",
			"'{0}' can not be resolved in a multi folder workspace. Scope this variable using ':' and a workspace folder name.",
			"'{0}' can not be resolved. Please open a folder.",
			"'{0}' can not be resolved because no environment variable name is given.",
			"'{0}' can not be resolved because setting '{1}' not found.",
			"'{0}' can not be resolved because '{1}' is a structured value.",
			"'{0}' can not be resolved because no settings name is given.",
			"'{0}' can not be resolved. Make sure to have a line selected in the active editor.",
			"'{0}' can not be resolved. Make sure to have some text selected in the active editor.",
			"'{0}' can not be resolved because the command has no value."
		],
		"vs/workbench/contrib/debug/node/debugAdapter": [
			"Debug adapter executable '{0}' does not exist.",
			"Cannot determine executable for debug adapter '{0}'.",
			"Unable to launch debug adapter from '{0}'.",
			"Unable to launch debug adapter."
		],
		"vs/workbench/contrib/debug/node/terminals": [
			"VS Code Console",
			"Script '{0}' failed with exit code {1}",
			"'{0}' not supported",
			"Press any key to continue...",
			"'{0}' failed with exit code {1}",
			"can't find terminal application '{0}'"
		]
	},
	"bundles": {
		"vs/agent/remoteExtensionHostAgent": [
			"vs/agent/remoteAgentEnvironmentImpl",
			"vs/base/common/errorMessage",
			"vs/base/common/jsonErrorMessages",
			"vs/base/common/severity",
			"vs/base/node/processes",
			"vs/base/node/zip",
			"vs/code/node/cliProcessMain",
			"vs/platform/configuration/common/configurationRegistry",
			"vs/platform/dialogs/common/dialogs",
			"vs/platform/extensionManagement/common/extensionManagement",
			"vs/platform/extensionManagement/node/extensionManagementService",
			"vs/platform/extensionManagement/node/extensionManagementUtil",
			"vs/platform/extensions/node/extensionValidator",
			"vs/platform/request/node/request",
			"vs/platform/telemetry/common/telemetryService",
			"vs/workbench/services/extensions/node/extensionPoints",
			"vs/workbench/services/files/node/diskFileSystemProvider"
		],
		"vs/agent/remoteCli": [
			"vs/platform/environment/node/argv"
		],
		"vs/agent/remoteExtensionHostProcess": [
			"vs/base/common/errorMessage",
			"vs/base/common/severity",
			"vs/base/node/processes",
			"vs/editor/common/config/editorOptions",
			"vs/platform/configuration/common/configurationRegistry",
			"vs/platform/extensionManagement/common/extensionManagement",
			"vs/platform/markers/common/markers",
			"vs/platform/workspaces/common/workspaces",
			"vs/workbench/api/common/extHostDiagnostics",
			"vs/workbench/api/common/extHostExtensionActivator",
			"vs/workbench/api/common/extHostProgress",
			"vs/workbench/api/common/extHostTreeViews",
			"vs/workbench/api/common/extHostWorkspace",
			"vs/workbench/api/node/extHost.api.impl",
			"vs/workbench/api/node/extHostDebugService",
			"vs/workbench/api/node/extHostExtensionService",
			"vs/workbench/common/views",
			"vs/workbench/contrib/debug/node/debugAdapter",
			"vs/workbench/contrib/debug/node/terminals",
			"vs/workbench/services/configurationResolver/common/variableResolver"
		],
		"vs/workbench/services/files/node/watcher/unix/watcherApp": [
			"vs/base/node/processes"
		],
		"vs/workbench/services/files/node/watcher/nsfw/watcherApp": [
			"vs/base/node/processes"
		]
	}
}